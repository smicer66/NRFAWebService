package com.probase.nrfa.authenticator;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonValue;
import javax.security.auth.login.LoginException;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.probase.nrfa.enumerations.AccountStatus;
import com.probase.nrfa.enumerations.CardStatus;
import com.probase.nrfa.enumerations.CardType;
import com.probase.nrfa.enumerations.DeviceStatus;
import com.probase.nrfa.enumerations.DeviceType;
import com.probase.nrfa.enumerations.DistributorStatus;
import com.probase.nrfa.enumerations.MerchantStatus;
import com.probase.nrfa.enumerations.MobileAccountStatus;
import com.probase.nrfa.enumerations.PaymentMeans;
import com.probase.nrfa.enumerations.RequestType;
import com.probase.nrfa.enumerations.RoleType;
import com.probase.nrfa.enumerations.ServiceType;
import com.probase.nrfa.enumerations.TransactionFields;
import com.probase.nrfa.enumerations.TransactionStatus;
import com.probase.nrfa.enumerations.UserStatus;
import com.probase.nrfa.models.Acquirer;
import com.probase.nrfa.models.AuditTrail;
import com.probase.nrfa.models.Bank;
import com.probase.nrfa.models.CardScheme;
import com.probase.nrfa.models.Device;
import com.probase.nrfa.models.Distributor;
import com.probase.nrfa.models.ECard;
import com.probase.nrfa.models.Merchant;
import com.probase.nrfa.models.MerchantScheme;
import com.probase.nrfa.models.RequestTransactionReversal;
import com.probase.nrfa.models.TrafficScheme;
import com.probase.nrfa.models.TrafficTollPrice;
import com.probase.nrfa.models.TrafficTollRoute;
import com.probase.nrfa.models.TrafficTollRouteLane;
import com.probase.nrfa.models.Transaction;
import com.probase.nrfa.models.User;
import com.probase.nrfa.util.Application;
import com.probase.nrfa.util.ERROR;
import com.probase.nrfa.util.PrbCustomService;
import com.probase.nrfa.util.ServiceLocator;
import com.probase.nrfa.util.SwpService;
import com.probase.nrfa.util.UtilityHelper;
import com.probase.nrfa.enumerations.Channel;
import com.probase.nrfa.enumerations.TransactionCode;
import com.probase.nrfa.enumerations.NFRACurrency;
import com.probase.nrfa.models.Account;
import com.probase.nrfa.models.District;
import com.sun.org.apache.bcel.internal.generic.NEW;

public final class ReportFunction {

    private static ReportFunction authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(ReportFunction.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;

    private ReportFunction() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static ReportFunction getInstance() {
        if ( authenticator == null ) {
            authenticator = new ReportFunction();
        }

        return authenticator;
    }
    
	public Response listTransactions(String merchantCode, String cardPan,
			String terminalId, Double minumumAmount, Double maximumAmount,
			String serviceType, String startRoute, String endRoute,
			Integer tollLane, String trafficScheme, String startDate,
			String endDate, String transactionStatus, String orderBy, String orderByPreference,
			String vehicleRegNo, String paymentMeans, String currency, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			if(userBranchCode!=null)
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()) && merchantCode!=null && merchantCode!=userBankCode)
			{
				//Force merchant code to be bank staff code to avoid bank staff viewing other banks transactions on purpose
				merchantCode = userBankCode;
			}
			
			String hql = "Select distinct tp from Transaction tp ";
			String sql = "";
			
			
			if(merchantCode!=null)
			{
				Merchant m1 = (Merchant)this.swpService.getUniqueRecordByHQL("Select tp from Merchant tp where tp.merchantCode = '" + merchantCode + "'");
				if(m1!=null)
					sql = sql + (sql!="" ? "AND " :"WHERE ") + "(tp.crMerchantId = " + m1.getId() + " OR tp.drMerchantId = " + m1.getId() + " OR tp.merchant.id = " + m1.getId() + ") ";
			}
			if(cardPan!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.card.cardPan = '" + cardPan + "' ";
			if(terminalId!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.device.deviceCode = '" + terminalId + "' ";
			if(minumumAmount!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.amount > '" + minumumAmount + "' ";
			if(maximumAmount!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.amount < '" + maximumAmount + "' ";
			if(serviceType!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.serviceType = " + ServiceType.valueOf(serviceType).ordinal() + " ";
			if(startRoute!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.startRoute = '" + startRoute + "' ";
			if(endRoute!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.endRoute = '" + endRoute + "' ";
			if(tollLane!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.tollLane = " + tollLane + " ";
			if(trafficScheme!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.trafficScheme = '" + trafficScheme + "' ";
			if(startDate!=null && startDate.length()>0)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.created_at > '" + startDate + "' ";
			if(endDate!=null && endDate.length()>0)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.created_at < '" + endDate + "' ";
			if(transactionStatus!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.status = " + TransactionStatus.valueOf(transactionStatus).ordinal() + " ";
			if(vehicleRegNo!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.carPlateNumber = '" + vehicleRegNo + "' ";
			if(paymentMeans!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.paymentMeans = '" + PaymentMeans.valueOf(paymentMeans).ordinal() + "' ";
			if(paymentMeans!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.nfraCurrency = '" + NFRACurrency.valueOf(currency).ordinal() + "' ";
			
			sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.deleted_at IS NULL";
			
			/*if(orderBy!=null)
				sql = sql + "GROUP by tp.id ORDER BY " + ("tp."+(TransactionFields.valueOf(orderBy).name())) + " " + (orderByPreference=="ASC" || orderByPreference=="DESC" ? orderByPreference : "DESC");
			else
				sql = sql + "GROUP by tp.id ORDER BY tp.transactionDate DESC";*/
			
			hql = hql + sql;
			
			log.info(requestId + "SQL = " + sql);
			
			
			//ORDER BY tp.transactionDate DESC LIMIT " + startIndex + "," + limit ;
			log.info(requestId + "3.hql ==" + hql);
			Collection<Transaction> transactions = (Collection<Transaction>)swpService.getAllRecordsByHQL(hql);
			
			
			
			if(transactions.size()>0)
			{
				Iterator<Transaction> iterator = transactions.iterator();
				
				JSONArray transactionList = new JSONArray();
				
				while(iterator.hasNext())
				{
					Transaction transaction = iterator.next();
					
					JSONObject txn = new JSONObject();
					txn.put("orderId", transaction.getOrderRef()); 
					txn.put("terminalId", transaction.getDeviceCode());
					txn.put("amount", transaction.getAmount());
					txn.put("narration", transaction.getNarration());
					txn.put("serviceType", transaction.getServiceType().name());
					if(transaction.getStartRoute()!=null)
						txn.put("startRoute", transaction.getStartRoute());
					if(transaction.getEndRoute()!=null)
						txn.put("endRoute", transaction.getEndRoute());
					if(transaction.getTollLane()!=null)
						txn.put("tollLane", transaction.getTollLane());
					if(transaction.getTrafficScheme()!=null)
						txn.put("trafficSchemeCode", transaction.getTrafficScheme().getSchemeCode());
					txn.put("channel", transaction.getChannel().name());
					if(transaction.getCard()!=null)
						txn.put("cardPan", transaction.getCard().getPan());
					txn.put("transactionFee", transaction.getTransactionFee());
					txn.put("transactionStatus", transaction.getStatus().name());
					txn.put("paymentRef", transaction.getTransactionRef());
					
					txn.put("transactionDate", transaction.getTransactionDate());
					txn.put("transactionPostedAt", transaction.getCreated_at());
					txn.put("vehicleRegistrationNumber", transaction.getCarPlateNumber()==null ? "" : transaction.getCarPlateNumber());
					txn.put("currency", transaction.getNFRACurrency().name());
					txn.put("receiptNumber", transaction.getReceiptNo());
					txn.put("cashier", transaction.getTransactingUserName()==null ? "" : transaction.getTransactingUserName());
					txn.put("vehicleRegistrationNumber", transaction.getCarPlateNumber()==null ? "" : transaction.getCarPlateNumber());
					txn.put("extraDetails", transaction.getExtraDetails()==null ? "" : transaction.getExtraDetails());
		            transactionList.put(txn);
					
					
					
					
				}
				
				jsonObject.add("message", "Transaction Listing");
				jsonObject.add("transactionList", transactionList.toString());
				jsonObject.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
            jsonObject.add("message", "Transactions not found");
			jsonObject.add("status", ERROR.TRANSACTIONS_NOT_FOUND);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NOT_FOUND ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	public Response getCardList( String merchantCode, String batchId, String token, Boolean assignedToDistributor, String cardStatus, 
    		String distributorCode, String bankCode, String schemeCode, String requestId, String ipAddress )
    {
    	
    	
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			
			
			String hql = "Select distinct tp from ECard tp";
			if(merchantCode!=null)
				hql = hql + " where tp.merchantCode = '" + merchantCode + "' ";
			
			if(batchId!=null)
				hql = hql + "AND tp.batchId = '"+batchId+"'";
			if(assignedToDistributor!=null)
			{
				if(assignedToDistributor.equals(Boolean.TRUE))
					hql = hql + "AND tp.distributor.distributorCode IS NOT NULL ";
				else
					hql = hql + "AND tp.distributor IS NULL ";
			}
			
			if(cardStatus!=null)
			{
				hql = hql + " AND tp.merchantCode = " + CardStatus.valueOf(cardStatus).ordinal();
			}
			if(distributorCode!=null && ((assignedToDistributor!=null && assignedToDistributor.equals(Boolean.TRUE)) || assignedToDistributor==null))
			{
				hql = hql + "AND tp.distributor.distributorCode = '"+(distributorCode) +"' ";
			}
			
			if(bankCode!=null)
			{
				if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()))
				{
					log.info(requestId + "Force BankCode to be Bank staff bank code ... "+userBankCode);
					bankCode = userBankCode;
				}
				
				hql = hql + "AND tp.merchant.merchantBank.bankCode = '"+(bankCode) +"' ";
			}
			
			
			if(schemeCode!=null)
			{
				hql = hql + "AND tp.cardScheme.schemeCode = '"+(schemeCode) +"' ";
			}
			
			if(roleCode!=null && (roleCode.equals(RoleType.BANK_STAFF.name()) || roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name())))
			{
				hql = hql + " AND tp.uniqueId IS NOT NULL";
			}
			
			//hql = hql + " ORDER BY tp.created_at DESC" ;
			log.info(requestId + "3.hql ==" + hql);
			Collection<ECard> ecards = (Collection<ECard>)swpService.getAllRecordsByHQL(hql);
			
			Iterator<ECard> iterator = ecards.iterator();
			
			JSONArray ecardList = new JSONArray();
			while(iterator.hasNext())
			{
				ECard ecard = iterator.next();
				
				JSONObject jsObjectCard = new JSONObject();
				jsObjectCard.put("cardPan", ecard.getPan());
				jsObjectCard.put("expiryDate", new SimpleDateFormat("YYYY-MM-dd").format(ecard.getExpiryDate()));
				if(ecard.getUniqueId()!=null)
					jsObjectCard.put("cardUniqueId", ecard.getUniqueId());
				jsObjectCard.put("currentEValue", ecard.getCurrentBalance());
				jsObjectCard.put("currentDebt", ecard.getCurrentDebt());
				jsObjectCard.put("totalAmountSpent", ecard.getTotalDebited());
				jsObjectCard.put("totalAmountCredited", ecard.getTotalCredited());
				jsObjectCard.put("batchId", ecard.getBatchId());
				if(ecard.getDistributor()!=null)
					jsObjectCard.put("distributorCode", ecard.getDistributor().getDistributorCode());
				if(ecard.getMerchant()!=null)
					jsObjectCard.put("merchantCode", ecard.getMerchant().getMerchantCode());
				if(ecard.getMerchant()!=null)
					jsObjectCard.put("bankCode", ecard.getMerchant().getMerchantBank().getBankCode());
				jsObjectCard.put("status", ecard.getCardStatus().name());
				ecardList.put(jsObjectCard);
				
				
			}
			
			jsonObject.add("message", "Card Listing");
			jsonObject.add("cardList", ecardList.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
    }
	
	
	
	public Response getMerchantList(String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			
			if(roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()))
			{
				jsonObject.add("status", ERROR.INVALID_MERCHANT_LISTING_PRIVILEDGES);
				jsonObject.add("message", "Invalid Merchant Listing Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select distinct tp from Merchant tp";// ORDER BY tp.created_at";
			//DE LIMIT " + startIndex + ", " + limit;
			Collection<Merchant> merchants= (Collection<Merchant>)this.swpService.getAllRecordsByHQL(hql);
			
			JSONArray jsonArray = new JSONArray();
			if(merchants.size()>0)
			{
				Iterator<Merchant> merchantIterator = merchants.iterator();
				while(merchantIterator.hasNext())
				{
					Merchant merchant = merchantIterator.next();
					JSONObject json = new JSONObject();
					json.put("merchantName", merchant.getMerchantName());
					json.put("merchantBankCode", merchant.getMerchantBank().getBankCode());
					json.put("merchantBank", merchant.getMerchantBank().getBankName());
					json.put("merchantCode", merchant.getMerchantCode());
					
					jsonArray.put(json);
				}
			}
			jsonObject.add("message", "Merchant List generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("merchantList", jsonArray.toString());
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
	
	public Response listDistributors(String merchantCode, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()))
				merchantCode = userBankCode;
			
			JSONArray jsonArray = new JSONArray();
			boolean assignedTrue = false;
			
			
			String hql = "Select distinct tp from Distributor tp";
			if(merchantCode!=null)
				hql = hql + " WHERE tp.merchantCode = '" + merchantCode + "'";
			
			//hql = hql + " ORDER BY created_at DESC";
			Collection<Distributor> distributorList= (Collection<Distributor>)this.swpService.getAllRecordsByHQL(hql);
			
			
			
			if(distributorList!=null && distributorList.size()>0)
			{
				Iterator<Distributor> distributorIterator = distributorList.iterator();
				while(distributorIterator.hasNext())
				{
					Distributor distributor = distributorIterator.next();
					hql = "Select tp from Account tp WHERE tp.distributorId = " + distributor.getId();
					Account acct= (Account)this.swpService.getUniqueRecordByHQL(hql);
					
					JSONObject json = new JSONObject();
					json.put("contactEmail", distributor.getContactEmail());
					json.put("contactMobile", distributor.getContactMobile());
					json.put("address", distributor.getContactAddress());
					json.put("city", distributor.getCity());
					json.put("district", distributor.getDistrict());
					json.put("province", distributor.getProvince());
					json.put("companyName", distributor.getCompanyName());
					if(distributor.getCompanyRegNo()!=null)
						json.put("companyRegNo", distributor.getCompanyRegNo());
					json.put("distributorCode", distributor.getDistributorCode());
					json.put("fundingAccountType", distributor.getFundingAccountType().name());
					json.put("contactFullName", distributor.getContactFullName());
					json.put("merchantCode", distributor.getMerchantCode());
					json.put("distributorAccount", acct.getAccountIdentifier());
					json.put("distributorAccountBalance", acct.getCurrentBalance());
					jsonArray.put(json);
				}
				
				
				jsonObject.add("message", "Distributor List");
				jsonObject.add("status", ERROR.GENERAL_OK);
				jsonObject.add("distributorList", jsonArray.toString());
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("message", "No Distributors Currently listed on the platform");
				jsonObject.add("status", ERROR.NO_DISTRIBUTOR_LIST);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NO_CONTENT ).entity( jsonObj.toString() ).build();
			}
			
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}
	
    
	
	
	
	
	public Response getTransactionFieldsList() {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			TransactionFields[] transactionFieldList = TransactionFields.values();
			JSONObject transactionFieldObj = new JSONObject();
			
			for(int i=0; i<transactionFieldList.length; i++)
			{
				transactionFieldObj.put(i+"", transactionFieldList[i].name());
			}
			
			jsonObject.add("message", "Transaction Fields Listed");
			jsonObject.add("transactionFieldList", transactionFieldObj.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	public Response getNFRACurrencyList() {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			NFRACurrency[] nfraCurrencyList = NFRACurrency.values();
			JSONObject nfraCurrencyObj = new JSONObject();
			
			for(int i=0; i<nfraCurrencyList.length; i++)
			{
				nfraCurrencyObj.put(i+"", nfraCurrencyList[i].name());
			}
			
			jsonObject.add("message", "Transaction Fields Listed");
			jsonObject.add("nfraCurrencyList", nfraCurrencyObj.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response getTollPlazaByTransactionCountAndValue(String routeCode,
			String startDate, String endDate, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			String hql = "Select tp from TrafficTollRoute tp where tp.routeCode = '" + routeCode + "'";
			TrafficTollRoute trafficTollRoute = (TrafficTollRoute)this.swpService.getUniqueRecordByHQL(hql);
			
			if(trafficTollRoute==null)
			{
				jsonObject.add("status", ERROR.NO_ROUTE_MATCHING_ROUTE_CODE);
				jsonObject.add("message", "No Route matches the Route Code provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
			hql = "Select distinct tp.startRoute, tp.endRoute, count(tp.id) as countre, SUM(tp.amount) as total from Transaction tp ";
			String sql = "";
			
			
			
			if(routeCode!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "(lower(tp.startRoute) = '" + trafficTollRoute.getStartRouteName().toLowerCase() + "' AND " + "lower(tp.endRoute) = '" + trafficTollRoute.getEndRouteName().toLowerCase() + "') ";
			if(startDate!=null && startDate.length()>0)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.created_at > '" + startDate + "' ";
			if(endDate!=null && endDate.length()>0)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.created_at < '" + endDate + "' ";
			
			sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.deleted_at IS NULL ";

			//sql = sql + "ORDER by countre DESC";
			
			
			hql = hql + sql;
			
			log.info(requestId + "SQL = " + sql);
			
			
			//ORDER BY tp.transactionDate DESC LIMIT " + startIndex + "," + limit ;
			log.info(requestId + "3.hql ==" + hql);
			List<Object[]> transactions = (List<Object[]>)swpService.getAllRecordsByHQL(hql);
			
			
			
			
			
			if(transactions.size()>0)
			{
				Iterator<Object[]> iterator = transactions.iterator();
				
				
				JSONArray transactionList = new JSONArray();
				
				while(iterator.hasNext())
				{
					Object[] transaction = iterator.next();
					
					JSONObject txn = new JSONObject();
					txn.put("startRoute", transaction[0]); 
					txn.put("endRoute", transaction[1]);
					txn.put("transactionCount", transaction[2]);
					txn.put("transactionSum", transaction[3]);
		            transactionList.put(txn);
				}
				
				jsonObject.add("message", "Transaction Listing");
				jsonObject.add("transactionList", transactionList.toString());
				jsonObject.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
            jsonObject.add("message", "Transactions not found");
			jsonObject.add("status", ERROR.TRANSACTIONS_NOT_FOUND);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NOT_FOUND ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
	
	
	public Response getMerchantsByTransactionCountAndValue(String merchantCode,
			String startDate, String endDate, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			String hql = "Select tp from Merchant tp where tp.merchantCode = '" + merchantCode + "'";
			Merchant merchant = (Merchant)this.swpService.getUniqueRecordByHQL(hql);
			
			hql = "Select distinct tp.merchant.merchantCode, tp.merchant.merchantName, count(tp.id) as countre, SUM(tp.amount) as total from Transaction tp ";
			String sql = "";
			
			
			
			if(merchantCode!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "(lower(tp.merchant.merchantCode) = '" + merchantCode.toLowerCase() + "') ";
			if(startDate!=null && startDate.length()>0)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.created_at > '" + startDate + "' ";
			if(endDate!=null && endDate.length()>0)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.created_at < '" + endDate + "' ";

			sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.deleted_at IS NULL ";
			
			sql = sql + "GROUP BY tp.merchant.merchantCode";
			//ORDER by countre DESC";
			
			
			hql = hql + sql;
			
			log.info(requestId + "SQL = " + sql);
			
			
			//ORDER BY tp.transactionDate DESC LIMIT " + startIndex + "," + limit ;
			log.info(requestId + "3.hql ==" + hql);
			List<Object[]> transactions = (List<Object[]>)swpService.getAllRecordsByHQL(hql);
			
			
			
			
			
			if(transactions.size()>0)
			{
				Iterator<Object[]> iterator = transactions.iterator();
				
				
				JSONArray transactionList = new JSONArray();
				
				while(iterator.hasNext())
				{
					Object[] transaction = iterator.next();
					
					JSONObject txn = new JSONObject();
					txn.put("merchantCode", transaction[0]); 
					txn.put("merchantName", transaction[1]);
					txn.put("transactionCount", transaction[2]);
					txn.put("transactionSum", transaction[3]);
		            transactionList.put(txn);
				}
				
				jsonObject.add("message", "Transaction Listing");
				jsonObject.add("transactionList", transactionList.toString());
				jsonObject.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
            jsonObject.add("message", "Transactions not found");
			jsonObject.add("status", ERROR.TRANSACTIONS_NOT_FOUND);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NOT_FOUND ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
}