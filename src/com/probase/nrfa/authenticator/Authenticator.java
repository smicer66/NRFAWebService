package com.probase.nrfa.authenticator;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.UUID;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.security.auth.login.LoginException;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.probase.nrfa.enumerations.DistributorStatus;
import com.probase.nrfa.enumerations.RequestType;
import com.probase.nrfa.enumerations.RoleType;
import com.probase.nrfa.enumerations.UserStatus;
import com.probase.nrfa.models.AuditTrail;
import com.probase.nrfa.models.Distributor;
import com.probase.nrfa.models.TrafficTollRouteLane;
import com.probase.nrfa.models.Transaction;
import com.probase.nrfa.models.User;
import com.probase.nrfa.util.Application;
import com.probase.nrfa.util.ERROR;
import com.probase.nrfa.util.PrbCustomService;
import com.probase.nrfa.util.ServiceLocator;
import com.probase.nrfa.util.SmsSender;
import com.probase.nrfa.util.SwpService;
import com.probase.nrfa.util.UtilityHelper;

public final class Authenticator {

    private static Authenticator authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(Authenticator.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;

	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private Authenticator() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static Authenticator getInstance() {
        if ( authenticator == null ) {
            authenticator = new Authenticator();
        }

        return authenticator;
    }

    public Response login( String username, String encPassword, String bankCode, Boolean requireOtp , String requestId, String ipAddress) throws LoginException {
        /*if ( serviceKeysStorage.containsKey( serviceKey ) ) {
            String usernameMatch = serviceKeysStorage.get( serviceKey );

            if ( usernameMatch.equals( username ) && usersStorage.containsKey( username ) ) {
                String passwordMatch = usersStorage.get( username );

                if ( passwordMatch.equals( password ) ) {
                    String authToken = UUID.randomUUID().toString();
                    authorizationTokensStorage.put( authToken, username );

                    return authToken;
                }
            }
        }*/
        
        //log.info(requestId + "Hibernate Version" + org.hibernate.);
    	log.info(requestId + "Proceed 2");
    	
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try{
			if(username==null || encPassword==null || bankCode ==null)
	    	{
				log.info(requestId + "Proceed 3");
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters in request");
				if(username!=null)
					jsonObject.add("username", username);
				
	            JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
	    	}
			log.info(requestId + "Proceed 4");
			
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject bankKeys = application.getAccessKeys();
			if(bankKeys!=null && bankKeys.length()==0)
			{
				log.info(requestId + "bankKeys ==  ");
				jsonObject.add("status", ERROR.GENERAL_SYSTEM_ERROR);
				jsonObject.add("message", "General System Error. System still initializing");
				jsonObject.add("username", username);
	            JsonObject jsonObj = jsonObject.build();
	 
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			String bankKey = null;
			bankKey = bankKeys.getString(bankCode);

			log.info(requestId + "username: " + username);
			log.info(requestId + "encPassword: " + encPassword);
			
			String hql = "Select tp from User tp where tp.username = '" + username + "'" +
					"AND tp.userStatus = " + UserStatus.ACTIVE.ordinal() + "";
			log.info(requestId + "hql: " + hql);
			log.info(requestId + "UserStatus.ACTIVE.ordinal() == " + UserStatus.ACTIVE.ordinal());
			log.info(requestId + "UserStatus.INACTIVE.ordinal() == " + UserStatus.INACTIVE.ordinal());
			User user = (User)this.swpService.getUniqueRecordByHQL(hql);
			
			if(user!=null)
			{
				
				String epassword = user.getPassword();
				Object password = UtilityHelper.decryptData(epassword, bankKey);
				String password_1 = (String)password;
				log.info(requestId + "password_1" + password_1);
				
				if(!password_1.equals(encPassword))
				{
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed");
					jsonObject.add("user", username);
		            JsonObject jsonObj = jsonObject.build();
		 
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
					
				
				user.setFailedLoginCount(0);
				if(requireOtp!=null && requireOtp.equals(Boolean.TRUE)){
					user.setOtp(RandomStringUtils.randomNumeric(4));
				}
				else
				{
					user.setLastLoginDate(new Date());
					this.swpService.updateRecord(user);
				}
				
				JSONObject userDetails = new JSONObject();
				userDetails.put("username", username);
				userDetails.put("roleCode", RoleType.valueOf(user.getRoleCode().name()));
				userDetails.put("bankCode", user.getBankCode());
				userDetails.put("branchCode", user.getBranchCode());
				userDetails.put("priviledges", user.getPrivileges());
				if(user.getRoleCode().equals(RoleType.DISTRIBUTOR_STAFF))
					userDetails.put("distributorCode", user.getDistributor().getDistributorCode());
				
				Gson gson = new Gson();
				String obj = gson.toJson(userDetails);
				//Key jwtKey = Application.getKey();
				//String token = Jwts.builder().setSubject(obj).signWith(SignatureAlgorithm.HS512, jwtKey).compact();
				String tkId = RandomStringUtils.randomAlphanumeric(10);
				log.info(requestId + "tkId ==" + tkId);
				String token = application.createJWT(tkId, user.getBankCode(), user.getBranchCode(), obj, (24*60*60*1000));
				this.application.addTokenToTokenList(token);
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.LOGIN_USER, requestId, this.swpService, user.getUsername(), user.getId(), User.class.getName());
				
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				jsonObject.add("message", "Authentication Ok");
				jsonObject.add("username", user.getUsername());
				jsonObject.add("roleCode", user.getRoleCode().name());
				if(user.getBranchCode()!=null)
					jsonObject.add("branchCode", user.getBranchCode());
				jsonObject.add("token", token);
				jsonObject.add("firstName", user.getFirstName()==null ? "" : user.getFirstName());
				jsonObject.add("lastName", user.getLastName()==null ? "" : user.getLastName());
				jsonObject.add("otherName", user.getOtherName()==null ? "" : user.getOtherName());
				if(user.getRoleCode().equals(RoleType.NFRA_TOLL_STAFF))
				{
					jsonObject.add("routeCode", user.getAssignedTrafficTollRouteCode()==null ? "" : user.getAssignedTrafficTollRouteCode());					
					jsonObject.add("startRoute", user.getAssignedTrafficTollRouteStart()==null ? "" : user.getAssignedTrafficTollRouteStart());
					jsonObject.add("endRoute", user.getAssignedTrafficTollRouteEnd()==null ? "" : user.getAssignedTrafficTollRouteEnd());
					jsonObject.add("tollLane", user.getAssignedTrafficTollRouteLane()==null ? "" : user.getAssignedTrafficTollRouteLane() + "");
				}
				
				if(requireOtp!=null && requireOtp.equals(Boolean.TRUE))
				{
					jsonObject.add("otp", user.getOtp());
					jsonObject.add("otprecmobile", user.getMobileNumber());

					String message = "Logging Into NFRA IMS? Your OTP is " + user.getOtp() + ". Your OTP expires in 5 minutes.";
		            UtilityHelper.sendSMS(this.swpService, message, user.getMobileNumber());
				}
	            JsonObject jsonObj = jsonObject.build();
	            
	            
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				//return null;
				hql = "Select tp from User tp where tp.username = '" + username + "'";
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user!=null)
				{
					user.setFailedLoginCount((user.getFailedLoginCount()==null ? 0 : user.getFailedLoginCount()) + 1);
					if(user.getFailedLoginCount()==3)
					{
						user.setUserStatus(UserStatus.LOCKED);
						this.swpService.updateRecord(user);
					}else
					{
						this.swpService.updateRecord(user);
					}
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed");
					jsonObject.add("user", username);
				}
				else
				{
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed");
					jsonObject.add("user", username);
				}

	            JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
		}catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
    }

    /**
     * The method that pre-validates if the client which invokes the REST API is
     * from a authorized and authenticated source.
     *
     * @param serviceKey The service key
     * @param authToken The authorization token generated after login
     * @return TRUE for acceptance and FALSE for denied.
     */
    public boolean isAuthTokenValid( String serviceKey, String authToken ) {
        if ( isServiceKeyValid( serviceKey ) ) {
            String usernameMatch1 = serviceKeysStorage.get( serviceKey );

            if ( authorizationTokensStorage.containsKey( authToken ) ) {
                String usernameMatch2 = authorizationTokensStorage.get( authToken );

                if ( usernameMatch1.equals( usernameMatch2 ) ) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * This method checks is the service key is valid
     *
     * @param serviceKey
     * @return TRUE if service key matches the pre-generated ones in service key
     * storage. FALSE for otherwise.
     */
    public boolean isServiceKeyValid( String serviceKey ) {
        return serviceKeysStorage.containsKey( serviceKey );
    }

    public void logout( String authToken, String requestId, String ipAddress ) throws Exception {
    	this.swpService = this.serviceLocator.getSwpService();
    	this.application = Application.getInstance(this.swpService);
    	
    	LinkedList<String> tokenList = this.application.getTokenList();
    	
    	Iterator<String> it = tokenList.iterator();
    	while(it.hasNext())
    	{
    		log.info(requestId + "token = " + it.next());
    	}
    	
    	if(tokenList.contains(authToken))
    	{
    		Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(authToken, app);
    		this.application.removeTokenFromTokenList(authToken);
    		
    		String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
    		User user = (User)this.swpService.getUniqueRecordByHQL("Select tp from User tp where tp.username = '"+username+"'");
    		AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.LOGOUT_USER, requestId, 
    				this.swpService, user!=null ? user.getUsername() : null, user!=null ? user.getId() : null, User.class.getName() );
    		
    		log.info(requestId + "New token size = " + this.application.getTokenList().size());
    		return;
    	}

    	return;
    }
    
    
    public JSONObject addNewUser2(String username, String email, String mobileNumber, String userStatus, String details, 
			Boolean updateFlag, String uniqueId, String branchCode, String bankCode, String firstName, String lastName, String otherName, 
			String roleCode, String requestId, String ipAddress)
	{
		JSONObject jsonObject = new JSONObject();
		User user = new User();
		
		
		log.info(requestId + "Create New User");
		try {
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject bankKeys = application.getAccessKeys();
			
			log.info(requestId + "Bank Code = " + bankCode);
			String bankKey = bankKeys.getString(bankCode);
			log.info(requestId + "Bank Key = " + bankKey);
			
			String webActivationCode = RandomStringUtils.randomAlphanumeric(32);
			
			if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				String hql = "Select tp from User tp where lower(tp.uniqueId) = '" + uniqueId + "'";
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user==null)
				{
					jsonObject.put("status", ERROR.BANK_STAFF_CREATE_FAIL);
					jsonObject.put("message", "Invalid User Provided for Update Operation");
					return jsonObject;
				}
			}
			
			
			Application app = Application.getInstance(swpService);
			
				
			
			
				if(roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()) || roleCode.equals(RoleType.NFRA_TOLL_STAFF.name()) 
						 || roleCode.equals(RoleType.BANK_STAFF.name()) || roleCode.equals(RoleType.PROBASE_STAFF.name()))
				{
					user.setRoleCode(RoleType.valueOf(roleCode));
				}
				else
				{
					jsonObject.put("status", ERROR.INVALID_USER_CREATION_PRIVILEDGES);
					jsonObject.put("message", "New user account can not be created. You do not have the priviledges to carry out this action");
					return jsonObject;
				}
			
			
			user.setWebActivationCode(webActivationCode);
			user.setFailedLoginCount(0);
			user.setUsername(username);
			user.setLockOut(Boolean.FALSE);
			user.setCreated_at(new Date());
			user.setUpdated_at(new Date());
			user.setUserStatus(UserStatus.INACTIVE);
			user.setMobileNumber(mobileNumber);
			user.setFirstName(firstName);
			user.setLastName(lastName);
			user.setOtherName(otherName);
			user.setEmail(email);
			user.setBranchCode(branchCode);
			user.setBankCode(bankCode);
			
			String password = RandomStringUtils.randomAlphanumeric(8);
			password = "password";
			log.info(requestId + "Password => " + password);
			String encPassword = (String)UtilityHelper.encryptData(password, bankKey);
			user.setPassword(encPassword);
			
			user = (User)this.swpService.createNewRecord(user);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_USER_CREATION, requestId, this.swpService, null, null, null);
			
			
			JSONObject userDetails = new JSONObject();
			userDetails.put("username", username);
			userDetails.put("email", username);
			userDetails.put("role", RoleType.valueOf(user.getRoleCode().name()));
			userDetails.put("bankCode", user.getBankCode());
			userDetails.put("branchCode", user.getBranchCode());
			userDetails.put("priviledges", user.getPrivileges());
			userDetails.put("webActivationCode", webActivationCode);
			String userDetailsString = new Gson().toJson(userDetails); 
			
			jsonObject.put("status", ERROR.GENERAL_OK);
			jsonObject.put("roleCode", roleCode);
			jsonObject.put("message", "New User Account Created Successfully");
			jsonObject.put("username", username);
			jsonObject.put("user", userDetailsString);
			
			
			
			log.info(requestId + "Create New User = " + jsonObject.toString());
			
			return jsonObject;
		}
		catch (Exception e) {
			// TODO Auto-generated catch block
			log.warn(e);
			try {
				jsonObject.put("status", ERROR.USER_ACCOUNT_CREATION_FAILED);
				jsonObject.put("message", "New user account creation Failed");
				log.warn(e);
				log.info(requestId + "Create New User Failed = " + jsonObject.toString());
			} catch (JSONException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			return jsonObject;
		}
		
	}

	public Response loginOtp(String token, String otp, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		log.info(requestId + "Proceed 2");
    	
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try{
			if(token==null || otp ==null)
	    	{
				log.info(requestId + "Proceed 3");
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters in request");
	            JsonObject jsonObj = jsonObject.build();
	 
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObject.toString() ).build();
	    	}
			
			
			
			
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
				
			log.info(requestId + "VerifyJ = " + verifyJ.toString());
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObject.toString() ).build();
			}
			log.info(requestId + "VerifyJ token = " + verifyJ.getString("token"));
			String tkId = RandomStringUtils.randomAlphanumeric(10);
			log.info(requestId + "tkId ==" + tkId);
			this.application.removeTokenFromTokenList(token);
			this.application.addTokenToTokenList(tkId);
				
			String subject = verifyJ.getString("subject");
			JSONObject user1 = new Gson().fromJson(subject, JSONObject.class);
			
			String bank_code = verifyJ.getString("bankCode");
			String bankKey = UtilityHelper.getBankKey(bank_code, swpService);
			String otpDecrypted = (String)UtilityHelper.decryptData(otp, bankKey);
			
			String hql = "Select tp from User tp where tp.username = " + user1.get("username") + " AND tp.userStatus = " + UserStatus.ACTIVE.ordinal();
			User user = (User)this.swpService.getUniqueRecordByHQL(hql);
			
			log.info(requestId + "hql = " + hql);
			if(user!=null && user.getOtp()!=null && user.getOtp().equals(otpDecrypted))
			{
				Date lastUpdate = user.getUpdated_at();
				log.info(requestId + "lastUpdate==>" + lastUpdate.toString());//7352
				Date now = new Date();
				log.info(requestId + "now==>" + now.toString());
				Calendar cal_5 = Calendar.getInstance();
				cal_5.setTime(lastUpdate);
				log.info(requestId + "cal_5==>" + cal_5.getTime().toString());
				cal_5.add(Calendar.MINUTE, 5);
				Date now_5 = cal_5.getTime();
				log.info(requestId + "now_5==>" + now_5.toString());
				
				if(now.after(now_5))
				{
					//Time has elasped 5 mins timeout for OTP
					jsonObject.add("status", ERROR.OTP_TIMEOUT);
					jsonObject.add("message", "OTP Timeout elasped");
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObject.toString() ).build();
				}
				else
				{
					JSONObject userDetails = new JSONObject();
					userDetails.put("username", verifyJ.getString("username"));
					userDetails.put("roleCode", verifyJ.getString("roleCode"));
					userDetails.put("bankCode", verifyJ.getString("bankCode"));
					userDetails.put("branchCode", verifyJ.getString("branchCode"));
					userDetails.put("priviledges", verifyJ.getString("priviledges"));
					
					Gson gson = new Gson();
					String obj = gson.toJson(userDetails);
					token = application.createJWT(tkId, verifyJ.getString("bankCode"), verifyJ.getString("branchCode"), obj, (24*60*60*1000));
					jsonObject.add("token", token);
					
					log.info(requestId + "user.getOtp() = " + user.getOtp());
					user.setOtp(null);
					user.setLastLoginDate(new Date());
					this.swpService.updateRecord(user);
					AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.LOGIN_USER_OTP, requestId, this.swpService, 
							verifyJ.has("username") ? verifyJ.getString("username") : null, user.getId(), User.class.getName());
					
					jsonObject.add("status", ERROR.GENERAL_SUCCESS);
					jsonObject.add("message", "Authentication Ok");
					jsonObject.add("username", user.getUsername());
					jsonObject.add("roleCode", user.getRoleCode().name());
					jsonObject.add("branchCode", user.getBranchCode());
					jsonObject.add("token", token);
					jsonObject.add("firstName", user.getFirstName()==null ? null : user.getFirstName());
					jsonObject.add("lastName", user.getLastName()==null ? null : user.getLastName());
					jsonObject.add("otherName", user.getOtherName()==null ? null : user.getOtherName());
					jsonObject.add("otp", user.getOtp());
					jsonObject.add("otprecmobile", user.getMobileNumber());
					if(user.getRoleCode().equals(RoleType.NFRA_TOLL_STAFF))
					{
						jsonObject.add("tollRouteStart", user.getAssignedTrafficTollRouteStart()==null ? "" : user.getAssignedTrafficTollRouteStart());
						jsonObject.add("tollRouteEnd", user.getAssignedTrafficTollRouteEnd()==null ? "" : user.getAssignedTrafficTollRouteEnd());
						jsonObject.add("tollRouteCode", user.getAssignedTrafficTollRouteCode()==null ? "" : user.getAssignedTrafficTollRouteCode());
						jsonObject.add("tollRouteLane", user.getAssignedTrafficTollRouteLane());
					}
					
					
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObject.toString() ).build();
				}
			}
			else
			{
				//return null;
				String username= verifyJ.getString("username");
				hql = "Select tp from User tp where tp.username = '" + username + "'";
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				user.setFailedLoginCount((user.getFailedLoginCount()==null ? 0 : user.getFailedLoginCount()) + 1);
				if(user.getFailedLoginCount()==3)
				{
					user.setUserStatus(UserStatus.LOCKED);
					this.swpService.updateRecord(user);
				}else
				{
					this.swpService.updateRecord(user);
				}
				jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
				jsonObject.add("message", "Authentication Failed");
				jsonObject.add("user", username);
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObject.toString() ).build();
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	public Response forgotPassword(String username, String requestId, String ipAddress)
	{
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try
		{
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject bankKeys = application.getAccessKeys();
			if(bankKeys.length()==0)
			{
				return null;
			}
			
			//Key key = Application.getKey();
			//log.info(requestId + "JWT Key: " + key.toString());
			String bankCode = null;
			
			
			String hql = "Select tp from User tp where tp.username = '" + username + "' " +
					"AND tp.userStatus = " + UserStatus.ACTIVE.ordinal();
			User user = (User)this.swpService.getUniqueRecordByHQL(hql);
			
			
			
			if(user!=null)
			{
				bankCode = user.getBankCode();
				String bankKey = null;
				bankKey = UtilityHelper.getBankKey(bankCode, swpService);
				
				
				user.setFailedLoginCount(0);
				user.setLockOut(Boolean.FALSE);
				String password = RandomStringUtils.randomAlphanumeric(8);
				String encPassword = (String)UtilityHelper.encryptData(password, bankKey);
				user.setPassword(encPassword);
				this.swpService.updateRecord(user);
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.FORGOT_PASSWORD, requestId, this.swpService, user.getUsername(), user.getId(), User.class.getName());
				
				String message = "Forgot your password? Your new password is " + password + ". Log in and change your temporary password.";
	            UtilityHelper.sendSMS(this.swpService, message, user.getMobileNumber());
	            
				//jsonObject.add("ps", password);
				jsonObject.add("recMobile", user.getMobileNumber());
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				jsonObject.add("message", "New temporary password set for the user");
				jsonObject.add("username", username);
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObject.toString() ).build();
			}
			else
			{
				//return null;
				jsonObject.add("status", ERROR.NEW_PASSWORD_SET_FAILED);
				jsonObject.add("message", "Password Recovery Failed.");
				jsonObject.add("username", username);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	public Response changePassword(String token, String currentPassword, String encPassword, String requestId, String ipAddress)
	{
		
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try
		{
			log.info("token = " + token);
			log.info("currentPassword = " + currentPassword);
			log.info("encPassword = " + encPassword);
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
			String bankCode = verifyJ.getString("bankCode");
			String subject = verifyJ.getString("subject");
			JSONObject subjectJson = new Gson().fromJson(subject, JSONObject.class);
			
			String hql = "Select tp from User tp where tp.username = '" + subjectJson.getString("username") + "' " +
					"AND tp.userStatus = " + UserStatus.ACTIVE.ordinal();
			log.info(requestId + "hql = " + hql);
			User user = (User)this.swpService.getUniqueRecordByHQL(hql);
			
			String bankKey = null;
			
			bankKey = UtilityHelper.getBankKey(bankCode, swpService);
			
			String cpassword = (String)UtilityHelper.decryptData(currentPassword, bankKey);
			
			
			log.info(requestId + "VerifyJ = " + verifyJ.toString());
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}

			Object reqPassword = currentPassword;
			String reqPassword_1 = (String)reqPassword;
			Object userPassword = UtilityHelper.decryptData(user.getPassword(), bankKey);
			String userPassword_1 = (String)userPassword;
			log.info(requestId + "reqPassword_1 = " + reqPassword_1);
			log.info(requestId + "userPassword_1 = " + userPassword_1);
			
			if(!reqPassword_1.equals(userPassword_1))
			{
				jsonObject.add("status", ERROR.PASSWORD_CHANGE_FAIL);
				jsonObject.add("message", "Password Change Failed");
				jsonObject.add("usename", user.getUsername());
	            JsonObject jsonObj = jsonObject.build();
	 
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "current password = " + user.getPassword() + " && new password = " + cpassword);
			
			user.setFailedLoginCount(0);
			user.setLockOut(false);
			user.setOtp(null);
			
			String password = RandomStringUtils.randomAlphanumeric(8);
			System.out.println(requestId + "Password => " + password);
			String newEncPassword = (String)UtilityHelper.encryptData(encPassword, bankKey);
			user.setPassword(newEncPassword);
			this.swpService.updateRecord(user);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CHANGE_USER_PASSWORD, requestId, this.swpService, user.getUsername(), user.getId(), User.class.getName());
			
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("message", "Password Changed Successfully");
			jsonObject.add("usename", user.getUsername());
			JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
	public Response addNewUser(String token, String username, String email, String mobileNumber, String userStatus, String details, 
			Boolean updateFlag, String uniqueId, String branchCode, String bankCode, String firstName, String lastName, String otherName, 
			String roleCode, String requestId, String ipAddress, String distributorCode)
	{
		log.info("username = " + username);
        log.info("email= " +  email);
        log.info("mobileNumber= " +  mobileNumber);
        log.info("userStatus= " +  userStatus);
        log.info("details= " +  details);
        log.info("updateFlag" +  updateFlag);
        log.info("uniqueId= " +  uniqueId);
        log.info("branchCode= " +  branchCode);
        log.info("bankCode= " +  bankCode);
        log.info("firstName= " +  firstName);
        log.info("lastName= " +  lastName);
        log.info("otherName= " +  otherName);
        log.info("roleCode= " +  roleCode);
        if(distributorCode!=null)
        	log.info("distributorCode= " +  distributorCode);
        
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		Distributor distributor = null;
		User user = new User();
		try
		{
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
			String activeUserRoleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "activeUserRoleCode ==" + (activeUserRoleCode==null ? "" : activeUserRoleCode));
			
			JSONObject bankKeys = application.getAccessKeys();
			
			log.info(requestId + "Bank Code = " + bankCode);
			String bankKey = bankKeys.getString(bankCode);
			log.info(requestId + "Bank Key = " + bankKey);
			
			String webActivationCode = RandomStringUtils.randomAlphanumeric(32);
			
			if(activeUserRoleCode!=null && activeUserRoleCode.equals(RoleType.BANK_STAFF.name()) && roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name()))
			{
				if(distributorCode!=null)
				{
					String hql = "Select tp from Distributor tp where (tp.distributorCode) = '" + distributorCode + "' AND tp.distributorStatus = " + DistributorStatus.ACTIVE.ordinal();
					distributor = (Distributor)this.swpService.getUniqueRecordByHQL(hql);
					if(distributor==null)
					{
						log.info(requestId + "2");
						jsonObject.add("status", ERROR.DISTRIBUTOR_ACCOUNT_NOT_EXIST);
						jsonObject.add("message", "Invalid User Account Creation Failed. Invalid Distributor Code provided");
						JsonObject jsonObj = jsonObject.build();
						return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
					}
				}
				else
				{
					log.info(requestId + "2");
					jsonObject.add("status", ERROR.DISTRIBUTOR_ACCOUNT_NOT_EXIST);
					jsonObject.add("message", "Invalid User Account Creation Failed. Invalid Distributor Code provided");
					JsonObject jsonObj = jsonObject.build();
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
			}
			
			if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				log.info(requestId + "1");
				String hql = "Select tp from User tp where lower(tp.uniqueId) = '" + uniqueId + "'";
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user==null)
				{
					log.info(requestId + "2");
					jsonObject.add("status", ERROR.BANK_STAFF_CREATE_FAIL);
					jsonObject.add("message", "Invalid User Provided for Update Operation");
					JsonObject jsonObj = jsonObject.build();
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
			}
			
			
			if(updateFlag==null || (updateFlag!=null && updateFlag.equals(Boolean.FALSE)))
			{
				log.info(requestId + "1");
				String hql = "Select tp from User tp where (tp.username) = '" + username + "' OR tp.email = '" + email + "'";
				User user1 = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user1!=null)
				{
					log.info(requestId + "2");
					jsonObject.add("status", ERROR.USER_EMAIL_USERNAME_EXISTS);
					jsonObject.add("message", "Username and email provided belongs to another user on the system");
					JsonObject jsonObj = jsonObject.build();
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
			}
			log.info(requestId + "3");
			
			Application app = Application.getInstance(swpService);
			
				
			
			
			if(roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()) || roleCode.equals(RoleType.NFRA_TOLL_STAFF.name()) 
					 || roleCode.equals(RoleType.BANK_STAFF.name()) || roleCode.equals(RoleType.PROBASE_STAFF.name())
					 || roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name()) || roleCode.equals(RoleType.NFRA_TOLL_STAFF_SUPERVISOR.name()))
			{
				log.info(requestId + "4");
				log.info(requestId + "-" + roleCode);
				user.setRoleCode(RoleType.valueOf(roleCode));
			}
			else
			{
				log.info(requestId + "5");
				jsonObject.add("status", ERROR.INVALID_USER_CREATION_PRIVILEDGES);
				jsonObject.add("message", "New user account can not be created. You do not have the priviledges to carry out this action");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "6");
			user.setWebActivationCode(webActivationCode);
			log.info(requestId + "7");
			user.setFailedLoginCount(0);
			log.info(requestId + "8");
			if(updateFlag==null || (updateFlag!=null && updateFlag.equals(Boolean.FALSE)))
			{
				log.info(requestId + "9");
				user.setUsername(username);
				log.info(requestId + "91");
				user.setEmail(email);
			}
			log.info(requestId + "10");
			user.setLockOut(Boolean.FALSE);
			log.info(requestId + "11");
			
			if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				user.setUpdated_at(new Date());
				log.info(requestId + "1-13");
			}
			else
			{
				String rnd="";
				boolean rndTrue = true;
				while(rndTrue==true)
				{
					rnd = RandomStringUtils.random(8).toUpperCase();
					String sql = "Select tp from User tp where tp.uniqueId = '" + rnd + "'";
					Collection<User> usrCheck = (Collection<User>)this.swpService.getAllRecordsByHQL(sql);
					if(usrCheck!=null && usrCheck.size()>0)
					{
						
					}
					else
					{
						rndTrue = false;
					}
				}
				user.setUniqueId(rnd);
				user.setCreated_at(new Date());
				log.info(requestId + "12");
				user.setUpdated_at(new Date());
				log.info(requestId + "13");
			}
			
			//user.setUserStatus(UserStatus.INACTIVE);
			user.setMobileNumber(mobileNumber);
			log.info(requestId + "14");
			user.setFirstName(firstName);
			log.info(requestId + "15");
			user.setLastName(lastName);
			log.info(requestId + "16");
			user.setOtherName(otherName);
			log.info(requestId + "17");
			user.setEmail(email);
			log.info(requestId + "18");
			user.setBranchCode(branchCode);
			log.info(requestId + "18");
			user.setBankCode(bankCode);
			log.info(requestId + "19");
			
			String password = RandomStringUtils.randomAlphanumeric(8);
			System.out.println(requestId + "Password => " + password);
			String encPassword = (String)UtilityHelper.encryptData(password, bankKey);
			user.setPassword(encPassword);
			user.setUserStatus(UserStatus.ACTIVE);

			if(activeUserRoleCode!=null && activeUserRoleCode.equals(RoleType.BANK_STAFF.name()) && roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name()))
			{

				log.info(requestId + "18100");
				user.setBranchCode("001");
				log.info(requestId + "181");
				user.setUserStatus(UserStatus.ACTIVE);
				user.setDistributor(distributor);
				log.info(requestId + "distributor ==> " + distributor==null ? "" : distributor.getId());
				user.setDistributorId(distributor.getId());
				user.setDistributorCompanyName(distributor.getCompanyName());
				
				if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
					this.swpService.updateRecord(user);
				else
					user = (User)this.swpService.createNewRecord(user);
				
				
				if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
				{
					log.info("update action");
				}
				else
				{
					log.info("create new action");
					JSONObject js = new JSONObject();
					JSONObject txnObjects = new JSONObject();
					int a =0;
					js.put("id", user.getId());
					js.put("roleCode", user.getRoleCode().ordinal());
					js.put("webActivationCode", user.getWebActivationCode());
					js.put("failedLoginCount", user.getFailedLoginCount());
					js.put("username", user.getUsername());
					js.put("lockout", user.getLockOut());
					js.put("createdAt", sdf1.format(user.getCreated_at()));
					js.put("updatedAt", sdf1.format(user.getUpdated_at()));
					js.put("mobileNumber", user.getMobileNumber());
					js.put("firstName", user.getFirstName());
					js.put("lastName", user.getLastName());
					js.put("otherName", user.getOtherName());
					js.put("email", user.getEmail());
					js.put("branchCode", user.getBranchCode());
					js.put("bankCode", user.getBankCode());
					js.put("password", user.getPassword());
					js.put("uniqueId", user.getUniqueId());
					js.put("userStatus", user.getUserStatus().ordinal());
					js.put("distributor", user.getDistributor()==null ? null : user.getDistributor().getId());
					js.put("distributorId", user.getDistributorId());
					js.put("distributorCompanyName", user.getDistributorCompanyName());
					txnObjects.put("" + a++, js);
					log.info("txnObjects---" + txnObjects.toString());
					syncUserToCloud(txnObjects);
				}
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_USER_CREATION, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, user.getId(), User.class.getName());
				
				String message = "Hello & Welcome. Your new NRFA Distributor Account password is - "+ password;
	            //UtilityHelper.sendSMS(this.swpService, message, user.getMobileNumber());
	            try{
					new Thread(new SmsSender(this.swpService, message, user.getMobileNumber())).start();
				}catch(Exception e)
				{
					e.printStackTrace();
				}
			}
			else
			{
				
				if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
				{
					this.swpService.updateRecord(user);
				}
				else
				{
					user = (User)this.swpService.createNewRecord(user);
					log.info("create new action");
					JSONObject js = new JSONObject();
					JSONObject txnObjects = new JSONObject();
					int a =0;
					js.put("id", user.getId());
					js.put("roleCode", user.getRoleCode().ordinal());
					js.put("webActivationCode", user.getWebActivationCode());
					js.put("failedLoginCount", user.getFailedLoginCount());
					js.put("username", user.getUsername());
					js.put("lockout", user.getLockOut());
					js.put("createdAt", sdf1.format(user.getCreated_at()));
					js.put("updatedAt", sdf1.format(user.getUpdated_at()));
					js.put("mobileNumber", user.getMobileNumber());
					js.put("firstName", user.getFirstName());
					js.put("lastName", user.getLastName());
					js.put("otherName", user.getOtherName());
					js.put("email", user.getEmail());
					js.put("branchCode", user.getBranchCode());
					js.put("bankCode", user.getBankCode());
					js.put("password", user.getPassword());
					js.put("uniqueId", user.getUniqueId());
					js.put("userStatus", user.getUserStatus().ordinal());
					js.put("distributor", user.getDistributor()==null ? null : user.getDistributor().getId());
					js.put("distributorId", user.getDistributorId());
					js.put("distributorCompanyName", user.getDistributorCompanyName());
					txnObjects.put("" + a++, js);
					log.info("txnObjects---" + txnObjects.toString());
					syncUserToCloud(txnObjects);
				}
				
				
				String message = "Welcome to NRFA? Your Password for your new NRFA account is " + password;
	            //UtilityHelper.sendSMS(this.swpService, message, user.getMobileNumber());
				try{
					new Thread(new SmsSender(this.swpService, message, mobileNumber)).start();
				}catch(Exception e)
				{
					e.printStackTrace();
				}
				
				String actorUsername = verifyJ.has("username") ? verifyJ.getString("username") : null;
				User userActor = null;
				if(actorUsername!=null)
					userActor = (User)this.swpService.getUniqueRecordByHQL("Select tp from User tp where tp.username = '"+actorUsername+"'");
	    		
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_USER_CREATION, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, user!=null ? user.getId() : null , User.class.getName());
			}
			
			JSONObject userDetails = new JSONObject();
			userDetails.put("username", username);
			userDetails.put("email", username);
			userDetails.put("role", RoleType.valueOf(user.getRoleCode().name()));
			userDetails.put("bankCode", user.getBankCode());
			userDetails.put("branchCode", user.getBranchCode());
			userDetails.put("priviledges", user.getPrivileges());
			userDetails.put("webActivationCode", webActivationCode);
			String userDetailsString = new Gson().toJson(userDetails); 
			
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("roleCode", roleCode);
			jsonObject.add("message", "New User Account Created Successfully");
			jsonObject.add("username", username);
			jsonObject.add("user", userDetailsString);
			
			
			
			log.info(requestId + "Create New User = " + jsonObject.toString());
			JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(requestId + e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	private boolean syncUserToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		/*try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("user", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}*/
		return true;
		
	}
    
	

	public Response assignTollUserToTollRoute(String token, String username,
			String tollRouteCode, String tollRouteLane, Boolean valid,
			String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try
		{
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
			JSONObject bankKeys = application.getAccessKeys();
			
			log.info(requestId + "username = " + username);
			log.info(requestId + "tollRouteCode = " + tollRouteCode);
			log.info(requestId + "tollRouteCode = " + tollRouteLane);
			
			Application app = Application.getInstance(swpService);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			log.info(requestId + "3");
			
			
			
			if(roleCode.equals(RoleType.NFRA_TOLL_STAFF_SUPERVISOR.name()) || roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()) )
			{
				log.info(requestId + "4");
			}
			else
			{
				log.info(requestId + "5");
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "You do not have the priviledges to carry out this action");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select tp from TrafficTollRouteLane tp where tp.routeCode = '" + tollRouteCode + "' AND tp.tollLane = " + tollRouteLane + 
					" AND tp.status = " + 1;
			TrafficTollRouteLane trafficTollRouteLane = (TrafficTollRouteLane)this.swpService.getUniqueRecordByHQL(hql);
			if(trafficTollRouteLane==null)
			{
				log.info(requestId + "6");
				jsonObject.add("status", ERROR.TOLL_ROUTE_LANE_NOT_EXISTS);
				jsonObject.add("message", "Toll Route data provided is invalid");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			User user = null;
			if(valid!=null && valid==Boolean.TRUE)
			{
				hql = "Select tp from User tp where tp.username = '" + username + "' AND tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " " +
						"AND tp.roleCode = " + RoleType.NFRA_TOLL_STAFF.ordinal() + " AND tp.assignedTrafficTollRouteCode = '" + tollRouteCode + "' " +
						"AND tp.assignedTrafficTollRouteStart = '" + trafficTollRouteLane.getStartRouteName() + "' " + 
						"AND tp.assignedTrafficTollRouteEnd = '" + trafficTollRouteLane.getEndRouteName() + "' " + 
						"AND tp.assignedTrafficTollRouteLane = '" + trafficTollRouteLane.getTollLane() + "'";
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user!=null)
				{
					user.setAssignedTrafficTollRouteCode(null);
					user.setAssignedTrafficTollRouteStart(null);
					user.setAssignedTrafficTollRouteEnd(null);
					user.setAssignedTrafficTollRouteLane(null);
					user.setUpdated_at(new Date());
					swpService.updateRecord(user);
					
					AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.ASSIGN_TOLL_USER_NO_ROUTE, requestId, this.swpService, 
							verifyJ.has("username") ? verifyJ.getString("username") : null, user!=null ? user.getId() : null , User.class.getName());
				}
			}
			else
			{
				hql = "Select tp from User tp where tp.username = '" + username + "' AND tp.userStatus = " + UserStatus.ACTIVE.ordinal() + 
						" AND tp.roleCode = " + RoleType.NFRA_TOLL_STAFF.ordinal();
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user!=null)
				{
					user.setAssignedTrafficTollRouteCode(tollRouteCode);
					user.setAssignedTrafficTollRouteStart(trafficTollRouteLane.getStartRouteName());
					user.setAssignedTrafficTollRouteEnd(trafficTollRouteLane.getEndRouteName());
					user.setAssignedTrafficTollRouteLane(trafficTollRouteLane.getTollLane());
					user.setUpdated_at(new Date());
					swpService.updateRecord(user);
					
					AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.ASSIGN_TOLL_USER_A_ROUTE, requestId, this.swpService, 
							verifyJ.has("username") ? verifyJ.getString("username") : null, user!=null ? user.getId() : null , User.class.getName());
				}
			}
			
			
			
			JSONObject js = new JSONObject();
			int a = 0;
			JSONObject txnObjects = new JSONObject();
			js.put("id", user.getId());
			js.put("assignedTrafficTollRouteCode", user.getAssignedTrafficTollRouteCode());
			js.put("assignedTrafficTollRouteStart", user.getAssignedTrafficTollRouteStart());
			js.put("assignedTrafficTollRouteEnd", user.getAssignedTrafficTollRouteEnd());
			js.put("assignedTrafficTollRouteLane", user.getAssignedTrafficTollRouteLane());
			js.put("updatedAt", sdf1.format(user.getUpdated_at()));
			txnObjects.put("" + a++, js);
			syncAssignTollUserToTollRouteToCloud(txnObjects);
			
			String actorUsername = verifyJ.has("username") ? verifyJ.getString("username") : null;
			User userActor = null;
			if(actorUsername!=null)
				userActor = (User)this.swpService.getUniqueRecordByHQL("Select tp from User tp where tp.username = '"+actorUsername+"'");
    		
			
			
			jsonObject.add("username", username);
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("message", "Toll Route Assigned Successfully");
			
			
			
			log.info(requestId + "toll assigned to User = " + jsonObject.toString());
			JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(requestId + e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	private boolean syncAssignTollUserToTollRouteToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		/*try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/NCE/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("assigntollusertotollrouteesync", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}*/
		return true;
		
	}

	public Response listUsers(String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try
		{
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
			JSONObject bankKeys = application.getAccessKeys();
			
			
			Application app = Application.getInstance(swpService);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			log.info(requestId + "3");
			
			
			
			if(!roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()) && roleCode.equals(RoleType.NFRA_TOLL_STAFF_SUPERVISOR.name()))
			{
				log.info(requestId + "5");
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "You do not have the priviledges to carry out this action");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select tp from User tp";
			Collection<User> userList = (Collection<User>)this.swpService.getAllRecordsByHQL(hql);
			if(userList!=null && userList.size()>0)
			{
				Iterator<User> iterator = userList.iterator();
				
				JSONArray userArrayList = new JSONArray();
				while(iterator.hasNext())
				{
					User usr = iterator.next();
					JSONObject userObjects = new JSONObject();
					if(usr.getUsername()!=null)
						userObjects.put("username", usr.getUsername());
					if(usr.getEmail()!=null)
						userObjects.put("email", usr.getEmail());
					if(usr.getUserStatus()!=null)
						userObjects.put("userStatus", usr.getUserStatus().name());
					if(usr.getMobileNumber()!=null)
						userObjects.put("mobileNumber", usr.getMobileNumber());
					if(usr.getBankCode()!=null)
						userObjects.put("bankCode", usr.getBankCode());
					if(usr.getFirstName()!=null)
						userObjects.put("firstName", usr.getFirstName());
					if(usr.getLastName()!=null)
						userObjects.put("lastName", usr.getLastName());
					if(usr.getOtherName()!=null)
						userObjects.put("otherName", usr.getOtherName());
					if(usr.getRoleCode()!=null)
						userObjects.put("roleCode", usr.getRoleCode().name());
					if(usr.getLockOut()!=null)
						userObjects.put("lockOut", usr.getLockOut()==null ? 0 : usr.getLockOut());
					if(usr.getFailedLoginCount()!=null)
						userObjects.put("failedLoginCount", usr.getFailedLoginCount()==null ? 0 : usr.getFailedLoginCount());
					if(usr.getCreated_at()!=null)
						userObjects.put("created_at", usr.getCreated_at().toString());
					if(usr.getLastLoginDate()!=null)
						userObjects.put("lastLoginDate", usr.getLastLoginDate().toString());
					if(usr.getDistributor()!=null)
						userObjects.put("distributor", usr.getDistributor().getCompanyName());
					if(usr.getAssignedTrafficTollRouteStart()!=null)
						userObjects.put("assignedTrafficTollRouteStart", usr.getAssignedTrafficTollRouteStart());
					if(usr.getAssignedTrafficTollRouteEnd()!=null)
						userObjects.put("assignedTrafficTollRouteEnd", usr.getAssignedTrafficTollRouteEnd());
					if(usr.getAssignedTrafficTollRouteCode()!=null)
						userObjects.put("assignedTrafficTollRouteCode", usr.getAssignedTrafficTollRouteCode());
					if(usr.getAssignedTrafficTollRouteLane()!=null)
						userObjects.put("assignedTrafficTollRouteLane", usr.getAssignedTrafficTollRouteLane());
					userArrayList.put(userObjects);
				}

				
				jsonObject.add("userList", userArrayList.toString());
				jsonObject.add("status", ERROR.GENERAL_OK);
				jsonObject.add("message", "User List");
				
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("status", ERROR.EMPTY_USER_LIST);
				jsonObject.add("message", "No users currently available");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(requestId + e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response updateUserStatus( String token, String username, String userStatus, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try
		{
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
			JSONObject bankKeys = application.getAccessKeys();
			
			
			Application app = Application.getInstance(swpService);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			log.info(requestId + "3");
			
			try
			{
				UserStatus us = UserStatus.valueOf(userStatus);
				if(us==null)
				{
					JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
					jsonObjectResponse.add("status", ERROR.INVALID_USER_STATUS);
					jsonObjectResponse.add("message", "User status invalid");
					JsonObject jsonObj = jsonObjectResponse.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
				}
			}
			catch(Exception e)
			{
				JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
				jsonObjectResponse.add("status", ERROR.INVALID_USER_STATUS);
				jsonObjectResponse.add("message", "User status invalid");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
			
			if(!roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()) && !roleCode.equals(RoleType.NFRA_TOLL_STAFF_SUPERVISOR.name()))
			{
				log.info(requestId + "5");
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "You do not have the priviledges to carry out this action");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select tp from User tp where tp.deleted_at IS NULL AND tp.username = '" + username + "'";
			User usr = (User)this.swpService.getUniqueRecordByHQL(hql);
			if(usr!=null)
			{
				usr.setUserStatus(UserStatus.valueOf(userStatus));
				this.swpService.updateRecord(usr);
				
				jsonObject.add("status", ERROR.GENERAL_OK);
				jsonObject.add("message", "User updated successfully");
				
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("status", ERROR.EMPTY_USER_LIST);
				jsonObject.add("message", "No user found matching username provided");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(requestId + e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

}