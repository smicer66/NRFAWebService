package com.probase.nrfa.authenticator;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.security.auth.login.LoginException;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.probase.nrfa.enumerations.CardStatus;
import com.probase.nrfa.enumerations.CardType;
import com.probase.nrfa.enumerations.DeviceStatus;
import com.probase.nrfa.enumerations.DeviceType;
import com.probase.nrfa.enumerations.DistributorStatus;
import com.probase.nrfa.enumerations.MerchantStatus;
import com.probase.nrfa.enumerations.MobileAccountStatus;
import com.probase.nrfa.enumerations.RequestType;
import com.probase.nrfa.enumerations.RoleType;
import com.probase.nrfa.enumerations.TransactionStatus;
import com.probase.nrfa.enumerations.UserStatus;
import com.probase.nrfa.models.Acquirer;
import com.probase.nrfa.models.AuditTrail;
import com.probase.nrfa.models.Bank;
import com.probase.nrfa.models.CardScheme;
import com.probase.nrfa.models.Device;
import com.probase.nrfa.models.Distributor;
import com.probase.nrfa.models.ECard;
import com.probase.nrfa.models.Merchant;
import com.probase.nrfa.models.RequestTransactionReversal;
import com.probase.nrfa.models.Transaction;
import com.probase.nrfa.models.User;
import com.probase.nrfa.util.Application;
import com.probase.nrfa.util.ERROR;
import com.probase.nrfa.util.PrbCustomService;
import com.probase.nrfa.util.ServiceLocator;
import com.probase.nrfa.util.SwpService;
import com.probase.nrfa.util.UtilityHelper;
import com.sun.org.apache.bcel.internal.generic.NEW;

public final class TerminalFunction {

    private static TerminalFunction authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(TerminalFunction.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;
	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private TerminalFunction() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static TerminalFunction getInstance() {
        if ( authenticator == null ) {
            authenticator = new TerminalFunction();
        }

        return authenticator;
    }
    
    
	public Response createNewTerminal(Integer terminalCount,
			String merchantCode, String deviceType, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			
			if(terminalCount==null || terminalCount<1 || deviceType==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			if(deviceType.equals(DeviceType.WEB.name()) && merchantCode==null)
			{
				jsonObject.add("status", ERROR.WEB_TERMINAL_NEEDS_MERCHANT_CODE);
				jsonObject.add("message", "Web Terminals Require A Merchant Code");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			if(terminalCount>20)
			{
				jsonObject.add("status", ERROR.TERMINAL_COUNT_EXCEEDED);
				jsonObject.add("message", "Terminal count must not exceed 20");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			Merchant merchant = null;
			if(merchantCode!=null)
			{
				merchant = (Merchant)this.swpService.getUniqueRecordByHQL("Select tp from Merchant tp where tp.merchantCode = '"+merchantCode+"' AND tp.status = " + MerchantStatus.ACTIVE.ordinal());
				if(merchant==null)
				{
					jsonObject.add("status", ERROR.MERCHANT_EXIST_FAIL);
					jsonObject.add("message", "Merchant matching merchant Code not found. Merchant must match merchant code and be an Active Merchant");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
			}
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
				
			
			JSONArray jsonArray = new JSONArray();
			JSONObject txnObjects = new JSONObject();
			int a = 0;
			String serialNo = "";
			for(int i=0; i<terminalCount; i++)
			{
				Device device = new Device();
				device.setCreated_at(new Date());
				device.setUpdated_at(new Date());
				device.setDeviceCode(RandomStringUtils.random(5, false, true).toUpperCase());
				device.setDeviceType(DeviceType.valueOf(deviceType));
				device.setDistributor(null);
				device.setDistributorCode(null);
				device.setDistributorId(null);
				device.setDistributorName(null);
				device.setLastTransactions(null);
				device.setStatus(DeviceStatus.INACTIVE);

				if(deviceType.equals(DeviceType.WEB.name()))
				{
					device.setMerchant(merchant);
					device.setMerchantCode(merchantCode);
					device.setMerchantId(merchant.getId());
					device.setMerchantName(merchant.getMerchantName());
					device.setTerminalApiKey(RandomStringUtils.random(32, true, true));
					device.setStatus(DeviceStatus.ACTIVE);
				}
				
				
				device.setSetupByUser(user);
				device.setSetupByUserName(user!=null ? (user.getFirstName() + " " + user.getLastName()) : null);

				device = (Device)this.swpService.createNewRecord(device);
				
				JSONObject jsonObj = new JSONObject();
				jsonObj.put("id", device.getId());
				jsonObj.put("createdAt", sdf1.format(device.getCreated_at()));
				jsonObj.put("updatedAt", sdf1.format(device.getUpdated_at()));
				jsonObj.put("deviceCode", device.getDeviceCode());
				jsonObj.put("deviceType", device.getDeviceType().ordinal());
				jsonObj.put("distributor", device.getDistributor()==null ? device.getDistributor() : device.getDistributor().getId());
				jsonObj.put("distributorCode", device.getDistributorCode());
				jsonObj.put("distributorId", device.getDistributorId());
				jsonObj.put("distributorName", device.getDistributorName());
				jsonObj.put("lastTransactions", device.getLastTransactions());
				jsonObj.put("status", device.getStatus());
				jsonObj.put("merchant", device.getMerchant()==null ? device.getMerchant() : device.getMerchant().getId());
				jsonObj.put("merchantCode", device.getMerchantCode());
				jsonObj.put("merchantId", device.getMerchantId());
				jsonObj.put("merchantName", device.getMerchantName());
				jsonObj.put("terminalApiKey", device.getTerminalApiKey());
				jsonObj.put("status", device.getStatus().ordinal());
				jsonObj.put("setupByUser", device.getSetupByUser()==null ? device.getSetupByUser() : device.getSetupByUser().getId());
				jsonObj.put("setupByUserName", device.getSetupByUserName());
				txnObjects.put("" + a++, jsonObj);
				
				
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_DEVICE_CREATION, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, device.getId(), Device.class.getName());
				
				
				JSONObject json = new JSONObject();
				json.put("terminalId", device.getDeviceCode());
				if(device.getMerchantCode()!=null)
					json.put("merchantCode", device.getMerchantCode());
				if(device.getMerchantName()!=null)
					json.put("merchantName", device.getMerchantName());
				if(deviceType.equals(DeviceType.WEB.name()))
					json.put("apiKey", device.getTerminalApiKey());
				
				jsonArray.put(json);
			}
			
			
			syncDeviceToCloud(txnObjects);
			
			
			jsonObject.add("message", "Device(s) generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("terminalList", jsonArray.toString());
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	private boolean syncDeviceToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("device", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}

	
	
	
	private boolean syncDeviceSyncToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("devicesync", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}

	public Response listTerminals(String merchantCode, Integer startIndex,
			Integer limit, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(startIndex==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			if(limit==null || (limit!=null && limit>50))
				limit = 50;
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()))
			{
				merchantCode = userBankCode;
			}
			
			String hql = "Select tp from Device tp";
			String sql = "";
			if(merchantCode!=null)
				sql = sql + (sql!="" ? " AND " : " WHERE ") + "tp.merchantCode = '" + merchantCode + "' ";
			hql = hql + sql;
			Collection<Device> devices= (Collection<Device>)this.swpService.getAllRecordsByHQL(hql, startIndex, limit);
			Iterator<Device> deviceIterator = devices.iterator();
			
			String hql1 = "Select count(tp.id) as idCount " + hql.substring(10);
			System.out.println("4.hql ==" + hql1);
			List<Long> totalDeviceCount = (List<Long>)swpService.getAllRecordsByHQL(hql1);
			Long totalDevices = totalDeviceCount!=null ? totalDeviceCount.iterator().next() : 0;
			System.out.println("totalDeviceCount ==" + totalDevices);
			
			JSONArray jsonArray = new JSONArray();
			while(deviceIterator.hasNext())
			{
				Device device = deviceIterator.next();
				JSONObject json = new JSONObject();
				json.put("terminalId", device.getDeviceCode());
				json.put("serialNo", device.getDeviceSerialNo());
				if(device.getMerchantCode()!=null)
					json.put("merchantCode", device.getMerchantCode());
				if(device.getMerchantName()!=null)
					json.put("merchantName", device.getMerchantName());
				
				jsonArray.put(json);
			}
			jsonObject.add("message", "Terminals listed successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("terminalList", jsonArray.toString());
			jsonObject.add("totalDeviceCount", totalDevices);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response getTerminal(String terminalSerialId, String terminalId,
			String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(terminalSerialId==null || terminalId==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()))
			{
				terminalId = userBankCode;
			}
			
			String hql = "Select tp from Device tp WHERE tp.deviceCode = '" + terminalId + "' AND tp.deviceSerialNo = '" + terminalSerialId + "'";
			Device device= (Device)this.swpService.getUniqueRecordByHQL(hql);
			JSONObject json = new JSONObject();
			json.put("terminalId", device.getDeviceCode());
			json.put("serialNo", device.getDeviceSerialNo());
			if(device.getMerchantCode()!=null)
				json.put("merchantCode", device.getMerchantCode());
			if(device.getMerchantName()!=null)
				json.put("merchantName", device.getMerchantName());
			
			
			jsonObject.add("message", "Device generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("terminal", json.toString());
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response getTerminalStatusList() {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			DeviceStatus[] terminalStatusList = DeviceStatus.values();
			JSONObject terminalObj = new JSONObject();
			
			for(int i=0; i<terminalStatusList.length; i++)
			{
				terminalObj.put(i+"", terminalStatusList[i].name());
			}
			
			jsonObject.add("message", "Terminal Status Listed");
			jsonObject.add("terminalStatusList", terminalObj.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	public Response getDeviceTypeList() {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			DeviceType[] terminalTypeList = DeviceType.values();
			JSONObject deviceTypeObj = new JSONObject();
			
			for(int i=0; i<terminalTypeList.length; i++)
			{
				deviceTypeObj.put(i+"", terminalTypeList[i].name());
			}
			
			jsonObject.add("message", "Device Types Listed");
			jsonObject.add("deviceTypesList", deviceTypeObj.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response syncSetUpData(String terminalSerialId, String deviceType, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(terminalSerialId==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String userDistributorCode = null;
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			if(verifyJ.has("distributorCode"))
				userDistributorCode = verifyJ.getString("distributorCode");
			
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			String merchantCode = null;
			Merchant merchant =null;
			Distributor distributor =null;
			String distributorCode = null;
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()))
			{
				merchantCode = userBankCode;
				String hql = "Select tp from Merchant tp WHERE tp.merchantCode = '"+merchantCode+"' AND tp.status = " + MerchantStatus.ACTIVE.ordinal() + "";
				merchant= (Merchant)this.swpService.getUniqueRecordByHQL(hql);
			}
			else if(roleCode!=null && roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name()))
			{
				distributorCode = userDistributorCode;
				String hql = "Select tp from Distributor tp WHERE tp.distributorCode = '"+distributorCode+"' AND tp.distributorStatus = " + DistributorStatus.ACTIVE.ordinal() + "";
				distributor= (Distributor)this.swpService.getUniqueRecordByHQL(hql);
			}
			else if(roleCode!=null && roleCode.equals(RoleType.NFRA_TOLL_STAFF.name()))
			{
				log.info("role code ----" + roleCode);
			}
			else
			{
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "Your priviledges are not sufficient to carry out this action. Please log out now!");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.FORBIDDEN ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from Device tp WHERE tp.deviceSerialNo = '"+terminalSerialId+"' AND tp.deviceType = " + DeviceType.valueOf(deviceType).ordinal();
			log.info("hql ----" + hql);

			Device device= (Device)this.swpService.getUniqueRecordByHQL(hql);
			if(device!=null)
			{
				log.info("device ----" + new Gson().toJson(device));
				jsonObject.add("status", ERROR.DEVICE_ALREADY_SYNCED);
				jsonObject.add("message", "Your device has already been synced. If you believe your key has already been compromised, kindly return your POS to NRFA to request a new POS device!");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.FORBIDDEN ).entity( jsonObj.toString() ).build();
			}
			
			if(DeviceType.valueOf(deviceType).equals(DeviceType.WEB))
			{
				hql = "Select distinct tp from Device tp WHERE tp.deviceSerialNo IS NULL AND tp.status = " + DeviceStatus.ACTIVE.ordinal()
					+ " AND tp.merchantCode ='"+merchantCode+"' AND tp.deviceType = " + DeviceType.valueOf(deviceType).ordinal() + " ORDER BY tp.updated_at DESC";
				log.info("hql ----" + hql);
			}
			else
			{
				hql = "Select distinct tp from Device tp WHERE tp.deviceSerialNo IS NULL AND tp.status = " + DeviceStatus.INACTIVE.ordinal()
					+ " AND tp.merchantCode IS NULL AND tp.deviceType = " + DeviceType.valueOf(deviceType).ordinal() + " ORDER BY tp.updated_at DESC";
				log.info("hql ----" + hql);
			}
			Collection<Device> deviceList= (Collection<Device>)this.swpService.getAllRecordsByHQL(hql, 0, 1);
			log.info("deviceList size ----" + deviceList.size());
			if(deviceList.size()>0)
			{
				device = deviceList.iterator().next();
				String apiKey = RandomStringUtils.random(32, true, true);
				device.setDeviceSerialNo(terminalSerialId);
				device.setTerminalApiKey(apiKey);
				device.setMerchant(merchant);
				device.setMerchantCode(merchant!=null ? merchant.getMerchantCode() : null);
				device.setMerchantId(merchant!=null ? merchant.getId() : null);
				device.setMerchantName(merchant!=null ? merchant.getMerchantName() : null);

				if(roleCode!=null && roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name()))
				{
					device.setDistributorCode(distributorCode);
					device.setDistributorId(distributor.getId());
					device.setDistributor(distributor);
					device.setDistributorName(distributor.getCompanyName());
				}
				device.setStatus(DeviceStatus.ACTIVE);
				device.setUpdated_at(new Date());
				this.swpService.updateRecord(device);
				
				JSONObject js = new JSONObject();
				int a = 0;
				JSONObject txnObjects = new JSONObject();
				js.put("id", device.getId());
				js.put("deviceSerialNo", terminalSerialId);
				js.put("terminalApiKey", apiKey);
				js.put("merchant", merchant!=null ? merchant.getId() : null);
				js.put("updatedAt", sdf1.format(device.getUpdated_at()));
				js.put("merchantCode", merchant!=null ? merchant.getMerchantCode() : null);
				js.put("merchantId", merchant!=null ? merchant.getId() : null);
				js.put("merchantName", merchant!=null ? merchant.getMerchantName() : null);

				if(roleCode!=null && roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name()))
				{
					js.put("distributorCode", distributorCode);
					js.put("distributorId", distributor.getId());
					js.put("distributor", distributor);
					js.put("distributorName", distributor.getCompanyName());
				}
				js.put("status", device.getStatus().ordinal());
				txnObjects.put("" + a++, js);
				
				log.info("txnObjects ----" + txnObjects.toString());
				syncDeviceSyncToCloud(txnObjects);
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.SYNC_TO_DEVICE, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, device.getId(), Device.class.getName());
				
				JSONObject json = new JSONObject();
				json.put("terminalId", device.getDeviceCode());
				json.put("serialNo", terminalSerialId);
				json.put("terminalApiKey", apiKey);
				if(device.getMerchantCode()!=null)
					json.put("merchantCode", device.getMerchantCode());
				if(device.getMerchantName()!=null)
					json.put("merchantName", device.getMerchantName());
				
				
				jsonObject.add("message", "Save Your API Key!");
				jsonObject.add("status", ERROR.GENERAL_OK);
				jsonObject.add("terminal", json.toString());
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("status", ERROR.TERMINAL_IDS_NOT_AVAILABLE);
				jsonObject.add("message", "You can not synchronize your terminal at this moment. Please try again later.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.FORBIDDEN ).entity( jsonObj.toString() ).build();
			}
			
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	




}