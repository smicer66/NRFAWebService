package com.probase.nrfa.authenticator;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.security.auth.login.LoginException;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.probase.nrfa.enumerations.AccountStatus;
import com.probase.nrfa.enumerations.AccountType;
import com.probase.nrfa.enumerations.CardStatus;
import com.probase.nrfa.enumerations.CardType;
import com.probase.nrfa.enumerations.Channel;
import com.probase.nrfa.enumerations.CustomerStatus;
import com.probase.nrfa.enumerations.CustomerType;
import com.probase.nrfa.enumerations.DeviceStatus;
import com.probase.nrfa.enumerations.DeviceType;
import com.probase.nrfa.enumerations.DistributorStatus;
import com.probase.nrfa.enumerations.DistributorType;
import com.probase.nrfa.enumerations.FundingAccountType;
import com.probase.nrfa.enumerations.MerchantStatus;
import com.probase.nrfa.enumerations.MobileAccountStatus;
import com.probase.nrfa.enumerations.NFRACurrency;
import com.probase.nrfa.enumerations.PaymentMeans;
import com.probase.nrfa.enumerations.RequestType;
import com.probase.nrfa.enumerations.RoleType;
import com.probase.nrfa.enumerations.ServiceType;
import com.probase.nrfa.enumerations.TransactionStatus;
import com.probase.nrfa.enumerations.UserStatus;
import com.probase.nrfa.models.Account;
import com.probase.nrfa.models.Acquirer;
import com.probase.nrfa.models.AuditTrail;
import com.probase.nrfa.models.Bank;
import com.probase.nrfa.models.CardScheme;
import com.probase.nrfa.models.Customer;
import com.probase.nrfa.models.Device;
import com.probase.nrfa.models.Distributor;
import com.probase.nrfa.models.ECard;
import com.probase.nrfa.models.Merchant;
import com.probase.nrfa.models.MerchantScheme;
import com.probase.nrfa.models.Promotion;
import com.probase.nrfa.models.RequestTransactionReversal;
import com.probase.nrfa.models.Synchronizer;
import com.probase.nrfa.models.TrafficException;
import com.probase.nrfa.models.TrafficScheme;
import com.probase.nrfa.models.TrafficTollPrice;
import com.probase.nrfa.models.TrafficTollRoute;
import com.probase.nrfa.models.TrafficTollRouteLane;
import com.probase.nrfa.models.Transaction;
import com.probase.nrfa.models.User;
import com.probase.nrfa.util.Application;
import com.probase.nrfa.util.ERROR;
import com.probase.nrfa.util.PrbCustomService;
import com.probase.nrfa.util.ServiceLocator;
import com.probase.nrfa.util.SwpService;
import com.probase.nrfa.util.UtilityHelper;
import com.sun.org.apache.bcel.internal.generic.NEW;

public final class UtilityFunction {

    private static UtilityFunction authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(UtilityFunction.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;
	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private UtilityFunction() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static UtilityFunction getInstance() {
        if ( authenticator == null ) {
            authenticator = new UtilityFunction();
        }

        return authenticator;
    }

    
    
    public Response createNewBank(String bankName, String fqdn, String bankCode, String token, String requestId, String ipAddress)
	{
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			log.info("1---verifyJ ==" + verifyJ.length() + " && v= " + verifyJ.toString());
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				log.info("2---verifyJ ==" + verifyJ.toString());
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			log.info("------>>>>" + RoleType.NFRA_ADMIN_STAFF.name());

			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from Bank tp where lower(tp.bankName) = '" + bankName + "' OR tp.bankCode = '"+bankCode+"'";
			log.info("hql ==" + hql);
			Bank bank = (Bank)swpService.getUniqueRecordByHQL(hql);
			
			if(bank!=null)
			{
				//bank already exists
				jsonObject.add("message", "Bank Creation Failed. Bank Matching Bank Name And Code Already Exists");
				jsonObject.add("status", ERROR.BANK_CREATE_FAIL);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			bank = new Bank();
			bank.setAccess_exodus(null);
			bank.setBankCode(bankCode);
			bank.setBankName(bankName);
			bank.setCreated_at(new Date());
			bank.setOnlineBankingURL(fqdn);
			bank.setUpdated_at(new Date());
			bank = (Bank)this.swpService.createNewRecord(bank);
			
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", bank.getId());
			js.put("accessExodus", bank.getAccess_exodus());
			js.put("bankCode", bank.getBankCode());
			js.put("bankName", bank.getBankName());
			js.put("createdAt", sdf1.format(bank.getCreated_at()));
			js.put("onlineBankingUrl", bank.getOnlineBankingURL());
			js.put("updatedAt", sdf1.format(bank.getUpdated_at()));
			
			txnObjects.put("" + a++, js);
			syncBankToCloud(txnObjects);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_BANK_CREATION, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, bank.getId(), Bank.class.getName());
			
			if(bank!=null)
			{
				JSONObject jsObjectCard = new JSONObject();
				jsObjectCard.put("bankCode", bankCode);
				jsObjectCard.put("bankName", bankName);
				jsObjectCard.put("fqdn", fqdn);	
				
				jsonObject.add("message", "New Bank Created successfully");
				jsonObject.add("bank", jsObjectCard.toString());
				jsonObject.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("message", "Bank Creation Failed");
				jsonObject.add("status", ERROR.BANK_CREATE_FAIL);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.EXPECTATION_FAILED ).entity( jsonObj.toString() ).build();
			}
			
			
			
		}catch(Exception e)
		{
			log.info("Error = " + e.getMessage());
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}

    
    public Response getBanks() {
		// TODO Auto-generated method stub
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			String hql = "Select tp from Bank tp";
			log.info("3.hql ==" + hql);
			Collection<Bank> banks = (Collection<Bank>)swpService.getAllRecordsByHQL(hql);
			
			Iterator<Bank> iterator = banks.iterator();
			
			JSONArray bankList = new JSONArray();
			while(iterator.hasNext())
			{
				Bank bank = iterator.next();
				
				JSONObject jsObjectCard = new JSONObject();
				jsObjectCard.put("bankCode", bank.getBankCode());
				jsObjectCard.put("bankName", bank.getBankName());
				jsObjectCard.put("fqdn", bank.getOnlineBankingURL());	
				bankList.put(jsObjectCard);
			}
			
			jsonObject.add("message", "Bank Listing");
			jsonObject.add("bankList", bankList.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

    
    

    public Response updateCard(String cardDetails, String token)
	{
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()) && !roleCode.equals(RoleType.BANK_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Update Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			
			
			
			JSONArray requestCardList = new JSONArray(cardDetails);
			JSONArray responseCardList = new JSONArray();
			for(int i=0; i<requestCardList.length(); i++)
			{
				JSONObject entry = requestCardList.getJSONObject(i);
				if(entry.has("cardPan") && entry.has("cardUniqueId"))
				{
					String cardPan = entry.getString("cardPan");
					String cardUniqueId = entry.getString("cardUniqueId");
					String hql = "Select tp from ECard tp where tp.uniqueId = '" + cardUniqueId + "' AND tp.pan = '" + cardPan + "'" ;
					ECard ecard = (ECard)swpService.getUniqueRecordByHQL(hql);
					if(ecard!=null)
					{
						
						if(entry.has("cardScheme") && roleCode==RoleType.NFRA_ADMIN_STAFF.name())
						{
							String cardScheme = entry.getString("cardScheme");
							hql = "Select tp from CardScheme tp where tp.schemeCode = " + cardScheme;
							log.info("3.hql ==" + hql);
							CardScheme scheme = (CardScheme)swpService.getUniqueRecordByHQL(hql);
							ecard.setCardScheme(scheme);
						}
						if(entry.has("cardMobileNumber"))
						{
							String cardMobileNumber = entry.getString("cardMobileNumber");
							ecard.setCustomerMobileNumber(cardMobileNumber);
						}
						if(entry.has("cardStatus") && roleCode==RoleType.NFRA_ADMIN_STAFF.name())
						{
							String cardStatus = entry.getString("cardStatus");
							CardStatus cs = CardStatus.valueOf(cardStatus);
							if(cs.equals(CardStatus.ACTIVATED_LEVEL_1) && roleCode==RoleType.NFRA_ADMIN_STAFF.name())
								ecard.setCardStatus(cs);
							else if(cs.equals(CardStatus.ACTIVATED_LEVEL_2) && (roleCode==RoleType.BANK_STAFF.name() || roleCode==RoleType.NFRA_ADMIN_STAFF.name()))
								ecard.setCardStatus(cs);
							else if(cs.equals(CardStatus.ACTIVATED_LEVEL_3) && (roleCode==RoleType.BANK_STAFF.name()))
								ecard.setCardStatus(cs);
							else if(cs.equals(CardStatus.DELETED) && (roleCode==RoleType.NFRA_ADMIN_STAFF.name()))
								ecard.setCardStatus(cs);
							else if(cs.equals(CardStatus.DISABLED) && (roleCode==RoleType.BANK_STAFF.name() || roleCode==RoleType.NFRA_ADMIN_STAFF.name()))
								ecard.setCardStatus(cs);
							
						}
						

						JSONObject jsObjectCard = new JSONObject();
						jsObjectCard.put("cardPan", ecard.getPan().substring(0,  4) + "*****" + ecard.getPan().substring(ecard.getPan().length()-4));
						jsObjectCard.put("cardUniqueId", cardUniqueId);
						jsObjectCard.put("cardStatus", ecard.getCardStatus().name());
						jsObjectCard.put("cardType", ecard.getCardType().name());
						jsObjectCard.put("cardScheme", ecard.getCardScheme().getSchemeName());
						responseCardList.put(jsObjectCard);
						ecard.setUpdated_at(new Date());
						swpService.updateRecord(ecard);
					}
				}
				
			}
			
			jsonObject.add("message", "Cards updated successfully");
			jsonObject.add("cardList", responseCardList.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
    
    
    
    
    public Response getCardList( String merchantCode, Integer startIndex, Integer limit, String token )
    {
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			if(merchantCode==null || startIndex==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			
			
			String hql = "Select distinct tp from ECard tp where tp.merchantCode = '" + merchantCode + "' ORDER BY tp.transactionDate DESC LIMIT " + startIndex + "," + limit ;
			log.info("3.hql ==" + hql);
			Collection<ECard> ecards = (Collection<ECard>)swpService.getAllRecordsByHQL(hql);
			
			Iterator<ECard> iterator = ecards.iterator();
			
			JSONArray ecardList = new JSONArray();
			while(iterator.hasNext())
			{
				ECard ecard = iterator.next();
				
				JSONObject jsObjectCard = new JSONObject();
				jsObjectCard.put("cardPan", ecard.getPan().substring(0,  4) + "*****" + ecard.getPan().substring(ecard.getPan().length()-4));
				jsObjectCard.put("expiryDate", new SimpleDateFormat("yyyy-mm-dd").format(ecard.getExpiryDate()));
				jsObjectCard.put("cardUniqueId", ecard.getUniqueId());
				jsObjectCard.put("currentEValue", ecard.getCurrentBalance());
				jsObjectCard.put("currentDebt", ecard.getCurrentDebt());
				jsObjectCard.put("totalAmountSpent", ecard.getTotalDebited());
				jsObjectCard.put("totalAmountCredited", ecard.getTotalCredited());
				ecardList.put(jsObjectCard);
				
				
			}
			
			jsonObject.add("message", "Card Listing from Index " + startIndex + " to Index " + (startIndex+limit));
			jsonObject.add("cardList", ecardList.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
    }

	
    
    
    
    public Response addNewCardScheme(String schemeName, String schemeDetails,
			Double extraCharges, Boolean updateFlag, String schemeCode,
			Double transactionFee, String token) {
		// TODO Auto-generated method stub
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(updateFlag==null || schemeName==null || transactionFee==null || extraCharges==null || (updateFlag!=null && updateFlag.equals(Boolean.TRUE) && schemeCode==null))
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			CardScheme cardScheme = new CardScheme();
			if(updateFlag!=null && updateFlag.equals(Boolean.FALSE))
			{
				//Creation of card Scheme
				String hql = "Select tp from CardScheme tp where lower(tp.schemeName) = '" + schemeName.toLowerCase() + "'";
				cardScheme = (CardScheme)this.swpService.getUniqueRecordByHQL(hql);
				if(cardScheme!=null)
				{
					jsonObject.add("status", ERROR.CARD_SCHEME_ALREADY_EXISTS);
					jsonObject.add("message", "Card Scheme Creation Failed. Card Scheme Already Exists");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
				}
			}
			else if(updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				String hql = "Select tp from CardScheme tp where lower(tp.schemeCode) = '" + schemeCode.toLowerCase() + "'";
				cardScheme = (CardScheme)this.swpService.getUniqueRecordByHQL(hql);
				if(cardScheme==null)
				{
					jsonObject.add("status", ERROR.CARD_SCHEME_NOT_EXISTING);
					jsonObject.add("message", "Card Scheme Update Failed. Card Scheme Could Not Be Found");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
				}
			}
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			cardScheme.setOverrideFixedFee(extraCharges);
			cardScheme.setOverrideTransactionFee(transactionFee);
			cardScheme.setSchemeName(schemeName);
			cardScheme.setUpdated_at(new Date());
			cardScheme.setSchemeDetail(schemeDetails);
			
			if(updateFlag!=null && updateFlag.equals(Boolean.FALSE))
			{
				cardScheme.setCreated_at(new Date());
				cardScheme.setDeleted_at(null);
				schemeCode = RandomStringUtils.random(3).toUpperCase();
				cardScheme.setSchemeCode(schemeCode);
				cardScheme = (CardScheme)this.swpService.createNewRecord(cardScheme);
				jsonObject.add("message", "Card Scheme generated successfully");
			}
			else if(updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				this.swpService.updateRecord(cardScheme);
				jsonObject.add("message", "Card Scheme updated successfully");
			}
			
			
			
			JSONObject cardSchemeObj = new JSONObject();
			cardSchemeObj.put("schemeName", schemeName);
			cardSchemeObj.put("schemeDetail", schemeDetails);
			cardSchemeObj.put("extraCharges", extraCharges);
			cardSchemeObj.put("updateFlag", updateFlag);
			cardSchemeObj.put("schemeCode", schemeCode);
			cardSchemeObj.put("transactionFee", transactionFee);
			cardSchemeObj.put("status", cardScheme.getCardSchemeStatus().equals(Boolean.TRUE) ? "Active" : "Inactive");
			
			
			jsonObject.add("scheme", cardSchemeObj.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response getCardSchemes() {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			String hql = "Select tp from CardScheme tp";
			Collection<CardScheme> cardSchemes = (Collection<CardScheme>)this.swpService.getAllRecordsByHQL(hql);
			if(cardSchemes==null)
			{
				jsonObject.add("status", ERROR.NO_CARD_SCHEMES);
				jsonObject.add("message", "No Card Schemes Available");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.EXPECTATION_FAILED ).entity( jsonObj.toString() ).build();
			}
			
			Iterator<CardScheme> iterator = cardSchemes.iterator();
			JSONArray schemeArray = new JSONArray();
			while(iterator.hasNext())
			{
				CardScheme cardScheme = iterator.next();
				JSONObject cardSchemeObj = new JSONObject();
				cardSchemeObj.put("schemeName", cardScheme.getSchemeName());
				cardSchemeObj.put("schemeDetail", cardScheme.getSchemeDetail());
				cardSchemeObj.put("extraCharges", cardScheme.getOverrideFixedFee());
				cardSchemeObj.put("schemeCode", cardScheme.getSchemeCode());
				cardSchemeObj.put("transactionFee", cardScheme.getOverrideTransactionFee());
				cardSchemeObj.put("status", cardScheme.getCardSchemeStatus().equals(Boolean.TRUE) ? "Active" : "Inactive");
				schemeArray.put(cardSchemeObj);
			}
			
			jsonObject.add("message", "Card Schemes Listed");
			jsonObject.add("cardSchmesList", schemeArray.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response createPromotion
		(String promotionName, String description, String cardSchemeCode, String startDate, String endDate, 
				Integer baseRationaleCount, Double discountPercentageApplicable, String trafficSchemeCode,
			String routeCode, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			Promotion promotion = new Promotion();
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from CardScheme tp where tp.schemeCode = '" + cardSchemeCode + "'";
			CardScheme cs = (CardScheme)this.swpService.getUniqueRecordByHQL(hql);
			
			hql = "Select tp from TrafficTollRoute tp where tp.routeCode = '" + routeCode + "'";
			TrafficTollRoute ttr = (TrafficTollRoute)this.swpService.getUniqueRecordByHQL(hql);

			hql = "Select tp from TrafficScheme tp where tp.schemeCode = '" + trafficSchemeCode + "'";
			TrafficScheme ts = (TrafficScheme)this.swpService.getUniqueRecordByHQL(hql);
			
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			
			promotion.setPromotionName(promotionName);
			promotion.setBaseRationaleCount(baseRationaleCount);
			promotion.setCardScheme(cs);
			promotion.setCreated_at(new Date());
			promotion.setUpdated_at(new Date());
			promotion.setDescription(description);
			promotion.setDiscountPercentageApplicable(discountPercentageApplicable);
			promotion.setEndDate(sdf.parse(endDate));
			promotion.setEndRoute(ttr.getEndRouteName());
			promotion.setPromotionCode(RandomStringUtils.random(8, true, true));
			promotion.setRouteCode(ttr.getRouteCode());
			promotion.setStartDate(sdf.parse(startDate));
			promotion.setEndRoute(ttr.getEndRouteName());
			promotion.setStartRoute(ttr.getStartRouteName());
			promotion.setTrafficScheme(ts);
			promotion.setSetupByUser(user);
			this.swpService.createNewRecord(promotion);
			
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", promotion.getId());
			js.put("promotionName", promotion.getPromotionName());
			js.put("baseRationaleCount", promotion.getBaseRationaleCount());
			js.put("cardScheme", promotion.getCardScheme()==null ? promotion.getCardScheme() : promotion.getCardScheme().getId());
			js.put("createdAt", sdf1.format(promotion.getCreated_at()));
			js.put("updatedAt", sdf1.format(promotion.getUpdated_at()));
			js.put("description", promotion.getDescription());
			js.put("discountPercentageApplicable", promotion.getDiscountPercentageApplicable());
			js.put("endDate", sdf.format(promotion.getEndDate()));
			js.put("endRoute", promotion.getEndRoute());
			js.put("promotionCode", promotion.getPromotionCode());
			js.put("routeCode", promotion.getRouteCode());
			js.put("startDate", sdf.format(promotion.getStartDate()));
			js.put("endRoute", promotion.getEndRoute());
			js.put("startRoute", promotion.getStartRoute());
			js.put("trafficScheme", promotion.getTrafficScheme()==null ? promotion.getTrafficScheme() : promotion.getTrafficScheme().getId());
			js.put("setupByUser", promotion.getSetupByUser()==null ? promotion.getSetupByUser() : promotion.getSetupByUser().getId());
			txnObjects.put("" + a++, js);
			syncPromotionToCloud(txnObjects);
			
			jsonObject.add("message", "New Promotion generated successfully");
		
			
			
			
			JSONObject cardSchemeObj = new JSONObject();
			jsonObject.add("promotion", new Gson().toJson(promotion));
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	public Response deletePromotion(String promotionCode, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from Promotion tp where tp.promotionCode = '" + promotionCode + "'";
			Promotion promotion = (Promotion)this.swpService.getUniqueRecordByHQL(hql);
			promotion.setDeleted_at(new Date());
			this.swpService.updateRecord(promotion);
			
			jsonObject.add("message", "Promotion deleted successfully");
		
			
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	

	public Response getPromotions(String token) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			Promotion promotion = new Promotion();
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from Promotion tp WHERE tp.deleted_at IS NULL";
			Collection<Promotion> ts = (Collection<Promotion>)this.swpService.getAllRecordsByHQL(hql);
			
			Iterator<Promotion> it = ts.iterator();
			JSONArray jsArr = new JSONArray();
			while(it.hasNext())
			{
				Promotion p = it.next();
				Gson gson = new Gson();
				jsArr.put(gson.toJson(p));
			}
			
			
			jsonObject.add("message", "Promotion Listings");
			
			
			jsonObject.add("promotionList", jsArr.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response createException(String userMobileNo, String userFullName, String carOwnerDetails, String vehicleRegNo,
			Double discountPercentageApplicable, String routeCode,
			String cardPan, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			TrafficException te = new TrafficException();
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from TrafficTollRoute tp where tp.routeCode = '" + routeCode + "'";
			TrafficTollRoute ttr = (TrafficTollRoute)this.swpService.getUniqueRecordByHQL(hql);
			
			hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
			ECard card = (ECard)this.swpService.getUniqueRecordByHQL(hql);

			
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			
			te.setCarOwnerDetails(carOwnerDetails);
			te.setCreated_at(new Date());
			te.setDiscountPercentageApplicable(discountPercentageApplicable);
			te.setEcardId(card.getId());
			te.setRouteCode(routeCode);
			te.setUpdated_at(new Date());
			te.setVehicleRegNo(vehicleRegNo);
			te.setUserMobileNo(userMobileNo);
			te.setUserFullName(userFullName);
			te.setSetupByUser(user);
			this.swpService.createNewRecord(te);
			
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", te.getId());
			js.put("carOwnerDetails", te.getCarOwnerDetails());
			js.put("createdAt", sdf1.format(te.getCreated_at()));
			js.put("discountPercentageApplicable", te.getDiscountPercentageApplicable());
			js.put("ecardId", te.getEcardId());
			js.put("routeCode", te.getRouteCode());
			js.put("updatedAt", sdf1.format(te.getUpdated_at()));
			js.put("vehicleRegNo", te.getVehicleRegNo());
			js.put("userMobileNo", te.getUserMobileNo());
			js.put("userFullName", te.getUserFullName());
			js.put("setupByUser", te.getSetupByUser()==null ? te.getSetupByUser() : te.getSetupByUser().getId());
			txnObjects.put("" + a++, js);
			syncTrafficExceptionToCloud(txnObjects);
			
			jsonObject.add("message", "New Traffic Billing Exception generated successfully");
		
			
			
			jsonObject.add("trafficException", new Gson().toJson(te));
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	private boolean syncPromotionToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("promotion", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
	
	private boolean syncTrafficExceptionToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("trafficexception", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	private boolean syncBankToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			log.info("Received token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("bank", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	


	public Response deleteTrafficException(String userMobileNo, String routeCode, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from TrafficException tp where tp.userMobileNo = '" + userMobileNo + "' AND tp.routeCode = '" + routeCode + "'";
			TrafficException te = (TrafficException)this.swpService.getUniqueRecordByHQL(hql);
			te.setDeleted_at(new Date());
			this.swpService.updateRecord(te);
			
			jsonObject.add("message", "Traffic Billing Exception deleted successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	
	public Response getTrafficExceptions(String token, String routeCode) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			
			log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from TrafficException tp";
			if(routeCode!=null)
				hql = hql + " WHERE tp.routeCode = '" + routeCode + "' AND";
			
			hql = hql + " tp.deleted_at IS NULL";
			
			Collection<TrafficException> ts = (Collection<TrafficException>)this.swpService.getAllRecordsByHQL(hql);
			
			Iterator<TrafficException> it = ts.iterator();
			JSONArray jsArr = new JSONArray();
			while(it.hasNext())
			{
				TrafficException p = it.next();
				Gson gson = new Gson();
				jsArr.put(gson.toJson(p));
			}
			
			
			jsonObject.add("message", "Traffic Exception Listings");
		
			
			
			
			jsonObject.add("trafficExceptionList", jsArr.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response syncOutData(String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JSONObject jsonArray = null;
		JsonObjectBuilder jsonObjectResp = Json.createObjectBuilder();
		try
		{
			swpService = serviceLocator.getSwpService();
			jsonArray = new JSONObject();
			int a = 0;
			Date date = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String dateStr = sdf.format(date);
			String startDateStr = dateStr + " 00:00:00";
			//startDateStr = "2017-09-21 00:00:00";
			String endDateStr = dateStr + " 23:59:59";
			
			
			 
			
			Date syncDate = null;
			String hql = "Select tp from Synchronizer tp";// where tp.created_at > '" + startDateStr + "' AND tp.created_at < '" + endDateStr + "'";// AND serverOption = 0";
			Collection<Synchronizer> synchronizerList = (Collection<Synchronizer>)swpService.getAllRecordsByHQL(hql);
			Iterator<Synchronizer> itSynchronizer = synchronizerList.iterator();
			while(itSynchronizer.hasNext())
			{
				Synchronizer sync = itSynchronizer.next();
				syncDate = sync.getCreated_at();
			}
			a = 0;
			
			startDateStr = sdf1.format(syncDate);
			Long t = syncDate.getTime() + (30*60*1000);
			endDateStr = sdf1.format(new Date(syncDate.getTime() + t));
			
			hql = "Select tp from Bank tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			
			java.util.Collection<Bank> bankList = (Collection<Bank>)swpService.getAllRecordsByHQL(hql);
			Iterator<Bank> itBank = bankList.iterator();
			JSONObject txnObjects = new JSONObject();
			while(itBank.hasNext())
			{
				JSONObject js = new JSONObject();
				Bank bank = itBank.next();

				js.put("id", bank.getId());
				js.put("accessExodus", bank.getAccess_exodus());
				js.put("bankCode", bank.getBankCode());
				js.put("bankName", bank.getBankName());
				js.put("createdAt", sdf1.format(bank.getCreated_at()));
				js.put("onlineBankingUrl", bank.getOnlineBankingURL());
				js.put("updatedAt", sdf1.format(bank.getUpdated_at()));
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("bank", txnObjects);
			a = 0;
			

			hql = "Select tp from User tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			
			java.util.Collection<User> userList = (Collection<User>)swpService.getAllRecordsByHQL(hql);
			Iterator<User> itUser = userList.iterator();
			txnObjects = new JSONObject();
			while(itUser.hasNext())
			{
				JSONObject js = new JSONObject();
				User user = itUser.next();
				js.put("id", user.getId());
				js.put("roleCode", user.getRoleCode().ordinal());
				js.put("webActivationCode", user.getWebActivationCode());
				js.put("failedLoginCount", user.getFailedLoginCount());
				js.put("username", user.getUsername());
				js.put("lockout", user.getLockOut());
				js.put("createdAt", sdf1.format(user.getCreated_at()));
				js.put("updatedAt", sdf1.format(user.getUpdated_at()));
				js.put("mobileNumber", user.getMobileNumber());
				js.put("firstName", user.getFirstName());
				js.put("lastName", user.getLastName());
				js.put("otherName", user.getOtherName());
				js.put("email", user.getEmail());
				js.put("branchCode", user.getBranchCode());
				js.put("bankCode", user.getBankCode());
				js.put("password", user.getPassword());
				js.put("uniqueId", user.getUniqueId());
				js.put("userStatus", user.getUserStatus().ordinal());
				js.put("distributor", user.getDistributor()==null ? null : user.getDistributor().getId());
				js.put("distributorId", user.getDistributorId());
				js.put("distributorCompanyName", user.getDistributorCompanyName());
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("user", txnObjects);
			a = 0;
			
			
			hql = "Select tp from MerchantScheme tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			java.util.Collection<MerchantScheme> merchantSchemeList = (Collection<MerchantScheme>)swpService.getAllRecordsByHQL(hql);
			Iterator<MerchantScheme> itMerchantScheme = merchantSchemeList.iterator();
			txnObjects = new JSONObject();
			while(itMerchantScheme.hasNext())
			{
				JSONObject js = new JSONObject();
				MerchantScheme merchantScheme = itMerchantScheme.next();
				js.put("id", merchantScheme.getId());
				js.put("createdAt", sdf1.format(merchantScheme.getCreated_at()));
				js.put("updatedAt", sdf1.format(merchantScheme.getUpdated_at()));
				js.put("fixedCharge", merchantScheme.getFixedCharge());
				js.put("schemeCode", merchantScheme.getSchemecode());
				js.put("schemeName", merchantScheme.getSchemename());
				js.put("transactionPercentage", merchantScheme.getTransactionPercentage());
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("merchantscheme", txnObjects);
			a = 0;
			
			
			hql = "Select tp from Merchant tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			
			java.util.Collection<Merchant> merchantList = (Collection<Merchant>)swpService.getAllRecordsByHQL(hql);
			Iterator<Merchant> itMerchant = merchantList.iterator();
			txnObjects = new JSONObject();
			while(itMerchant.hasNext())
			{
				JSONObject js = new JSONObject();
				Merchant merchant = itMerchant.next();
				js.put("id", merchant.getId());
				js.put("createdAt", sdf1.format(merchant.getCreated_at()));
				js.put("updatedAt", sdf1.format(merchant.getUpdated_at()));
				js.put("merchantBank", merchant.getMerchantBank()==null ? merchant.getMerchantBank() : merchant.getMerchantBank().getId());
				js.put("merchantCode", merchant.getMerchantCode());
				js.put("merchantCode", merchant.getMerchantCode());
				js.put("isBank", merchant.getIsBank());
				js.put("merchantName", merchant.getMerchantName());
				js.put("merchantScheme", merchant.getMerchantScheme()==null ? merchant.getMerchantScheme() : merchant.getMerchantScheme().getId());
				js.put("status", merchant.getStatus().ordinal());
				js.put("apiKey", merchant.getApiKey());
				js.put("user", merchant.getUser()==null ? merchant.getUser() : merchant.getUser().getId());
				js.put("createdByUserName", merchant.getCreatedByUserName());
				js.put("createdByUserId", merchant.getCreatedByUserId());
				
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("merchant", txnObjects);
			a = 0;
			

			
			
			hql = "Select tp from CardScheme tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
				
			java.util.Collection<CardScheme> cardSchemeList = (Collection<CardScheme>)swpService.getAllRecordsByHQL(hql);
			Iterator<CardScheme> itCardScheme = cardSchemeList.iterator();
			txnObjects = new JSONObject();
			while(itCardScheme.hasNext())
			{
				JSONObject js = new JSONObject();
				CardScheme cardScheme = itCardScheme.next();
				js.put("id", cardScheme.getId());
				js.put("overrideFixedFee", cardScheme.getOverrideFixedFee());
				js.put("overrideTransactionFee", cardScheme.getOverrideTransactionFee());
				js.put("schemeName", cardScheme.getSchemeName());
				js.put("updated_at", sdf1.format(cardScheme.getUpdated_at()));
				js.put("schemeDetail", cardScheme.getSchemeDetail());
				js.put("created_at", sdf1.format(cardScheme.getCreated_at()));
				js.put("deleted_at", cardScheme.getDeleted_at()==null ? null : sdf1.format(cardScheme.getDeleted_at()));
				js.put("schemeCode", cardScheme.getSchemeCode());
				js.put("schemeStatus", cardScheme.getCardSchemeStatus());
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("cardscheme", txnObjects);
			a = 0;
			
			
			
			hql = "Select tp from Distributor tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			
			java.util.Collection<Distributor> distributorList = (Collection<Distributor>)swpService.getAllRecordsByHQL(hql);
			Iterator<Distributor> itDistributor = distributorList.iterator();
			txnObjects = new JSONObject();
			while(itDistributor.hasNext())
			{
				JSONObject js = new JSONObject();
				Distributor distributor = itDistributor.next();
				js.put("id", distributor.getId());
				js.put("contactEmail", distributor.getContactEmail());
				js.put("contactMobile", distributor.getContactMobile());
				js.put("contactAddress", distributor.getContactAddress());
				js.put("city", distributor.getCity());
				js.put("district", distributor.getDistrict());
				js.put("province", distributor.getProvince());
				js.put("companyName", distributor.getCompanyName());
				js.put("companyRegNo", distributor.getCompanyRegNo());
				js.put("distributorStatus", distributor.getDistributorStatus().ordinal());
				js.put("distributorCode", distributor.getDistributorCode());
				js.put("fundingAccountType", distributor.getFundingAccountType().ordinal());
				js.put("contactFullName", distributor.getContactFullName());
				js.put("distributorName", distributor.getDistributorName());
				js.put("distributorMerchant", distributor.getDistributorMerchant()==null ? distributor.getDistributorMerchant() : distributor.getDistributorMerchant().getId());
				js.put("merchantCode", distributor.getMerchantCode());
				js.put("distributorType", distributor.getDistributorType().ordinal());
				js.put("createdByUserId", distributor.getCreatedByUserId()==null ? distributor.getCreatedByUserId() : distributor.getCreatedByUserId().getId());
				js.put("createdByUserName", distributor.getCreatedByUserName());
				js.put("distributorStatus", distributor.getDistributorStatus().ordinal());
				js.put("createdAt", sdf1.format(distributor.getCreated_at()));
				js.put("updatedAt", sdf1.format(distributor.getUpdated_at()));
				js.put("distributorBankAccount", distributor.getDistributorBankAccount()==null ? distributor.getDistributorBankAccount() : distributor.getDistributorBankAccount().getId());
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("distributor", txnObjects);
			a = 0;
			
			
			
			hql = "Select tp from Device tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			java.util.Collection<Device> deviceList = (Collection<Device>)swpService.getAllRecordsByHQL(hql);
			Iterator<Device> itDevice = deviceList.iterator();
			txnObjects = new JSONObject();
			while(itDevice.hasNext())
			{
				JSONObject jsonObj = new JSONObject();
				Device device = itDevice.next();
				jsonObj.put("id", device.getId());
				jsonObj.put("createdAt", sdf1.format(device.getCreated_at()));
				jsonObj.put("updatedAt", sdf1.format(device.getUpdated_at()));
				jsonObj.put("deviceCode", device.getDeviceCode());
				jsonObj.put("deviceType", device.getDeviceType().ordinal());
				jsonObj.put("distributor", device.getDistributor()==null ? device.getDistributor() : device.getDistributor().getId());
				jsonObj.put("distributorCode", device.getDistributorCode());
				jsonObj.put("distributorId", device.getDistributorId());
				jsonObj.put("distributorName", device.getDistributorName());
				jsonObj.put("lastTransactions", device.getLastTransactions());
				jsonObj.put("status", device.getStatus());
				jsonObj.put("merchant", device.getMerchant()==null ? device.getMerchant() : device.getMerchant().getId());
				jsonObj.put("merchantCode", device.getMerchantCode());
				jsonObj.put("merchantId", device.getMerchantId());
				jsonObj.put("merchantName", device.getMerchantName());
				jsonObj.put("terminalApiKey", device.getTerminalApiKey());
				jsonObj.put("status", device.getStatus().ordinal());
				jsonObj.put("setupByUser", device.getSetupByUser()==null ? device.getSetupByUser() : device.getSetupByUser().getId());
				jsonObj.put("setupByUserName", device.getSetupByUserName());
				txnObjects.put("" + a++, jsonObj);
			}
			jsonArray.put("device", txnObjects);
			a = 0;
			
			
			hql = "Select tp from Customer tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			java.util.Collection<Customer> customerList = (Collection<Customer>)swpService.getAllRecordsByHQL(hql);
			Iterator<Customer> itCustomer = customerList.iterator();
			txnObjects = new JSONObject();
			while(itCustomer.hasNext())
			{
				JSONObject js = new JSONObject();
				Customer customer = itCustomer.next();
				js.put("id", customer.getId());
				js.put("firstName", customer.getFirstName());
				js.put("lastName", customer.getLastName());
				js.put("contactEmail", customer.getContactEmail());
				js.put("customerMobile", customer.getContactMobile());
				js.put("createdAt", sdf1.format(customer.getCreated_at()));
				js.put("customerType", customer.getCustomerType()==null ? customer.getCustomerType() : customer.getCustomerType().ordinal());
				js.put("otherName", customer.getOtherName());
				js.put("status", customer.getStatus()==null ? customer.getStatus() : customer.getStatus().ordinal());
				js.put("updatedAt", sdf1.format(customer.getUpdated_at()));
				js.put("user", customer.getUser()==null ? customer.getUser() : customer.getUser().getId());
				js.put("verificationNumber", customer.getVerificationNumber());
				js.put("carPlateNumber", customer.getCarPlateNumber());
				
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("customer", txnObjects);
			a = 0;
			
			
			
			/*hql = "Select tp from Account tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			query = session.createQuery(hql);
			java.util.Collection<Account> accountList = (java.util.Collection<Account>)query.list();
			Iterator<Account> itAccount = accountList.iterator();
			txnObjects = new JSONObject();
			while(itAccount.hasNext())
			{
				JSONObject js = new JSONObject();
				Account account = itAccount.next();
				js.put("id", account.getId());
				js.put("accountCount", account.getAccountCount());
				js.put("accountIdentifier", account.getAccountIdentifier());
				js.put("bank", account.getBank().getId());
				js.put("accountType", account.getAccountType().ordinal());
				js.put("branchCode", account.getBranchCode());
				js.put("createdAt", sdf1.format(account.getCreated_at()));
				js.put("updatedAt", sdf1.format(account.getUpdated_at()));
				js.put("currencyCode", account.getCurrencyCode());
				js.put("distributor", account.getDistributor()==null ? account.getDistributor() : account.getDistributor().getId());
				js.put("distributorId", account.getDistributorId());
				js.put("otp", account.getOtp());
				js.put("status", account.getStatus().ordinal());
				js.put("currentBalance", account.getCurrentBalance());				
				
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("account", txnObjects);
			a = 0;*/
			
			


			
			
			hql = "Select tp from TrafficScheme tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			
			java.util.Collection<TrafficScheme> trafficSchemeList = (Collection<TrafficScheme>)swpService.getAllRecordsByHQL(hql);
			Iterator<TrafficScheme> itTrafficScheme = trafficSchemeList.iterator();
			txnObjects = new JSONObject();
			while(itTrafficScheme.hasNext())
			{
				JSONObject js = new JSONObject();
				TrafficScheme trafficScheme = itTrafficScheme.next();
				js.put("id", trafficScheme.getId());
				js.put("createdAt", sdf1.format(trafficScheme.getCreated_at()));
				js.put("updatedAt", sdf1.format(trafficScheme.getUpdated_at()));
				js.put("schemeAmount", trafficScheme.getSchemeAmount());
				js.put("schemeCode", trafficScheme.getSchemeCode());
				js.put("schemeDetail", trafficScheme.getSchemeDetail());
				js.put("schemeName", trafficScheme.getSchemeName());
				js.put("trafficSchemeStatus", trafficScheme.getTrafficSchemeStatus());
				js.put("currency", trafficScheme.getCurrency().ordinal());
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("trafficscheme", txnObjects);
			a = 0;
			
			
			hql = "Select tp from TrafficTollRoute tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			java.util.Collection<TrafficTollRoute> trafficTollRouteList = (Collection<TrafficTollRoute>)swpService.getAllRecordsByHQL(hql);
			Iterator<TrafficTollRoute> itTrafficTollRoute = trafficTollRouteList.iterator();
			txnObjects = new JSONObject();
			while(itTrafficTollRoute.hasNext())
			{
				JSONObject js = new JSONObject();
				TrafficTollRoute trafficTollRoute = itTrafficTollRoute.next();
				js.put("id", trafficTollRoute.getId());
				js.put("createdAt", sdf1.format(trafficTollRoute.getCreated_at()));
				js.put("updatedAt", sdf1.format(trafficTollRoute.getUpdated_at()));
				js.put("city", trafficTollRoute.getCity());
				js.put("district", trafficTollRoute.getDistrict());
				js.put("endRouteName", trafficTollRoute.getEndRouteName());
				js.put("startRouteName", trafficTollRoute.getStartRouteName());
				js.put("province", trafficTollRoute.getProvince());
				js.put("routeCode", trafficTollRoute.getRouteCode());
				js.put("status", trafficTollRoute.getStatus());
				
				
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("traffictollroute", txnObjects);
			a = 0;
			
			
			hql = "Select tp from TrafficTollRouteLane tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			java.util.Collection<TrafficTollRouteLane> trafficTollRouteLaneList = (Collection<TrafficTollRouteLane>)swpService.getAllRecordsByHQL(hql);
			Iterator<TrafficTollRouteLane> itTrafficTollRouteLane = trafficTollRouteLaneList.iterator();
			txnObjects = new JSONObject();
			while(itTrafficTollRouteLane.hasNext())
			{
				JSONObject js = new JSONObject();
				TrafficTollRouteLane trafficTollRouteLane = itTrafficTollRouteLane.next();
				js.put("id", trafficTollRouteLane.getId());
				js.put("createdAt", sdf1.format(trafficTollRouteLane.getCreated_at()));
				js.put("updatedAt", sdf1.format(trafficTollRouteLane.getUpdated_at()));
				js.put("startRouteName", trafficTollRouteLane.getStartRouteName());
				js.put("endRouteName", trafficTollRouteLane.getEndRouteName());
				js.put("routeCode", trafficTollRouteLane.getRouteCode());
				js.put("tollLane", trafficTollRouteLane.getTollLane());
				js.put("status", trafficTollRouteLane.getStatus());
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("traffictollroutelane", txnObjects);
			a = 0;
			
			
			
			hql = "Select tp from TrafficTollPrice tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			java.util.Collection<TrafficTollPrice> trafficTollPriceList = (Collection<TrafficTollPrice>)swpService.getAllRecordsByHQL(hql);
			Iterator<TrafficTollPrice> itTrafficTollPrice = trafficTollPriceList.iterator();
			txnObjects = new JSONObject();
			while(itTrafficTollPrice.hasNext())
			{
				JSONObject js = new JSONObject();
				TrafficTollPrice trafficTollPrice = itTrafficTollPrice.next();
				js.put("id", trafficTollPrice.getId());
				js.put("createdAt", sdf1.format(trafficTollPrice.getCreated_at()));
				js.put("updatedAt", sdf1.format(trafficTollPrice.getUpdated_at()));
				js.put("startRouteName", trafficTollPrice.getStartRouteName());
				js.put("endRouteName", trafficTollPrice.getEndRouteName());
				js.put("feePrice", trafficTollPrice.getFeePrice());
				js.put("tollLane", trafficTollPrice.getTollLane());
				js.put("trafficSchemeCode", trafficTollPrice.getTrafficSchemeCode());
				js.put("trafficSchemeName", trafficTollPrice.getTrafficSchemeName());
				js.put("routeCode", trafficTollPrice.getRouteCode());
				js.put("status", trafficTollPrice.getStatus());
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("traffictollprice", txnObjects);
			a = 0;
			
			
			
			hql = "Select tp from Promotion tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			java.util.Collection<Promotion> promotionList = (Collection<Promotion>)swpService.getAllRecordsByHQL(hql);
			Iterator<Promotion> itPromotion = promotionList.iterator();
			txnObjects = new JSONObject();
			while(itPromotion.hasNext())
			{
				JSONObject js = new JSONObject();
				Promotion promotion = itPromotion.next();
				js.put("id", promotion.getId());
				js.put("promotionName", promotion.getPromotionName());
				js.put("baseRationaleCount", promotion.getBaseRationaleCount());
				js.put("cardScheme", promotion.getCardScheme()==null ? promotion.getCardScheme() : promotion.getCardScheme().getId());
				js.put("createdAt", sdf1.format(promotion.getCreated_at()));
				js.put("updatedAt", sdf1.format(promotion.getUpdated_at()));
				js.put("description", promotion.getDescription());
				js.put("discountPercentageApplicable", promotion.getDiscountPercentageApplicable());
				js.put("endDate", sdf.format(promotion.getEndDate()));
				js.put("endRoute", promotion.getEndRoute());
				js.put("promotionCode", promotion.getPromotionCode());
				js.put("routeCode", promotion.getRouteCode());
				js.put("startDate", sdf.format(promotion.getStartDate()));
				js.put("endRoute", promotion.getEndRoute());
				js.put("startRoute", promotion.getStartRoute());
				js.put("trafficScheme", promotion.getTrafficScheme()==null ? promotion.getTrafficScheme() : promotion.getTrafficScheme().getId());
				js.put("setupByUser", promotion.getSetupByUser()==null ? promotion.getSetupByUser() : promotion.getSetupByUser().getId());
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("promotion", txnObjects);
			a = 0;
			
			
			
			hql = "Select tp from TrafficException tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			java.util.Collection<TrafficException> trafficExceptionList = (Collection<TrafficException>)swpService.getAllRecordsByHQL(hql);
			
			Iterator<TrafficException> itTrafficException = trafficExceptionList.iterator();
			txnObjects = new JSONObject();
			while(itTrafficException.hasNext())
			{
				JSONObject js = new JSONObject();
				TrafficException te = itTrafficException.next();
				js.put("id", te.getId());
				js.put("carOwnerDetails", te.getCarOwnerDetails());
				js.put("createdAt", sdf1.format(te.getCreated_at()));
				js.put("updatedAt", sdf1.format(te.getUpdated_at()));
				js.put("discountPercentageApplicable", te.getDiscountPercentageApplicable());
				js.put("ecardId", te.getEcardId());
				js.put("routeCode", te.getRouteCode());
				js.put("vehicleRegNo", te.getVehicleRegNo());
				js.put("userMobileNo", te.getUserMobileNo());
				js.put("userFullName", te.getUserFullName());
				js.put("setupByUser", te.getSetupByUser()==null ? te.getSetupByUser() : te.getSetupByUser().getId());
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("trafficexception", txnObjects);
			a = 0;
			
			
			
			hql = "Select tp from ECard tp where tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'";// AND serverOption = 0";
			java.util.Collection<ECard> eCardList = (Collection<ECard>)swpService.getAllRecordsByHQL(hql);
			Iterator<ECard> itECard = eCardList.iterator();
			txnObjects = new JSONObject();
			while(itECard.hasNext())
			{
				JSONObject js = new JSONObject();
				ECard ecard = itECard.next();
				System.out.println("ecard id = " + ecard.getId() );
				js.put("id", ecard.getId());
				js.put("batchId", ecard.getBatchId());
				js.put("merchant", ecard.getMerchant()==null ? ecard.getMerchant() : ecard.getMerchant().getId());
				js.put("distributor", ecard.getDistributor()==null ? ecard.getDistributor() : ecard.getDistributor().getId());
				js.put("distributorType", ecard.getDistributorType()==null ? ecard.getDistributorType() : ecard.getDistributorType().ordinal());
				js.put("acquirer", ecard.getAcquirer()==null ? ecard.getAcquirer() : ecard.getAcquirer().getId());
				js.put("cardScheme", ecard.getCardScheme()==null ? ecard.getCardScheme() : ecard.getCardScheme().getId());
				js.put("cardStatus", ecard.getCardStatus()==null ? ecard.getCardStatus() : ecard.getCardStatus().ordinal());
				js.put("cardType", ecard.getCardType()==null ? ecard.getCardType() : ecard.getCardType().ordinal());
				js.put("pan", ecard.getPan());
				js.put("pin", ecard.getPin());
				js.put("expiryDate", sdf1.format(ecard.getExpiryDate()));
				js.put("cvv", ecard.getCvv());
				js.put("otp", ecard.getOtp());
				js.put("customerMobileNumber", ecard.getCustomerMobileNumber());
				js.put("merchantCode", ecard.getMerchantCode());
				js.put("merchantId", ecard.getMerchantId());
				js.put("distributorCode", ecard.getDistributorCode());
				js.put("distributorId", ecard.getDistributorId());
				//js.put("lastFiveTransactions", ecard.getLastFiveTransactions());
				js.put("changedCardPin", ecard.getChangedCardPin());
				js.put("uniqueId", ecard.getUniqueId());
				js.put("createdAt", sdf1.format(ecard.getCreated_at()));
				js.put("updatedAt", sdf1.format(ecard.getUpdated_at()));
				//js.put("currentBalance", ecard.getCurrentBalance());
				//js.put("totalCredited", ecard.getTotalCredited());
				//js.put("totalDebited", ecard.getTotalDebited());
				//js.put("currentDebt", ecard.getCurrentDebt());
				//js.put("lastCreditDate", ecard.getLastCreditDate()==null ? null : sdf1.format(ecard.getLastCreditDate()));
				//js.put("lastDebitDate", ecard.getLastDebitDate()==null ? null : sdf1.format(ecard.getLastDebitDate()));
				txnObjects.put("" + a++, js);
			}
			jsonArray.put("ecard", txnObjects);
			a = 0;
			
			
			
			hql = "Select tp from Transaction tp where " +
					"((tp.created_at > '" + startDateStr + "' AND tp.created_at < '" + endDateStr + "') OR " +
					"(tp.updated_at > '" + startDateStr + "' AND tp.updated_at < '" + endDateStr + "'))" +
							" AND serverOption = 0";
			Collection<Transaction> transactionList = (java.util.Collection<Transaction>)swpService.getAllRecordsByHQL(hql);
			Iterator<Transaction> it = transactionList.iterator();
			txnObjects = new JSONObject();
			
			while(it.hasNext())
			{
				JSONObject jsonObject = new JSONObject();
				Transaction transaction = it.next();
				Gson gson = new GsonBuilder().create();
				
				jsonObject.put("transactionRef", transaction.getTransactionRef());
				jsonObject.put("orderRef", transaction.getOrderRef());
				jsonObject.put("channel", transaction.getChannel()==null ? transaction.getChannel() : transaction.getChannel().ordinal());
				jsonObject.put("transactionDate", transaction.getTransactionDate());
				jsonObject.put("serviceType", transaction.getServiceType().ordinal());
				jsonObject.put("transactingUser", transaction.getTransactingUser()==null ? transaction.getTransactingUser() : transaction.getTransactingUser().getId());
				jsonObject.put("transactingUserName", transaction.getTransactingUserName());
				jsonObject.put("userId", transaction.getUserId());
				jsonObject.put("status", transaction.getStatus().ordinal());
				jsonObject.put("card", transaction.getCard()==null ? transaction.getCard() : transaction.getCard().getId());
				jsonObject.put("device", transaction.getDevice()==null ? transaction.getDevice() : transaction.getDevice().getId());
				jsonObject.put("distributor", transaction.getDistributor()==null ? transaction.getDistributor() : transaction.getDistributor().getId());
				jsonObject.put("merchant", transaction.getMerchant()==null ? transaction.getMerchant() : transaction.getMerchant().getId());
				jsonObject.put("deviceId", transaction.getDeviceId());
				jsonObject.put("deviceCode", transaction.getDeviceCode());
				jsonObject.put("startRoute", transaction.getStartRoute());
				jsonObject.put("endRoute", transaction.getEndRoute());
				jsonObject.put("tollLane", transaction.getTollLane());
				jsonObject.put("messageRequest", transaction.getMessageRequest());
				jsonObject.put("messageResponse", transaction.getMessageResponse());
				jsonObject.put("fixedCharge", transaction.getFixedCharge());
				jsonObject.put("transactionFee", transaction.getTransactionFee());
				jsonObject.put("amount", transaction.getAmount());
				jsonObject.put("responseCode", transaction.getResponseCode());
				jsonObject.put("onUsTransaction", transaction.getOnUsTransaction());
				jsonObject.put("transactingBankId", transaction.getTransactingBankId());
				jsonObject.put("receipientTransactingBankId", transaction.getReceipientTransactingBankId());
				jsonObject.put("transactionDetail", transaction.getTransactionDetail());
				jsonObject.put("narration", transaction.getNarration());
				jsonObject.put("trafficScheme", transaction.getTrafficScheme()==null ? transaction.getTrafficScheme() : transaction.getTrafficScheme().getId());
				jsonObject.put("trafficSchemeId", transaction.getTrafficSchemeId());
				jsonObject.put("trafficSchemeName", transaction.getTrafficSchemeName());
				
				/*Debit card distributor account*/
				jsonObject.put("crCardId", transaction.getCrCardId());
				jsonObject.put("crDistributorAccountId", transaction.getCrDistributorAccountId());
				jsonObject.put("crDistributorId", transaction.getCrDistributorId());
				jsonObject.put("crMerchantId", transaction.getCrMerchantId());
				jsonObject.put("crBankId", transaction.getCrBankId());
				jsonObject.put("crCardPan", transaction.getCrCardPan());
				jsonObject.put("crDistributorName", transaction.getCrDistributorName());
				jsonObject.put("crMerchantName", transaction.getCrMerchantName());
				jsonObject.put("crBankName", transaction.getCrBankName());
				/*------------------------------------*/
				jsonObject.put("drCardPan", transaction.getDrCardPan());
				jsonObject.put("drDistributorName", transaction.getDrDistributorName());
				jsonObject.put("drMerchantName", transaction.getDrMerchantName());
				jsonObject.put("drBankName", transaction.getDrBankName());
				jsonObject.put("drCardId", transaction.getDrCardId());
				jsonObject.put("drDistributorAccountId", transaction.getDrDistributorAccountId());
				jsonObject.put("drDistributorId", transaction.getDrDistributorId());
				jsonObject.put("drMerchantId", transaction.getDrMerchantId());
				jsonObject.put("drBankId", transaction.getDrBankId());
				jsonObject.put("updatedAt", transaction.getUpdated_at());
				jsonObject.put("createdAt", transaction.getCreated_at());
				jsonObject.put("paymentMeans", transaction.getPaymentMeans().ordinal());
				jsonObject.put("carPlateNumber", transaction.getCarPlateNumber());
				jsonObject.put("expectedCarPlateNumber", transaction.getExpectedCarPlateNumber());
				jsonObject.put("nfraCurrency", transaction.getNFRACurrency().ordinal());
				jsonObject.put("exceptionAmountApplied", transaction.getExceptionAmountApplied());
				jsonObject.put("promotionAmountApplied", transaction.getPromotionAmountApplied());
				jsonObject.put("exceptionid", transaction.getExceptionId());
				jsonObject.put("promotionId", transaction.getPromotionId());
				jsonObject.put("extraDetails", transaction.getExtraDetails());
				jsonObject.put("serverOption", transaction.getServerOption());
				
				jsonObject.put("receiptNo", transaction.getReceiptNo());
				
				
				
				
				txnObjects.put("" + a++, jsonObject);
				
				/*jsonObject.put("cardPan", transaction.getCard()==null ? null : transaction.getCard().getPan());
				jsonObject.put("orderRef", transaction.getOrderRef());
				jsonObject.put("terminalId", transaction.getDevice()==null ? transaction.getDevice() : transaction.getDevice().getId());
				jsonObject.put("amount", transaction.getServerOption());
				jsonObject.put("narration", transaction.getServerOption());
				jsonObject.put("serviceType", transaction.getServerOption());
				jsonObject.put("extraDetails", transaction.getServerOption());
				jsonObject.put("routeCode", transaction.getServerOption());
				jsonObject.put("tollLane", transaction.getServerOption());
				jsonObject.put("trafficSchemeCode", transaction.getServerOption());
				jsonObject.put("channel", transaction.getServerOption());
				jsonObject.put("user", transaction.getServerOption());
				jsonObject.put("roleCode", transaction.getServerOption());
				jsonObject.put("carPlateNumber", transaction.getServerOption());
				jsonObject.put("nfraCurrency", transaction.getServerOption());
				jsonObject.put("receiptNo", transaction.getReceiptNo());*/
			}
			jsonArray.put("transaction", txnObjects);
			a = 0;
			
			
			Iterator<String> keys = jsonArray.keys();
			while(keys.hasNext())
			{
				String key = keys.next();
				System.out.println("------------------------");
				System.out.println(jsonArray.get(key).toString());
			}
			
			
			
			
			
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/";
			String para = "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE";
			JSONObject header = new JSONObject();
			String dataStr = sendDataViaHttp(para, url, header);
			JSONObject jsonObj = new JSONObject(dataStr);
			String processToken = jsonObj.getString("token");
			System.out.println("token = " + processToken);
			header.put("auth_token", processToken);
			String charset = "UTF-8";  // Or in Java 7 and later, use the constant: java.nio.charset.StandardCharsets.UTF_8.name()
			url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInDataV2/";
			dataStr = sendDataViaHttp("data="+URLEncoder.encode(jsonArray.toString(), charset), url, header);
			
			System.out.println("Data === ");
			System.out.println(jsonArray.toString());
			System.out.println("data response");
			System.out.println(dataStr);
			
			handleSyncIn(dataStr);
			
			jsonObjectResp.add("data", jsonArray.toString());
			jsonObjectResp.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj1 = jsonObjectResp.build();
			
			Synchronizer sync = new Synchronizer();
			sync.setCreated_at(new Date());
			sync.setUpdated_at(new Date());
			sync = (Synchronizer)swpService.createNewRecord(sync);
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj1.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObjectResp.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}


	
	
	public Response handleSyncIn(String data) {
		// TODO Auto-generated method stub
		Session session = null;
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		
		try
		{
			/*Configuration configuration=new Configuration();
			configuration.configure();
			ServiceRegistry sr= new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();
			factory = configuration.buildSessionFactory(sr);
			session = factory.openSession();*/
			swpService = serviceLocator.getSwpService();
			
			String key = "";
			JSONObject jsonArray = new JSONObject(data);
			String[] entries = {"bank", "user", "merchantscheme", "merchant", "cardscheme", "distributor", "distributorcreation", "device", 
					"devicesync", "customer", "assigncardtocustomer", "assigntollusertotollrouteesync", "account", "trafficscheme", "traffictollroute", 
					"traffictollroutelane", "traffictollprice", "promotion", "trafficexception", "ecard", "carduniqueidassignment", "carddistributorassignment",
					"transaction"};
			
			//Iterator<String> keys = jsonArray.keys();
			//while(keys.hasNext())
			for(int i=0; i<entries.length; i++)
			{
				//key = keys.next();
				key = entries[i];
				System.out.println("------------------------");
				JSONObject txnObjects = jsonArray.has(key) ? jsonArray.getJSONObject(key) : null;
				
				if(txnObjects!=null)
				{
					switch(key)
					{
						case "bank":
							handleForBankSyncIn(txnObjects, swpService);
							break;
						case "user":
							handleForUserSyncIn(txnObjects, swpService);
							break;
						case "merchantscheme":
							handleForMerchantSchemeSyncIn(txnObjects, swpService);
							break;
						case "merchant":
							handleForMerchantSyncIn(txnObjects, swpService);
							break;
						case "cardscheme":
							handleForCardSchemeSyncIn(txnObjects, swpService);
							break;
						case "distributor":
							handleForDistributorSyncIn(txnObjects, swpService);
							break;
						case "device":
							handleForDeviceSyncIn(txnObjects, swpService);
							break;
						case "customer": 
							handleForCustomerSyncIn(txnObjects, swpService);
							break;
						case "assigncardtocustomer":
							handleForAssignCardToCustomerSyncIn(txnObjects, swpService);
							break;
						case "assigntollusertotollrouteesync":
							handleForAssignTollUserToTollRouteSyncIn(txnObjects, swpService);
							break;
						case "account":
							handleForAccountSyncIn(txnObjects, swpService);
							break;
						case "trafficscheme":
							handleForTrafficSchemeSyncIn(txnObjects, swpService);
							break;
						case "traffictollroute":
							handleForTrafficTollRouteSyncIn(txnObjects, swpService);
							break;
						case "traffictollroutelane":
							handleForTrafficTollRouteLaneSyncIn(txnObjects, swpService);
							break;
						case "traffictollprice":
							handleForTrafficTollPriceSyncIn(txnObjects, swpService);
							break;
						case "promotion":
							handleForPromotionSyncIn(txnObjects, swpService);
							break;
						case "trafficexception":
							handleForTrafficExceptionSyncIn(txnObjects, swpService);
							break;
						case "ecard":
							handleForECardSyncIn(txnObjects, swpService);
							break;
						case "carduniqueidassignment":
							handleForECardUniqueIdSyncIn(txnObjects, swpService);
							break;
						case "carddistributorassignment":
							handleForECardDistributorAssignmentSyncIn(txnObjects, swpService);
							break;
						case "transaction":
							handleForTransactionSyncIn(txnObjects, swpService);
							break;
							
					}
				}
				
			}
			
			
			
			
			jsonObject.add("message", "Synchronization successful");
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}




	private static String sendDataViaHttp(String data, String url, JSONObject header) {
		URL obj;
		String USER_AGENT = "Mozilla/5.0";
		try
		{
			System.out.println("url = " + url);
			
			
			String query = data;
			System.out.println("Query = " + query);
			
			obj = new URL(url);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
			 
	 
			//add request header
			con.setRequestProperty("User-Agent", USER_AGENT);
			System.out.println("115");
			con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
			System.out.println("116");
			if(header!=null && header.length()>0)
			{
				Iterator<String> iter = header.keys();
				while(iter.hasNext())
				{
					String key = iter.next();
					con.setRequestProperty(key, header.getString(key));
				}
			}
			con.setDoOutput(true);
			System.out.println("Test 1");
			
			DataOutputStream wr = new DataOutputStream(con.getOutputStream());
			wr.writeBytes(query);
			wr.flush();
			wr.close();
			System.out.println("Test 2");
	 
			int responseCode = con.getResponseCode();
			JSONObject jsonObject = null;
	 
			System.out.println("Test 3");
	
			if(responseCode==200)
			{
				BufferedReader in = new BufferedReader(
				        new InputStreamReader(con.getInputStream()));
				String inputLine;
				StringBuffer response = new StringBuffer();
		
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				con.disconnect();
				
				return response.toString();
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return null;
	}
	
	
	
	


	private static void handleForTransactionSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		/*Configuration configuration=new Configuration();
		configuration.configure();
		ServiceRegistry sr= new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();
		factory = configuration.buildSessionFactory(sr);
		session = factory.openSession();*/
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				
				Transaction transaction = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				System.out.println("txnObject == " + txnObject.toString());
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				
				transaction = new Transaction();
				//transaction.setId(id);
				
				
				Date created_at = (txnObject.has("createdAt") ? sdf1.parse(txnObject.getString("createdAt")) : null);
				Date updated_at = (txnObject.has("updatedAt") ? sdf1.parse(txnObject.getString("updatedAt")) : null);
				Date deleted_at = (txnObject.has("deletedAt") ? sdf1.parse(txnObject.getString("deletedAt")) : null);
				
				
				String transactionRef = (txnObject.has("transactionRef") ? txnObject.getString("transactionRef") : null);
				String orderRef = (txnObject.has("orderRef") ? txnObject.getString("orderRef") : null);
				Integer channel = (txnObject.has("channel") ? txnObject.getInt("channel") : null);
				Date transactionDate = (txnObject.has("transactionDate") ? sdf.parse(txnObject.getString("transactionDate")) : null);
				Integer serviceType = (txnObject.has("serviceType") ? txnObject.getInt("serviceType") : null);
				Long transactingUser = (txnObject.has("transactingUser") ? txnObject.getLong("transactingUser") : null);
				String transactingUserName = (txnObject.has("transactingUserName") ? txnObject.getString("transactingUserName") : null);
				Long userId = (txnObject.has("userId") ? txnObject.getLong("userId") : null);
				Integer status = (txnObject.has("status") ? txnObject.getInt("status") : null);
				Long card = (txnObject.has("card") ? txnObject.getLong("card") : null);
				Long device = (txnObject.has("device") ? txnObject.getLong("device") : null);
				Long distributor = (txnObject.has("distributor") ? txnObject.getLong("distributor") : null);
				Long merchant = (txnObject.has("merchant") ? txnObject.getLong("merchant") : null);
				Long deviceId = (txnObject.has("deviceId") ? txnObject.getLong("deviceId") : null);
				String deviceCode = (txnObject.has("deviceCode") ? txnObject.getString("deviceCode") : null);
				String startRoute = (txnObject.has("startRoute") ? txnObject.getString("startRoute") : null);
				String endRoute = (txnObject.has("endRoute") ? txnObject.getString("endRoute") : null);
				Integer tollLane = (txnObject.has("tollLane") ? txnObject.getInt("tollLane") : null);
				String messageRequest = (txnObject.has("messageRequest") ? txnObject.getString("messageRequest") : null);
				String messageResponse = (txnObject.has("messageResponse") ? txnObject.getString("messageResponse") : null);
				Double fixedCharge = (txnObject.has("fixedCharge") ? txnObject.getDouble("fixedCharge") : null);
				Double transactionFee = (txnObject.has("transactionFee") ? txnObject.getDouble("transactionFee") : null);
				Double amount = (txnObject.has("amount") ? txnObject.getDouble("amount") : null);
				Integer responseCode = (txnObject.has("responseCode") ? txnObject.getInt("responseCode") : null);
				Boolean onUsTransaction = (txnObject.has("onUsTransaction") ? txnObject.getBoolean("onUsTransaction") : null);
				Long transactingBankId = (txnObject.has("transactingBankId") ? txnObject.getLong("transactingBankId") : null);
				Long receipientTransactingBankId = (txnObject.has("receipientTransactingBankId") ? txnObject.getLong("receipientTransactingBankId") : null);
				String transactionDetail = (txnObject.has("transactionDetail") ? txnObject.getString("transactionDetail") : null);
				String narration = (txnObject.has("narration") ? txnObject.getString("narration") : null);
				Long trafficScheme = (txnObject.has("trafficScheme") ? txnObject.getLong("trafficScheme") : null);
				Long trafficSchemeId = (txnObject.has("trafficSchemeId") ? txnObject.getLong("trafficSchemeId") : null);
				String trafficSchemeName = (txnObject.has("trafficSchemeName") ? txnObject.getString("trafficSchemeName") : null);
				
				/*Debit card distributor account*/
				Long crCardId = (txnObject.has("crCardId") ? txnObject.getLong("crCardId") : null);
				Long crDistributorAccountId = (txnObject.has("crDistributorAccountId") ? txnObject.getLong("crDistributorAccountId") : null);
				Long crDistributorId = (txnObject.has("crDistributorId") ? txnObject.getLong("crDistributorId") : null);
				Long crMerchantId = (txnObject.has("crMerchantId") ? txnObject.getLong("crMerchantId") : null);
				Long crBankId = (txnObject.has("crBankId") ? txnObject.getLong("crBankId") : null);
				String crCardPan = (txnObject.has("crCardPan") ? txnObject.getString("crCardPan") : null);
				String crDistributorName = (txnObject.has("crDistributorName") ? txnObject.getString("crDistributorName") : null);
				String crMerchantName = (txnObject.has("crMerchantName") ? txnObject.getString("crMerchantName") : null);
				String crBankName = (txnObject.has("crBankName") ? txnObject.getString("crBankName") : null);
				/*------------------------------------*/
				String drCardPan = (txnObject.has("drCardPan") ? txnObject.getString("drCardPan") : null);
				String drDistributorName = (txnObject.has("drDistributorName") ? txnObject.getString("drDistributorName") : null);
				String drMerchantName = (txnObject.has("drMerchantName") ? txnObject.getString("drMerchantName") : null);
				String drBankName = (txnObject.has("drBankName") ? txnObject.getString("drBankName") : null);
				Long drCardId = (txnObject.has("drCardId") ? txnObject.getLong("drCardId") : null);
				Long drDistributorAccountId = (txnObject.has("drDistributorAccountId") ? txnObject.getLong("drDistributorAccountId") : null);
				Long drDistributorId = (txnObject.has("drDistributorId") ? txnObject.getLong("drDistributorId") : null);
				Long drMerchantId = (txnObject.has("drMerchantId") ? txnObject.getLong("drMerchantId") : null);
				Long drBankId = (txnObject.has("drBankId") ? txnObject.getLong("drBankId") : null);
				Integer paymentMeans = (txnObject.has("paymentMeans") ? txnObject.getInt("paymentMeans") : null);
				String carPlateNumber = (txnObject.has("carPlateNumber") ? txnObject.getString("carPlateNumber") : null);
				String expectedCarPlateNumber = (txnObject.has("expectedCarPlateNumber") ? txnObject.getString("expectedCarPlateNumber") : null);
				Integer nfraCurrency = (txnObject.has("nfraCurrency") ? txnObject.getInt("nfraCurrency") : null);
				Double trafficExceptionAmountApplied = (txnObject.has("trafficExceptionAmountApplied") ? txnObject.getDouble("trafficExceptionAmountApplied") : null);
				Double promotionAmountApplied = (txnObject.has("promotionAmountApplied") ? txnObject.getDouble("promotionAmountApplied") : null);
				Long trafficExceptionId = (txnObject.has("trafficExceptionId") ? txnObject.getLong("trafficExceptionId") : null);
				Long promotionId = (txnObject.has("promotionId") ? txnObject.getLong("promotionId") : null);
				String extraDetails = (txnObject.has("extraDetails") ? txnObject.getString("extraDetails") : null);
				Integer serverOption = (txnObject.has("serverOption") ? txnObject.getInt("serverOption") : null);
				String receiptNo = (txnObject.has("receiptNo") ? txnObject.getString("receiptNo") : null);
				
				
				String qry = "INSERT INTO transactions (amount, carPlateNumber, channel, crBankId, crBankName, crCardId" +
						", crCardPan, crDistributorAccountId, crDistributorId, crDistributorName" +
						", crMerchantId, crMerchantName, created_at, deleted_at, deviceCode" +
						", deviceId, drBankId, drBankName, drCardId, drCardPan, drDistributorAccountId" +
						", drDistributorId, drDistributorName, drMerchantId, drMerchantName, endRoute" +
						", exceptionAmountApplied, exceptionId, expectedCarPlateNumber, fixedCharge" +
						", messageRequest, messageResponse, narration, nfraCurrency, onUsTransaction, orderRef, paymentMeans" +
						", promotionAmountApplied, promotionId, receipientTransactingBankId, receiptNo" +
						", responseCode, serviceType, startRoute, status, tollLane, trafficExceptionAmountApplied" +
						", trafficExceptionId, trafficSchemeId, trafficSchemeName, transactingBankId, transactingUserName" +
						", transactionDate, transactionDetail, transactionFee, transactionRef, updated_at, userId" +
						", card_id, device_id, distributor_id, merchant_id, trafficScheme_id, transactingUser_id" +
						", extraDetails, serverOption) VALUES (" +
						":amount, :carPlateNumber, :channel, :crBankId, :crBankName, :crCardId, " +
						":crCardPan, :crDistributorAccountId, :crDistributorId, :crDistributorName, " +
						":crMerchantId, :crMerchantName, :created_at, :deleted_at, :deviceCode, " +
						":deviceId, :drBankId, :drBankName, :drCardId, :drCardPan, :drDistributorAccountId, " +
						":drDistributorId, :drDistributorName, :drMerchantId, :drMerchantName, :endRoute, " +
						":trafficExceptionAmountApplied, :trafficExceptionId, :expectedCarPlateNumber, :fixedCharge, " +
						":messageRequest, :messageResponse, :narration, :nfraCurrency, :onUsTransaction, :orderRef, :paymentMeans, " +
						":promotionAmountApplied, :promotionId, :receipientTransactingBankId, :receiptNo, " +
						":responseCode, :serviceType, :startRoute, :status, :tollLane, :trafficExceptionAmountApplied, " +
						":trafficExceptionId, :trafficSchemeId, :trafficSchemeName, :transactingBankId, :transactingUserName, " +
						":transactionDate, :transactionDetail, :transactionFee, :transactionRef, :updated_at, :userId, " +
						":card, :deviceId, :distributor, :merchant, :trafficSchemeId, :transactingUser, :extraDetails, :serverOption)";
				
				/*Query query = session.createSQLQuery(qry);
				query.setParameter("amount", amount);
				query.setParameter("carPlateNumber", carPlateNumber);
				query.setParameter("channel", channel);
				query.setParameter("crBankId", crBankId);
				query.setParameter("crBankName", crBankName);
				query.setParameter("crCardId", crCardId);
				query.setParameter("crCardPan", crCardPan);
				query.setParameter("crDistributorAccountId", crDistributorAccountId);
				query.setParameter("crDistributorId", crDistributorId);
				query.setParameter("crDistributorName", crDistributorName);
				query.setParameter("crMerchantId", crMerchantId);
				query.setParameter("crMerchantName", crMerchantName);
				query.setParameter("created_at", created_at);
				query.setParameter("deleted_at", deleted_at);
				query.setParameter("deviceCode", deviceCode);
				query.setParameter("deviceId", deviceId);
				query.setParameter("drBankId", drBankId);
				query.setParameter("drBankName", drBankName);
				query.setParameter("drCardId", drCardId);
				query.setParameter("drCardPan", drCardPan);
				query.setParameter("drDistributorAccountId", drDistributorAccountId);
				query.setParameter("drDistributorId", drDistributorId);
				query.setParameter("drDistributorName", drDistributorName);
				query.setParameter("drMerchantId", drMerchantId);
				query.setParameter("drMerchantName", drMerchantName);
				query.setParameter("endRoute", endRoute);
				query.setParameter("trafficExceptionAmountApplied", trafficExceptionAmountApplied);
				query.setParameter("trafficExceptionId", trafficExceptionId);
				query.setParameter("expectedCarPlateNumber", expectedCarPlateNumber);
				query.setParameter("fixedCharge", fixedCharge);
				query.setParameter("messageRequest", messageRequest);
				query.setParameter("messageResponse", messageResponse);
				query.setParameter("narration", narration);
				query.setParameter("nfraCurrency", nfraCurrency);
				query.setParameter("onUsTransaction", onUsTransaction);
				query.setParameter("orderRef", orderRef);
				query.setParameter("paymentMeans", paymentMeans);
				query.setParameter("promotionAmountApplied", promotionAmountApplied);
				query.setParameter("promotionId", promotionId);
				query.setParameter("receipientTransactingBankId", receipientTransactingBankId);
				query.setParameter("receiptNo", receiptNo);
				query.setParameter("responseCode", responseCode);
				query.setParameter("serviceType", serviceType);
				query.setParameter("startRoute", startRoute);
				query.setParameter("status", status);
				query.setParameter("tollLane", tollLane);
				query.setParameter("trafficExceptionAmountApplied", trafficExceptionAmountApplied);
				query.setParameter("trafficExceptionId", trafficExceptionId);
				query.setParameter("trafficSchemeId", trafficSchemeId);
				query.setParameter("trafficSchemeName", trafficSchemeName);
				query.setParameter("transactingBankId", transactingBankId);
				query.setParameter("transactingUserName", transactingUserName);
				query.setParameter("transactionDate", transactionDate);
				query.setParameter("transactionDetail", transactionDetail);
				query.setParameter("transactionFee", transactionFee);
				query.setParameter("transactionRef", transactionRef);
				query.setParameter("updated_at", updated_at);
				query.setParameter("userId", userId);
				query.setParameter("card", card);
				query.setParameter("deviceId", deviceId);
				query.setParameter("distributor", distributor);
				query.setParameter("merchant", merchant);
				query.setParameter("trafficSchemeId", trafficSchemeId);
				query.setParameter("transactingUser", transactingUser);
				query.setParameter("extraDetails", extraDetails);
				query.setParameter("serverOption", serverOption);
				query.executeUpdate();*/
				
				transaction.setAmount(amount);
				transaction.setCarPlateNumber(carPlateNumber);
				transaction.setChannel(channel!=null ? Channel.values()[channel] : null);
				transaction.setCrBankId(crBankId);
				transaction.setCrBankName(crBankName);
				transaction.setCrCardId(crCardId);
				transaction.setCrCardPan(crCardPan);
				transaction.setCrDistributorAccountId(crDistributorAccountId);
				transaction.setCrDistributorId(crDistributorId);
				transaction.setCrDistributorName(crDistributorName);
				transaction.setCrMerchantId(crMerchantId);
				transaction.setCrMerchantName(crMerchantName);
				transaction.setCreated_at(created_at);
				transaction.setDeleted_at(deleted_at);
				transaction.setDeviceCode(deviceCode);
				transaction.setDeviceId(deviceId);
				transaction.setDrBankId(drBankId);
				transaction.setDrBankName(drBankName);
				transaction.setDrCardId(drCardId);
				transaction.setDrCardPan(drCardPan);
				transaction.setDrDistributorAccountId(drDistributorAccountId);
				transaction.setDrDistributorId(drDistributorId);
				transaction.setDrDistributorName(drDistributorName);
				transaction.setDrMerchantId(drMerchantId);
				transaction.setDrMerchantName(drMerchantName);
				transaction.setEndRoute(endRoute);
				transaction.setExceptionAmountApplied(trafficExceptionAmountApplied);
				transaction.setExceptionId(trafficExceptionId);
				transaction.setExpectedCarPlateNumber(expectedCarPlateNumber);
				transaction.setFixedCharge(fixedCharge);
				transaction.setMessageRequest(messageRequest);
				transaction.setMessageResponse(messageResponse);
				transaction.setNarration(narration);
				transaction.setNFRACurrency(nfraCurrency==null ? null : NFRACurrency.values()[nfraCurrency]);
				transaction.setOnUsTransaction(onUsTransaction);
				transaction.setOrderRef(orderRef);
				transaction.setPaymentMeans(paymentMeans==null ? null : PaymentMeans.values()[paymentMeans]);
				transaction.setPromotionAmountApplied(promotionAmountApplied);
				transaction.setPromotionId(promotionId);
				transaction.setReceipientTransactingBankId(receipientTransactingBankId);
				transaction.setReceiptNo(receiptNo);
				transaction.setResponseCode(responseCode);
				transaction.setServiceType(serviceType==null ? null : ServiceType.values()[serviceType]);
				transaction.setStartRoute(startRoute);
				transaction.setStatus(status==null ? null : TransactionStatus.values()[status]);
				transaction.setTollLane(tollLane);
				transaction.setExceptionAmountApplied(trafficExceptionAmountApplied);
				transaction.setExceptionId(trafficExceptionId);
				transaction.setTrafficSchemeId(trafficSchemeId);
				transaction.setTrafficSchemeName(trafficSchemeName);
				transaction.setTransactingBankId(transactingBankId);
				transaction.setTransactingUserName(transactingUserName);
				transaction.setTransactionDate(transactionDate);
				transaction.setTransactionDetail(transactionDetail);
				transaction.setTransactionFee(transactionFee);
				transaction.setTransactionRef(transactionRef);
				transaction.setUpdated_at(updated_at);
				transaction.setUserId(userId);
				
				ECard ecard1 = null;
				if(card!=null)
					ecard1 = (ECard)swpService2.getRecordById(ECard.class, card);
				
				transaction.setCard(ecard1);
				transaction.setDeviceId(deviceId);
				
				Distributor distributr = null;
				if(distributor!=null)
					distributr = (Distributor)swpService2.getRecordById(Distributor.class, distributor);
				transaction.setDistributor(distributr);
				
				Merchant merchnt = null;
				if(merchant!=null)
					merchnt = (Merchant)swpService2.getRecordById(Merchant.class, merchant);
				transaction.setMerchant(merchnt);
				transaction.setTrafficSchemeId(trafficSchemeId);
				
				User transactingUsr = null;
				if(transactingUser!=null)
					transactingUsr = (User)swpService2.getRecordById(User.class, transactingUser);
				
				transaction.setTransactingUser(transactingUsr);
				transaction.setExtraDetails(extraDetails);
				transaction.setServerOption(serverOption);
				transaction = (Transaction)swpService2.createNewRecord(transaction);
				
				if(serviceType.equals(ServiceType.CARD_DEBIT_AT_TOLL.ordinal()))
				{
					sdf = new SimpleDateFormat("yyyy-MM");
	    			String currentMonthIndex = sdf.format(new Date());
	    			
	    			ECard ecard = null;
	    			//qry = "Select tp from ECard tp where tp.id = " + drCardId;
	    			//ecard = (ECard)session.createQuery(qry).uniqueResult();
	    			ecard = (ECard)swpService2.getRecordById(ECard.class, drCardId);
	    			
					if(ecard.getCurrentMonthIndex()==currentMonthIndex)
					{
						ecard.setCurrentMonthTollDebitTransactionCount(ecard.getCurrentMonthTollDebitTransactionCount() + 1);
					}
					else
					{
						ecard.setCurrentMonthTollDebitTransactionCount(1);
						ecard.setCurrentMonthIndex(currentMonthIndex);
					}
					
					
					if(ecard.getCurrentDebt()!=null && ecard.getCurrentDebt()>0)
					{
						ecard.setCurrentBalance(0.00);
						ecard.setCurrentDebt(ecard.getCurrentDebt() + amount);
						
					}
					else
					{
						Double currentBal = ecard.getCurrentBalance();		
						Double currentDebt = ecard.getCurrentDebt();
						if(currentBal >= amount)
						{
							ecard.setCurrentBalance(ecard.getCurrentBalance() - amount);
						}
						else if(currentBal > 0)
						{
							Double bal = amount - currentBal;
							ecard.setCurrentBalance(0.00);
							ecard.setCurrentDebt(bal);
						}
					}
					ecard.setTotalDebited((ecard.getTotalDebited()==null ? 0 : ecard.getTotalDebited()) + amount);
					ecard.setLastDebitDate(transactionDate);
					//session.update(ecard);
					swpService2.updateRecord(ecard);
				}
				else if(serviceType.equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS.ordinal()))
				{
					ECard ecard = null;
	    			qry = "Select tp from ECard tp where tp.id = " + card;
	    			//ecard = (ECard)session.createQuery(qry).uniqueResult();
	    			ecard = (ECard)swpService2.getRecordById(ECard.class, card);
	    			
	    			//ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
					//log.info(69);
	    			Double currentDebt = ecard.getCurrentDebt();
	    			Double currentBal = ecard.getCurrentBalance();
	    			
	    			if(ecard.getCurrentDebt()!=null && ecard.getCurrentDebt()>0)
	    			{
	    				if(ecard.getCurrentDebt() >= amount)
	    				{
	    					
	    					
	    					currentDebt = currentDebt - amount;
	    					currentBal = 0.00;
	    					
	    				}
	    				else if(ecard.getCurrentDebt() < amount)
	    				{
	    					currentBal = amount - currentDebt;
	    					currentDebt = 0.00;
	    				}
	    			}
	    			else// if(current debt <=0)
	    			{
	    				currentDebt = 0.00;
	    				currentBal = currentBal + amount;
	    			}
	    			
					ecard.setCurrentBalance(currentBal);
					ecard.setCurrentDebt(currentDebt);
	    			
	    			
	    			/*if(ecard.getCurrentDebt()!=null && ecard.getCurrentDebt()>0)
					{
	    				Double currentBal = ecard.getCurrentBalance();		
						Double currentDebt = ecard.getCurrentDebt();
						
						ecard.setCurrentBalance(0.00);
						ecard.setCurrentDebt(ecard.getCurrentDebt() + amount);
						
					}
					else
					{
						Double currentBal = ecard.getCurrentBalance();		
						Double currentDebt = ecard.getCurrentDebt();
						if(currentBal >= amount)
						{
							ecard.setCurrentBalance(ecard.getCurrentBalance() - amount);
						}
						else if(currentBal > 0)
						{
							Double bal = amount - currentBal;
							ecard.setCurrentBalance(0.00);
							ecard.setCurrentDebt(bal);
						}
					}*/
	    			ecard.setLastCreditDate(transactionDate);
					ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
					log.info(70);
					//session.update(ecard);
					swpService2.updateRecord(ecard);
				}
				else if(serviceType.equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS.ordinal()))
				{
					ECard ecard = null;
	    			qry = "Select tp from ECard tp where tp.id = " + card;
	    			//ecard = (ECard)session.createQuery(qry).uniqueResult();
	    			ecard = (ECard)swpService2.getRecordById(ECard.class, card);
	    			
	    			
	    			Double currentDebt = ecard.getCurrentDebt();
	    			Double currentBal = ecard.getCurrentBalance();
	    			
	    			if(ecard.getCurrentDebt()!=null && ecard.getCurrentDebt()>0)
	    			{
	    				if(ecard.getCurrentDebt() >= amount)
	    				{
	    					currentDebt = currentDebt - amount;
	    					currentBal = 0.00;
	    				}
	    				else if(ecard.getCurrentDebt() < amount)
	    				{
	    					currentBal = amount - currentDebt;
	    					currentDebt = 0.00;
	    				}
	    			}
	    			else// if(current debt <=0)
	    			{
	    				currentDebt = 0.00;
	    				currentBal = currentBal + amount;
	    			}
	    			
					ecard.setCurrentBalance(currentBal);
					ecard.setCurrentDebt(currentDebt);
					
					
	    			/*if(ecard.getCurrentDebt()!=null && ecard.getCurrentDebt()>0)
	    			{
	    				Double currDebt = ecard.getCurrentDebt();
	    				Double creditAmount = amount - ecard.getCurrentDebt();
	    				if(creditAmount>=0)
	    				{
	    					ecard.setCurrentDebt(0.00);
	    					ecard.setCurrentBalance(creditAmount);
	    				}
	    				else
	    				{
	    					ecard.setCurrentDebt(creditAmount);
	    					ecard.setCurrentBalance(0.00);
	    				}
	    			}
	    			else
	    			{
	    				ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
	    			}*/
	    			ecard.setLastCreditDate(transactionDate);
					ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
					swpService2.updateRecord(ecard);
					//session.update(ecard);
					
					qry = "Select tp from Account tp where tp.distributor.id = " + drDistributorAccountId;
					log.info("2. QRY = " + qry);
					//com.probase.nrfa.models.Account distributorAcctCashCollector = (com.probase.nrfa.models.Account)(session.createQuery(qry)).uniqueResult();
					Account distributorAcctCashCollector = (Account)swpService2.getUniqueRecordByHQL(qry);
					
					distributorAcctCashCollector.setCurrentBalance(distributorAcctCashCollector.getCurrentBalance() - amount);
				}
				else if(serviceType.equals(ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS.ordinal()))
				{
					ECard ecard = null;
	    			//qry = "Select tp from ECard tp where tp.id = " + crCardId;
	    			//ecard = (ECard)session.createQuery(qry);
					//ecard = (ECard)session.get(ECard.class, crCardId);
					ecard = (ECard)swpService2.getRecordById(ECard.class, card);
	    			
					
					
					Double currentDebt = ecard.getCurrentDebt();
	    			Double currentBal = ecard.getCurrentBalance();
	    			
	    			if(ecard.getCurrentDebt()!=null && ecard.getCurrentDebt()>0)
	    			{
	    				if(ecard.getCurrentDebt() >= amount)
	    				{
	    					currentDebt = currentDebt - amount;
	    					currentBal = 0.00;
	    				}
	    				else if(ecard.getCurrentDebt() < amount)
	    				{
	    					currentBal = amount - currentDebt;
	    					currentDebt = 0.00;
	    				}
	    			}
	    			else// if(current debt <=0)
	    			{
	    				currentDebt = 0.00;
	    				currentBal = currentBal + amount;
	    			}
	    			
					ecard.setCurrentBalance(currentBal);
					ecard.setCurrentDebt(currentDebt);
	    			
	    			/*if(ecard.getCurrentDebt()!=null && ecard.getCurrentDebt()>0)
	    			{
	    				Double currDebt = ecard.getCurrentDebt();
	    				Double creditAmount = amount - ecard.getCurrentDebt();
	    				if(creditAmount>=0)
	    				{
	    					ecard.setCurrentDebt(0.00);
	    					ecard.setCurrentBalance(creditAmount);
	    				}
	    				else
	    				{
	    					ecard.setCurrentDebt(creditAmount);
	    					ecard.setCurrentBalance(0.00);
	    				}
	    			}
	    			else
	    			{
	    				ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
	    			}*/
	    			ecard.setLastCreditDate(transactionDate);
					ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
					//session.update(ecard);
					swpService2.updateRecord(ecard);
					
					qry = "Select tp from Account tp where tp.distributor.id = " + drDistributorAccountId;
					//log.info("2. QRY = " + qry);
					//com.probase.nrfa.models.Account distributorAcctCashCollector = (com.probase.nrfa.models.Account)(session.createQuery(qry)).uniqueResult();
					Account distributorAcctCashCollector = (Account)swpService2.getUniqueRecordByHQL(qry);
					distributorAcctCashCollector.setCurrentBalance(distributorAcctCashCollector.getCurrentBalance() - amount);
					swpService2.updateRecord(distributorAcctCashCollector);
				}
				else if(serviceType.equals(ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_NOTONUS.ordinal()))
				{
					ECard ecard = null;
	    			//qry = "Select tp from ECard tp where tp.id = " + crCardId;
	    			//ecard = (ECard)session.createQuery(qry);
					ecard = (ECard)swpService2.getRecordById(ECard.class, card);
	    			
					
					Double currentDebt = ecard.getCurrentDebt();
	    			Double currentBal = ecard.getCurrentBalance();
	    			
	    			if(ecard.getCurrentDebt()!=null && ecard.getCurrentDebt()>0)
	    			{
	    				if(ecard.getCurrentDebt() >= amount)
	    				{
	    					currentDebt = currentDebt - amount;
	    					currentBal = 0.00;
	    				}
	    				else if(ecard.getCurrentDebt() < amount)
	    				{
	    					currentBal = amount - currentDebt;
	    					currentDebt = 0.00;
	    				}
	    			}
	    			else// if(current debt <=0)
	    			{
	    				currentDebt = 0.00;
	    				currentBal = currentBal + amount;
	    			}
	    			
					ecard.setCurrentBalance(currentBal);
					ecard.setCurrentDebt(currentDebt);
	    			/*if(ecard.getCurrentDebt()!=null && ecard.getCurrentDebt()>0)
	    			{
	    				Double currDebt = ecard.getCurrentDebt();
	    				Double creditAmount = amount - ecard.getCurrentDebt();
	    				if(creditAmount>=0)
	    				{
	    					ecard.setCurrentDebt(0.00);
	    					ecard.setCurrentBalance(creditAmount);
	    				}
	    				else
	    				{
	    					ecard.setCurrentDebt(creditAmount);
	    					ecard.setCurrentBalance(0.00);
	    				}
	    			}
	    			else
	    			{
	    				ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
	    			}*/
	    			ecard.setLastCreditDate(transactionDate);
					ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
					swpService2.updateRecord(ecard);
				}
				else if(serviceType.equals(ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_DISTRIBUTOR_ACCOUNT.ordinal()))//ONUS
				{
					//String hql = "Select tp from Account tp WHERE tp.id = '" + crDistributorAccountId + "'";
					//Account distributorAccount= (Account)session.createQuery(hql);
					Account distributorAccount = (Account)swpService2.getRecordById(Account.class, crDistributorAccountId);
					if(distributorAccount!=null)
					{
						distributorAccount.setCurrentBalance(distributorAccount.getCurrentBalance() + amount);
						swpService2.updateRecord(distributorAccount);
					}
				}
				/*transaction.setTransactionRef(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setOrderRef(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setChannel(txnObject.has("distributorCode") ? Channel.values()[txnObject.getInt("distributorCode")] : null);
				transaction.setTransactionDate(txnObject.has("distributorCode") ? sdf.parse(txnObject.getString("distributorCode")) : null);
				transaction.setServiceType(txnObject.has("distributorCode") ? ServiceType.values()[txnObject.getInt("distributorCode")] : null);
				transaction.setTransactingUser(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setTransactingUserName(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setUserId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setStatus(txnObject.has("distributorCode") ? TransactionStatus.values()[txnObject.getInt("distributorCode")] : null);
				transaction.setCard(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setDevice(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setDistributor(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setMerchant(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setDeviceId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setDeviceCode(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setStartRoute(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setEndRoute(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setTollLane(txnObject.has("distributorCode") ? txnObject.getInt("distributorCode") : null);
				transaction.setMessageRequest(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setMessageResponse(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setFixedCharge(txnObject.has("distributorCode") ? txnObject.getDouble("distributorCode") : null);
				transaction.setTransactionFee(txnObject.has("distributorCode") ? txnObject.getDouble("distributorCode") : null);
				transaction.setAmount(txnObject.has("distributorCode") ? txnObject.getDouble("distributorCode") : null);
				transaction.setResponseCode(txnObject.has("distributorCode") ? txnObject.getInt("distributorCode") : null);
				transaction.setOnUsTransaction(txnObject.has("distributorCode") ? txnObject.getBoolean("distributorCode") : null);
				transaction.setTransactingBankId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setReceipientTransactingBankId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setTransactionDetail(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setNarration(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setTrafficScheme(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setTrafficSchemeId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setTrafficSchemeName(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				
				/*Debit card distributor account*/
				/*transaction.setCrCardId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setCrDistributorAccountId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setCrDistributorId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setCrMerchantId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setCrBankId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setCrCardPan(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setCrDistributorName(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setCrMerchantName(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setCrBankName(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				/*------------------------------------*/
				/*transaction.setDrCardPan(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setDrDistributorName(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setDrMerchantName(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setDrBankName(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setDrCardId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setDrDistributorAccountId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setDrDistributorId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setDrMerchantId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setDrBankId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setPaymentMeans(txnObject.has("distributorCode") ? PaymentMeans.values()[txnObject.getInt("distributorCode")] : null);
				transaction.setCarPlateNumber(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setExpectedCarPlateNumber(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setNFRACurrency(txnObject.has("distributorCode") ? NFRACurrency.values()[txnObject.getInt("distributorCode")] : null);
				transaction.setExceptionAmountApplied(txnObject.has("distributorCode") ? txnObject.getDouble("distributorCode") : null);
				transaction.setPromotionAmountApplied(txnObject.has("distributorCode") ? txnObject.getDouble("distributorCode") : null);
				transaction.setExceptionId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setPromotionId(txnObject.has("distributorCode") ? txnObject.getLong("distributorCode") : null);
				transaction.setExtraDetails(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				transaction.setServerOption(txnObject.has("distributorCode") ? txnObject.getInt("distributorCode") : null);
				transaction.setReceiptNo(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				
				if(ecard==null)
					ecard = (ECard)session.save(ecard);
				else
					session.saveOrUpdate(ecard);*/
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForECardSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		log.info("tnObjects===" + txnObjects.toString());
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				log.info("tnObject===" + txnObjects.getJSONObject(j+"").toString());
				ECard ecard = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from ECard tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//ECard ecard1 = (ECard)session.createQuery(qry);
				ECard ecard1 = (ECard)swpService2.getRecordById(ECard.class, id);
				
				if(ecard1==null)
				{
					ecard = new ECard();
					ecard.setId(id);
				}
				else
				{
					ecard = ecard1;
				}
				
				
				ecard.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				ecard.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				
				ecard.setBatchId(txnObject.has("batchId") ? txnObject.getString("batchId") : null);
				Long merchantId = txnObject.has("merchant") ? txnObject.getLong("merchant") : null;
				Merchant merchant = null;
				//qry = "Select tp from Merchant tp where tp.id = " + merchantId;
				//merchant = (Merchant)session.createQuery(qry);
				if(merchantId!=null)
					merchant = (Merchant)swpService2.getRecordById(Merchant.class, merchantId);
				
				ecard.setMerchant(merchant);
				
				Long distributorId = txnObject.has("distributor") ? txnObject.getLong("distributor") : null;
				Distributor distributor = null;
				//qry = "Select tp from Distributor tp where tp.id = " + distributorId;
				//distributor = (Distributor)session.createQuery(qry);
				if(distributorId!=null)
					distributor = (Distributor)swpService2.getRecordById(Distributor.class, distributorId);
				
				ecard.setDistributor(distributor);
				ecard.setDistributorType(txnObject.has("distributorType") ? DistributorType.values()[txnObject.getInt("distributorType")] : null);
				
				Long acquirerId = txnObject.has("acquirer") ? txnObject.getLong("acquirer") : null;
				Acquirer acquirer = null;
				//qry = "Select tp from Acquirer tp where tp.id = " + acquirerId;
				//acquirer = (Acquirer)session.createQuery(qry);
				if(acquirerId!=null)
					acquirer = (Acquirer)swpService2.getRecordById(Acquirer.class, acquirerId);
				
				ecard.setAcquirer(acquirer);
				
				Long cardSchemeId = txnObject.has("cardScheme") ? txnObject.getLong("cardScheme") : null;
				CardScheme cardScheme = null;
				//qry = "Select tp from CardScheme tp where tp.id = " + cardSchemeId;
				//cardScheme = (CardScheme)session.createQuery(qry);
				if(cardSchemeId!=null)
					cardScheme = (CardScheme)swpService2.getRecordById(CardScheme.class, cardSchemeId);
				
				ecard.setCardScheme(cardScheme);
				ecard.setCardStatus(txnObject.has("cardStatus") ? CardStatus.values()[txnObject.getInt("cardStatus")] : null);
				ecard.setCardType(txnObject.has("cardType") ? CardType.values()[txnObject.getInt("cardType")] : null);
				ecard.setPan(txnObject.has("pan") ? txnObject.getString("pan") : null);
				ecard.setPin(txnObject.has("pin") ? txnObject.getString("pin") : null);
				ecard.setExpiryDate(txnObject.has("expiryDate") ? sdf1.parse(txnObject.getString("expiryDate")) : null);
				ecard.setCvv(txnObject.has("cvv") ? txnObject.getString("cvv") : null);
				ecard.setOtp(txnObject.has("otp") ? txnObject.getString("otp") : null);
				ecard.setCustomerMobileNumber(txnObject.has("customerMobileNumber") ? txnObject.getString("customerMobileNumber") : null);
				ecard.setMerchantCode(txnObject.has("merchantCode") ? txnObject.getString("merchantCode") : null);
				ecard.setMerchantId(txnObject.has("merchantId") ? txnObject.getLong("merchantId") : null);
				ecard.setDistributorCode(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				ecard.setDistributorId(txnObject.has("distributorId") ? txnObject.getLong("distributorId") : null);
				ecard.setLastCreditDate(txnObject.has("lastCreditDate") ? sdf1.parse(txnObject.getString("lastCreditDate")) : null);
				ecard.setLastFiveTransactions(txnObject.has("lastFiveTransactions") ? txnObject.getString("lastFiveTransactions") : null);
				ecard.setChangedCardPin(txnObject.has("changedCardPin") ? txnObject.getBoolean("changedCardPin") : null);
				ecard.setUniqueId(txnObject.has("uniqueId") ? txnObject.getString("uniqueId") : null);
				ecard.setCurrentBalance(txnObject.has("currentBalance") ? txnObject.getDouble("currentBalance") : null);
				ecard.setTotalCredited(txnObject.has("totalCredited") ? txnObject.getDouble("totalCredited") : null);
				ecard.setTotalDebited(txnObject.has("totalDebited") ? txnObject.getDouble("totalDebited") : null);
				ecard.setCurrentDebt(txnObject.has("currentDebt") ? txnObject.getDouble("currentDebt") : null);
				ecard.setLastDebitDate(txnObject.has("lastDebitDate") ? sdf1.parse(txnObject.getString("lastDebitDate")) : null);
				
				if(ecard1==null)
					swpService2.createNewRecord(ecard);
				else
					swpService2.updateRecord(ecard);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForTrafficExceptionSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				TrafficException trafficException = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from TrafficException tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//TrafficException trafficException1 = (TrafficException)session.createQuery(qry);
				TrafficException trafficException1 = (TrafficException)swpService2.getRecordById(TrafficException.class, id);
				
				if(trafficException1==null)
				{
					trafficException = new TrafficException();
					trafficException.setId(id);
				}
				else
				{
					trafficException = trafficException1;
				}
				
				
				trafficException.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				trafficException.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				
				trafficException.setCarOwnerDetails(txnObject.has("carOwnerDetails") ? txnObject.getString("carOwnerDetails") : null);
				trafficException.setDiscountPercentageApplicable(txnObject.has("discountPercentageApplicable") ? txnObject.getDouble("discountPercentageApplicable") : null);
				trafficException.setEcardId(txnObject.has("ecardId") ? txnObject.getLong("ecardId") : null);
				trafficException.setRouteCode(txnObject.has("routeCode") ? txnObject.getString("routeCode") : null);
				trafficException.setVehicleRegNo(txnObject.has("vehicleRegNo") ? txnObject.getString("vehicleRegNo") : null);
				trafficException.setUserMobileNo(txnObject.has("userMobileNo") ? txnObject.getString("userMobileNo") : null);
				trafficException.setUserFullName(txnObject.has("userFullName") ? txnObject.getString("userFullName") : null);
				
				
				Long userId = txnObject.has("setupByUser") ? txnObject.getLong("setupByUser") : null;
				//qry = "Select tp from User tp where tp.id = " + userId;
				//User user = (User)session.createQuery(qry);
				User user = (User)swpService2.getRecordById(User.class, userId);
				
				trafficException.setSetupByUser(user);
				
				if(trafficException==null)
					trafficException = (TrafficException)swpService2.createNewRecord(trafficException);
				else
					swpService2.updateRecord(trafficException);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForPromotionSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				Promotion promotion = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from Promotion tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//Promotion promotion1 = (Promotion)session.createQuery(qry);
				Promotion promotion1 = (Promotion)swpService2.getRecordById(Promotion.class, id);
				
				if(promotion1==null)
				{
					promotion = new Promotion();
					promotion.setId(id);
				}
				else
				{
					promotion = promotion1;
				}
				
				
				promotion.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				promotion.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				
				promotion.setPromotionName(txnObject.has("promotionName") ? txnObject.getString("promotionName") : null);
				promotion.setBaseRationaleCount(txnObject.has("baseRationaleCount") ? txnObject.getInt("baseRationaleCount") : null);
				
				Long cardSchemeId = txnObject.has("cardScheme") ? txnObject.getLong("cardScheme") : null;
				//qry = "Select tp from CardScheme tp where tp.id = " + cardSchemeId;
				//CardScheme cardScheme = (CardScheme)session.createQuery(qry);
				CardScheme cardScheme = null;
				if(cardSchemeId!=null)
					cardScheme = (CardScheme)swpService2.getRecordById(CardScheme.class, cardSchemeId);
				
				promotion.setCardScheme(cardScheme);
				promotion.setDescription(txnObject.has("description") ? txnObject.getString("description") : null);
				promotion.setDiscountPercentageApplicable(txnObject.has("discountPercentageApplicable") ? txnObject.getDouble("discountPercentageApplicable") : null);
				promotion.setEndDate(txnObject.has("endDate") ? sdf.parse(txnObject.getString("endDate")) : null);
				promotion.setEndRoute(txnObject.has("endRoute") ? txnObject.getString("endRoute") : null);
				promotion.setPromotionCode(txnObject.has("promotionCode") ? txnObject.getString("promotionCode") : null);
				promotion.setRouteCode(txnObject.has("routeCode") ? txnObject.getString("routeCode") : null);
				promotion.setStartDate(txnObject.has("startDate") ? sdf.parse(txnObject.getString("startDate")) : null);
				promotion.setEndRoute(txnObject.has("endRoute") ? txnObject.getString("endRoute") : null);
				promotion.setStartRoute(txnObject.has("startRoute") ? txnObject.getString("startRoute") : null);
				
				Long trafficSchemeId = txnObject.has("trafficScheme") ? txnObject.getLong("trafficScheme") : null;
				TrafficScheme trafficScheme = null;
				if(trafficSchemeId!=null)
				{
					//qry = "Select tp from TrafficScheme tp where tp.id = " + trafficSchemeId;
					//trafficScheme = (TrafficScheme)session.createQuery(qry);
					trafficScheme = (TrafficScheme)swpService2.getRecordById(TrafficScheme.class, trafficSchemeId);
				}
				
				promotion.setTrafficScheme(trafficScheme);
				
				Long userId = txnObject.has("setupByUser") ? txnObject.getLong("setupByUser") : null;
				//qry = "Select tp from User tp where tp.id = " + userId;
				//User user = (User)session.createQuery(qry);
				User user = (User)swpService2.getRecordById(User.class, userId);
				
				promotion.setSetupByUser(user);
				
				if(promotion1==null)
					promotion = (Promotion)swpService2.createNewRecord(promotion);
				else
					swpService2.updateRecord(promotion);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForTrafficTollPriceSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				TrafficTollPrice trafficTollPrice = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from TrafficTollPrice tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//TrafficTollPrice trafficTollPrice1 = (TrafficTollPrice)session.createQuery(qry);
				TrafficTollPrice trafficTollPrice1 = (TrafficTollPrice)swpService2.getRecordById(TrafficTollPrice.class, id);
				
				if(trafficTollPrice1==null)
				{
					trafficTollPrice = new TrafficTollPrice();
					trafficTollPrice.setId(id);
				}
				else
				{
					trafficTollPrice = trafficTollPrice1;
				}
				
				
				trafficTollPrice.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				trafficTollPrice.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				
				trafficTollPrice.setStartRouteName(txnObject.has("startRouteName") ? txnObject.getString("startRouteName") : null);
				trafficTollPrice.setEndRouteName(txnObject.has("endRouteName") ? txnObject.getString("endRouteName") : null);
				trafficTollPrice.setFeePrice(txnObject.has("feePrice") ? txnObject.getDouble("feePrice") : null);
				trafficTollPrice.setTollLane(txnObject.has("tollLane") ? txnObject.getInt("tollLane") : null);
				trafficTollPrice.setTrafficSchemeCode(txnObject.has("trafficSchemeCode") ? txnObject.getString("trafficSchemeCode") : null);
				trafficTollPrice.setTrafficSchemeName(txnObject.has("trafficSchemeName") ? txnObject.getString("trafficSchemeName") : null);
				trafficTollPrice.setRouteCode(txnObject.has("routeCode") ? txnObject.getString("routeCode") : null);
				trafficTollPrice.setStatus(txnObject.has("status") ? txnObject.getBoolean("status") : null);

				if(trafficTollPrice1==null)
					trafficTollPrice = (TrafficTollPrice)swpService2.createNewRecord(trafficTollPrice);
				else
					swpService2.updateRecord(trafficTollPrice);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForTrafficTollRouteLaneSyncIn(
			JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				TrafficTollRouteLane trafficTollRouteLane = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from TrafficTollRouteLane tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//TrafficTollRouteLane trafficTollRouteLane1 = (TrafficTollRouteLane)session.createQuery(qry);
				TrafficTollRouteLane trafficTollRouteLane1 = (TrafficTollRouteLane)swpService2.getRecordById(TrafficTollRouteLane.class, id);
				
				if(trafficTollRouteLane1==null)
				{
					trafficTollRouteLane = new TrafficTollRouteLane();
					trafficTollRouteLane.setId(id);
				}
				else
				{
					trafficTollRouteLane = trafficTollRouteLane1;
				}
				
				trafficTollRouteLane.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				trafficTollRouteLane.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				trafficTollRouteLane.setStartRouteName(txnObject.has("startRouteName") ? txnObject.getString("startRouteName") : null);
				trafficTollRouteLane.setEndRouteName(txnObject.has("endRouteName") ? txnObject.getString("endRouteName") : null);
				trafficTollRouteLane.setRouteCode(txnObject.has("routeCode") ? txnObject.getString("routeCode") : null);
				trafficTollRouteLane.setTollLane(txnObject.has("tollLane") ? txnObject.getInt("tollLane") : null);
				trafficTollRouteLane.setStatus(txnObject.has("status") ? txnObject.getBoolean("status") : null);
				
				if(trafficTollRouteLane1==null)
					trafficTollRouteLane = (TrafficTollRouteLane)swpService2.createNewRecord(trafficTollRouteLane);
				else
					swpService2.updateRecord(trafficTollRouteLane);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForTrafficTollRouteSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				TrafficTollRoute trafficTollRoute = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from TrafficTollRoute tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//TrafficTollRoute trafficTollRoute1 = (TrafficTollRoute)session.createQuery(qry);
				TrafficTollRoute trafficTollRoute1 = (TrafficTollRoute)swpService2.getRecordById(TrafficTollRoute.class, id);
				
				if(trafficTollRoute1==null)
				{
					trafficTollRoute = new TrafficTollRoute();
					trafficTollRoute.setId(id);
				}
				else
				{
					trafficTollRoute = trafficTollRoute1;
				}
				
				trafficTollRoute.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				trafficTollRoute.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				
				trafficTollRoute.setCity(txnObject.has("city") ? txnObject.getString("city") : null);
				trafficTollRoute.setDistrict(txnObject.has("district") ? txnObject.getString("district") : null);
				trafficTollRoute.setEndRouteName(txnObject.has("endRouteName") ? txnObject.getString("endRouteName") : null);
				trafficTollRoute.setStartRouteName(txnObject.has("startRouteName") ? txnObject.getString("startRouteName") : null);
				trafficTollRoute.setProvince(txnObject.has("province") ? txnObject.getString("province") : null);
				trafficTollRoute.setRouteCode(txnObject.has("routeCode") ? txnObject.getString("routeCode") : null);
				trafficTollRoute.setStatus(txnObject.has("status") ? txnObject.getBoolean("status") : null);
				
				if(trafficTollRoute1==null)
					swpService2.createNewRecord(trafficTollRoute);
				else
					swpService2.updateRecord(trafficTollRoute);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForTrafficSchemeSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				TrafficScheme trafficScheme = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from TrafficScheme tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//TrafficScheme trafficScheme1 = (TrafficScheme)session.createQuery(qry);
				TrafficScheme trafficScheme1 = (TrafficScheme)swpService2.getRecordById(TrafficScheme.class, id);
				
				if(trafficScheme1==null)
				{
					trafficScheme = new TrafficScheme();
					trafficScheme.setId(id);
				}
				else
				{
					trafficScheme = trafficScheme1;
				}
				
				trafficScheme.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				trafficScheme.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				trafficScheme.setSchemeAmount(txnObject.has("schemeAmount") ? txnObject.getDouble("schemeAmount") : null);
				trafficScheme.setSchemeCode(txnObject.has("schemeCode") ? txnObject.getString("schemeCode") : null);
				trafficScheme.setSchemeDetail(txnObject.has("schemeDetail") ? txnObject.getString("schemeDetail") : null);
				trafficScheme.setSchemeName(txnObject.has("schemeName") ? txnObject.getString("schemeName") : null);
				trafficScheme.setTrafficSchemeStatus(txnObject.has("trafficSchemeStatus") ? txnObject.getBoolean("trafficSchemeStatus") : null);
				trafficScheme.setCurrency(txnObject.has("currency") ? NFRACurrency.values()[txnObject.getInt("currency")] : null);
				
				if(trafficScheme1==null)
					trafficScheme = (TrafficScheme)swpService2.createNewRecord(trafficScheme);
				else
					swpService2.updateRecord(trafficScheme);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForAccountSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				Account account = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from Account tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//Account account1 = (Account)session.createQuery(qry);
				Account account1 = (Account)swpService2.getRecordById(Account.class, id);
				
				if(account1==null)
				{
					account = new Account();
					account.setId(id);
				}
				else
				{
					account = account1;
				}
				
				account.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				account.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				
				account.setAccountCount(txnObject.has("accountCount") ? txnObject.getInt("accountCount") : null);
				account.setAccountIdentifier(txnObject.has("accountIdentifier") ? txnObject.getString("accountIdentifier") : null);
				Long bankId = txnObject.has("bank") ? txnObject.getLong("bank") : null;
				Bank bank = null;
				//qry = "Select tp from Bank tp where tp.id = " + bankId;
				//bank = (Bank)session.createQuery(qry);
				bank = (Bank)swpService2.getRecordById(Bank.class, bankId);
				
				
				account.setBank(bank);
				account.setAccountType(txnObject.has("accountType") ? AccountType.values()[txnObject.getInt("accountType")] : null);
				account.setBranchCode(txnObject.has("branchCode") ? txnObject.getString("branchCode") : null);
				account.setCurrencyCode(txnObject.has("currencyCode") ? txnObject.getString("currencyCode") : null);
				
				Long distributorId = txnObject.has("distributor") ? txnObject.getLong("distributor") : null;
				Distributor distributor = null;
				//qry = "Select tp from Distributor tp where tp.id = " + distributorId;
				//distributor = (Distributor)session.createQuery(qry);
				distributor = (Distributor)swpService2.getRecordById(Distributor.class, distributorId);
				
				account.setDistributor(distributor);
				account.setDistributorId(txnObject.has("distributorId") ? txnObject.getLong("distributorId") : null);
				account.setOtp(txnObject.has("otp") ? txnObject.getString("otp") : null);
				account.setStatus(txnObject.has("status") ? AccountStatus.values()[txnObject.getInt("status")] : null);
				account.setCurrentBalance(txnObject.has("currentBalance") ? txnObject.getDouble("currentBalance") : null);
				
				if(account1==null)
					account = (Account)swpService2.createNewRecord(account);
				else
					swpService2.updateRecord(account);
				
				if(distributor!=null)
				{
					distributor.setDistributorBankAccount(account);
					swpService2.updateRecord(distributor);
				}
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForCustomerSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				Customer customer = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from Customer tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//Customer customer1 = (Customer)session.createQuery(qry);
				Customer customer1 = (Customer)swpService2.getRecordById(Customer.class, id);
				
				
				if(customer1==null)
				{
					customer = new Customer();
					customer.setId(id);
				}
				else
				{
					customer = customer1;
				}
				
				customer.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				customer.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				
				customer.setFirstName(txnObject.has("firstName") ? txnObject.getString("firstName") : null);
				customer.setLastName(txnObject.has("lastName") ? txnObject.getString("lastName") : null);
				customer.setContactEmail(txnObject.has("contactEmail") ? txnObject.getString("contactEmail") : null);
				customer.setContactMobile(txnObject.has("customerMobile") ? txnObject.getString("customerMobile") : null);
				customer.setCustomerType(txnObject.has("customerType") ? CustomerType.values()[txnObject.getInt("customerType")] : null);
				customer.setOtherName(txnObject.has("otherName") ? txnObject.getString("otherName") : null);
				customer.setStatus(txnObject.has("status") ? CustomerStatus.values()[txnObject.getInt("status")] : null);
				
				User user = null;
				Long userId = txnObject.has("user") ? txnObject.getLong("user") : null;
				//qry = "Select tp from User tp where tp.id = " + userId;
				//user = (User)session.createQuery(qry);
				if(userId!=null)
					user = (User)swpService2.getRecordById(User.class, userId);
				
				customer.setUser(user);
				customer.setVerificationNumber(txnObject.has("verificationNumber") ? txnObject.getString("verificationNumber") : null);
				customer.setCarPlateNumber(txnObject.has("carPlateNumber") ? txnObject.getString("carPlateNumber") : null);
				
				
				if(customer1==null)
					customer = (Customer)swpService2.createNewRecord(customer);
				else
					swpService2.updateRecord(customer);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}



	private static void handleForAssignCardToCustomerSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				Customer customer = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				
				customer = new Customer();
				customer.setId(id);
				customer.setFirstName(txnObject.has("firstName") ? txnObject.getString("firstName") : null);
				customer.setLastName(txnObject.has("lastName") ? txnObject.getString("lastName") : null);
				customer.setContactEmail(txnObject.has("contactEmail") ? txnObject.getString("contactEmail") : null);
				customer.setContactMobile(txnObject.has("customerMobile") ? txnObject.getString("customerMobile") : null);
				customer.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				customer.setCustomerType(txnObject.has("customerType") ? CustomerType.values()[txnObject.getInt("customerType")] : null);
				customer.setOtherName(txnObject.has("otherName") ? txnObject.getString("otherName") : null);
				customer.setStatus(txnObject.has("status") ? CustomerStatus.values()[txnObject.getInt("status")] : null);
				customer.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				customer.setUser(null);
				customer.setVerificationNumber(txnObject.has("verificationNumber") ? txnObject.getString("verificationNumber") : null);
				customer.setCarPlateNumber(txnObject.has("carPlateNumber") ? txnObject.getString("carPlateNumber") : null);
				customer = (Customer)swpService2.createNewRecord(customer);
				
				//String qry = "Select tp from Customer tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//Customer customer1 = (Customer)session.createQuery(qry);
				Long ecardId = txnObject.has("ecardId") ? txnObject.getLong("ecardId") : null;
				ECard ecard = (ECard)swpService2.getRecordById(ECard.class, ecardId);
				
				if(ecard!=null)
				{
					ecard.setCustomer(customer);
					ecard.setCustomerMobileNumber(txnObject.has("customerMobileNumber") ? txnObject.getString("customerMobileNumber") : null);
					ecard.setCardStatus(txnObject.has("cardStatus") ? CardStatus.values()[txnObject.getInt("cardStatus")] : null);
					ecard.setDefaultCarPlateNumber(txnObject.has("defaultCarPlateNumber") ? txnObject.getString("defaultCarPlateNumber") : null);
					swpService2.updateRecord(ecard);
				
				}
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	

	private static void handleForDeviceSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				Device device = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from Device tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//Device device1 = (Device)session.createQuery(qry);
				Device device1 = (Device)swpService2.getRecordById(Device.class, id);
				
				if(device1==null)
				{
					device = new Device();
					device.setId(id);
				}
				else
				{
					device = device1;
				}
				
				device.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				device.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				
				device.setDeviceCode(txnObject.has("deviceCode") ? txnObject.getString("deviceCode") : null);
				Integer deviceType = txnObject.has("deviceType") ? txnObject.getInt("deviceType") : null;
				device.setDeviceType(deviceType==null ? null : DeviceType.values()[deviceType]);
				Long distributorId = txnObject.has("distributor") ? txnObject.getLong("distributor") : null;
				
				Distributor distributor = null;
				//qry = "Select tp from Distributor tp where tp.id = " + distributorId;
				//distributor = (Distributor)session.createQuery(qry);
				if(distributorId!=null)
					distributor = (Distributor)swpService2.getRecordById(Distributor.class, distributorId);
				
				device.setDistributor(distributor);
				device.setDistributorCode(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				device.setDistributorId(txnObject.has("distributorId") ? txnObject.getLong("distributorId") : null);
				device.setDistributorName(txnObject.has("distributorName") ? txnObject.getString("distributorName") : null);
				device.setLastTransactions(txnObject.has("lastTransactions") ? txnObject.getString("lastTransactions") : null);
				device.setStatus(txnObject.has("status") ? DeviceStatus.values()[txnObject.getInt("status")] : null);

				if(deviceType!=null && device.getDeviceType().equals(DeviceType.WEB))
				{
					Merchant merchant = null;
					Long merchantId = txnObject.has("merchant") ? txnObject.getLong("merchant") : null;
					//qry = "Select tp from Merchant tp where tp.id = " + merchantId;
					//merchant = (Merchant)session.createQuery(qry);
					merchant = (Merchant)swpService2.getRecordById(Merchant.class, merchantId);
					
					device.setMerchant(merchant);
					device.setMerchantCode(txnObject.has("merchantCode") ? txnObject.getString("merchantCode") : null);
					device.setMerchantId(txnObject.has("merchantId") ? txnObject.getLong("merchantId") : null);
					device.setMerchantName(txnObject.has("merchantName") ? txnObject.getString("merchantName") : null);
					device.setTerminalApiKey(txnObject.has("terminalApiKey") ? txnObject.getString("terminalApiKey") : null);
					device.setStatus(txnObject.has("status") ? DeviceStatus.values()[txnObject.getInt("status")] : null);
				}

				Long setupUserId = txnObject.has("setupByUser") ? txnObject.getLong("setupByUser") : null;
				//qry = "Select tp from User tp where tp.id = " + setupUserId;
				//User user = (User)session.createQuery(qry);
				User user = (User)swpService2.getRecordById(User.class, setupUserId);
				device.setSetupByUser(user);
				device.setSetupByUserName(txnObject.has("setupByUserName") ? txnObject.getString("setupByUserName") : null);
				
				
				
				if(device1==null)
					device = (Device)swpService2.createNewRecord(device);
				else
					swpService2.updateRecord(device);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	
	
	

	private static void handleForDistributorSyncIn(JSONObject txnObjects, SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		log.info("txnObjects--->" + txnObjects.toString());
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				Distributor distributor = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				log.info("txnObject--->" + txnObject.toString());
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from Distributor tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//Distributor distributor1 = (Distributor)session.createQuery(qry);
				Distributor distributor1 = (Distributor)swpService2.getRecordById(Distributor.class, id);
				
				if(distributor1==null)
				{
					log.info("distributor1 ==null--->");
					distributor = new Distributor();
					distributor.setId(id);
				}
				else
				{
					log.info("distributor1 !=null--->");
					distributor = distributor1;
				}
				
				distributor.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				distributor.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				distributor.setContactEmail(txnObject.has("contactEmail") ? txnObject.getString("contactEmail") : null);
				distributor.setContactMobile(txnObject.has("contactMobile") ? txnObject.getString("contactMobile") : null);
				distributor.setContactAddress(txnObject.has("contactAddress") ? txnObject.getString("contactAddress") : null);
				distributor.setCity(txnObject.has("city") ? txnObject.getString("city") : null);
				distributor.setDistrict(txnObject.has("district") ? txnObject.getString("district") : null);
				distributor.setProvince(txnObject.has("province") ? txnObject.getString("province") : null);
				distributor.setCompanyName(txnObject.has("companyName") ? txnObject.getString("companyName") : null);
				distributor.setCompanyRegNo(txnObject.has("companyRegNo") ? txnObject.getString("companyRegNo") : null);
				distributor.setDistributorStatus(txnObject.has("distributorStatus") ? DistributorStatus.values()[txnObject.getInt("distributorStatus")] : null);
				distributor.setDistributorCode(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
				
				distributor.setFundingAccountType(txnObject.has("fundingAccountType") ? FundingAccountType.values()[txnObject.getInt("fundingAccountType")] : null);
				distributor.setContactFullName(txnObject.has("contactFullName") ? txnObject.getString("contactFullName") : null);
				distributor.setDistributorName(txnObject.has("distributorName") ? txnObject.getString("distributorName") : null);
				
				Long distributorMerchantId = txnObject.has("distributorMerchant") ? txnObject.getLong("distributorMerchant") : null;
				Merchant merchant = null;
				if(distributorMerchantId!=null)
				{
					//qry = "Select tp from Merchant tp where tp.id = " + distributorMerchantId;
					//merchant = (Merchant)session.createQuery(qry);
					merchant = (Merchant)swpService2.getRecordById(Merchant.class, distributorMerchantId);
				}
				
				distributor.setDistributorMerchant(merchant);
				distributor.setMerchantCode(txnObject.has("merchantCode") ? txnObject.getString("merchantCode") : null);
				distributor.setDistributorType(txnObject.has("distributorType") ? DistributorType.values()[txnObject.getInt("distributorType")] : null);
				
				
				Long createdByUserId = txnObject.has("createdByUserId") ? txnObject.getLong("createdByUserId") : null;
				User user = null;
				if(createdByUserId!=null)
				{
					//qry = "Select tp from User tp where tp.id = " + createdByUserId;
					//user = (User)session.createQuery(qry);
					user = (User)swpService2.getRecordById(User.class, createdByUserId);
				}
				distributor.setCreatedByUserId(user);
				distributor.setCreatedByUserName(txnObject.has("createdByUserName") ? txnObject.getString("createdByUserName") : null);
				distributor.setDistributorStatus(txnObject.has("distributorStatus") ? DistributorStatus.values()[txnObject.getInt("distributorStatus")] : null);
				
				Long distributorBankAccountId = txnObject.has("distributorBankAccount") ? txnObject.getLong("distributorBankAccount") : null;
				Account account = null;
				if(distributorBankAccountId!=null)
				{
					//qry = "Select tp from Account tp where tp.id = " + distributorBankAccountId;
					//account = (Account)session.createQuery(qry);
					account = (Account)swpService2.getRecordById(Account.class, distributorBankAccountId);
				}
				distributor.setDistributorBankAccount(account);
				//log.info("distributor =--->" + (new Gson().toJson(distributor)));
				if(distributor1==null)
				{
					distributor = (Distributor)swpService2.createNewRecord(distributor);
					log.info("distributor =--->" + (new Gson().toJson(distributor)));
				}
				else
				{
					log.info("distributor updated");
					swpService2.updateRecord(distributor);
				}
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.error(e);
		}
	}
	
	


	private static void handleForCardSchemeSyncIn(JSONObject txnObjects, SwpService swpService) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		System.out.println("txnObjects === " + txnObjects.toString());
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				CardScheme cardScheme = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				System.out.println("txnObject === " + txnObject.toString());
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from CardScheme tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//CardScheme cardScheme1 = (CardScheme)session.createQuery(qry);
				CardScheme cardScheme1 = (CardScheme)swpService.getRecordById(CardScheme.class, id);
				
				if(cardScheme1==null)
				{
					cardScheme = new CardScheme();
					cardScheme.setId(id);
				}
				else
				{
					cardScheme = cardScheme1;
				}
				
				cardScheme.setCreated_at(txnObject.has("created_at") ? sdf1.parse(txnObject.getString("created_at")) : null);
				cardScheme.setUpdated_at(txnObject.has("updated_at") ? sdf1.parse(txnObject.getString("updated_at")) : null);
				cardScheme.setOverrideFixedFee(txnObject.has("overrideFixedFee") ? txnObject.getDouble("overrideFixedFee") : null);
				cardScheme.setOverrideTransactionFee(txnObject.has("overrideTransactionFee") ? txnObject.getDouble("overrideTransactionFee") : null);
				cardScheme.setSchemeName(txnObject.has("schemeName") ? txnObject.getString("schemeName") : null);
				cardScheme.setSchemeDetail(txnObject.has("schemeDetail") ? txnObject.getString("schemeDetail") : null);
				cardScheme.setSchemeCode(txnObject.has("schemeCode") ? txnObject.getString("schemeCode") : null);
				cardScheme.setCardSchemeStatus(txnObject.has("schemeStatus") ? txnObject.getBoolean("schemeStatus") : null);
				
				System.out.println("cardScheme === " + (new Gson().toJson(cardScheme)));
				if(cardScheme1==null)
					cardScheme = (CardScheme)swpService.createNewRecord(cardScheme);
				else
					swpService.updateRecord(cardScheme);
				
				System.out.println("final cardScheme === " + (new Gson().toJson(cardScheme)));
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForMerchantSyncIn(JSONObject txnObjects, SwpService swpService) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				Merchant merchant = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from Merchant tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//Query q = session.createQuery(qry);
				Merchant merchant1 = (Merchant)swpService.getRecordById(Merchant.class, id);
				
				if(merchant1==null)
				{
					merchant = new Merchant();
					merchant.setId(id);
				}
				else
				{
					merchant = merchant1;
				}
				
				merchant.setCreated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				merchant.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));

				Long bankId = txnObject.has("merchantBank") ? txnObject.getLong("merchantBank") : null;
				Bank bank = null;
				if(bankId!=null)
				{
					//qry = "Select tp from Bank tp where tp.id = " + bankId;
					//bank = (Bank)session.createQuery(qry);
					bank = (Bank)swpService.getRecordById(Bank.class, bankId);
				}
				
				merchant.setMerchantBank(bank);
				merchant.setMerchantCode(txnObject.has("merchantCode") ? txnObject.getString("merchantCode") : null);
				merchant.setIsBank(txnObject.has("isBank") ? txnObject.getBoolean("isBank") : null);
				merchant.setMerchantName(txnObject.has("merchantName") ? txnObject.getString("merchantName") : null);
				
				Long schemeId = txnObject.has("merchantScheme") ? txnObject.getLong("merchantScheme") : null;
				MerchantScheme merchantScheme = null;
				if(bankId!=null)
				{
					//qry = "Select tp from MerchantScheme tp where tp.id = " + schemeId;
					//merchantScheme = (MerchantScheme)session.createQuery(qry);
					merchantScheme = (MerchantScheme)swpService.getRecordById(MerchantScheme.class, id);
				}
				
				merchant.setMerchantScheme(merchantScheme);
				merchant.setStatus(txnObject.has("status") ? MerchantStatus.values()[txnObject.getInt("status")] : null);
				merchant.setApiKey(txnObject.has("apiKey") ? txnObject.getString("apiKey") : null);
				
				Long userId = txnObject.has("user") ? txnObject.getLong("user") : null;
				User user = null;
				if(userId!=null)
				{
					//qry = "Select tp from User tp where tp.id = " + userId;
					//user = (User)session.createQuery(qry);
					user = (User)swpService.getRecordById(User.class, id);
				}
				merchant.setUser(user);
				merchant.setCreatedByUserName(txnObject.has("createdByUserName") ? txnObject.getString("createdByUserName") : null);
				merchant.setCreatedByUserId(txnObject.has("createdByUserId") ? txnObject.getLong("createdByUserId") : null);
				
				if(merchant1==null)
					merchant = (Merchant)swpService.createNewRecord(merchant);
				else
					swpService.updateRecord(merchant);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForMerchantSchemeSyncIn(JSONObject txnObjects, SwpService swpService) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				MerchantScheme merchantScheme = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from MerchantScheme tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//MerchantScheme merchantScheme1 = (MerchantScheme)session.createQuery(qry);
				MerchantScheme merchantScheme1 = (MerchantScheme)swpService.getRecordById(MerchantScheme.class, id);
				
				if(merchantScheme1==null)
				{
					merchantScheme = new MerchantScheme();
					merchantScheme.setId(id);
				}
				else
				{
					merchantScheme = merchantScheme1;
				}
				merchantScheme.setCreated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
				merchantScheme.setUpdated_at(sdf1.parse(txnObject.has("createdAt") ? txnObject.getString("createdAt") : null));
				merchantScheme.setFixedCharge(txnObject.has("fixedCharge") ? txnObject.getDouble("fixedCharge") : null);
				merchantScheme.setSchemecode(txnObject.has("schemeCode") ? txnObject.getString("schemeCode") : null);
				merchantScheme.setSchemename(txnObject.has("schemeName") ? txnObject.getString("schemeName") : null);
				merchantScheme.setTransactionPercentage(txnObject.has("transactionPercentage") ? txnObject.getDouble("transactionPercentage") : null);
				
					
				if(merchantScheme1==null)
					merchantScheme = (MerchantScheme)swpService.createNewRecord(merchantScheme);
				else
					swpService.updateRecord(merchantScheme);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	private static void handleForUserSyncIn(JSONObject txnObjects, SwpService swpService) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		log.info("txnObjects for user = " + txnObjects.toString());
		
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				User user = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long userId = txnObject.has("id") ? txnObject.getLong("id") : null;
				log.info("--------------------------");
				log.info("txnObject ---" + txnObject.toString());
				log.info("userId ===" + userId);
				//String qry = "Select tp from User tp where tp.id = " + userId;
				//System.out.println("qry == " + qry);
				//User user1 = (User)session.createQuery(qry);
				//User user1 = (User)session.get(User.class, userId);
				User user1 = (User)swpService.getRecordById(User.class, userId);
				
				if(user1==null)
				{
					user = new User();
				}
				else
				{
					user = user1;
				}
				
				user.setRoleCode(txnObject.has("roleCode") ? RoleType.values()[txnObject.getInt("roleCode")] : null);
				user.setWebActivationCode(txnObject.has("webActivationCode") ? txnObject.getString("webActivationCode") : null);
				user.setFailedLoginCount(txnObject.has("failedLoginCount") ? txnObject.getInt("failedLoginCount") : null);
				user.setUsername(txnObject.has("username") ? txnObject.getString("username") : null);
				user.setEmail(txnObject.has("email") ? txnObject.getString("email") : null);
				user.setLockOut(txnObject.has("lockout") ? txnObject.getBoolean("lockout") : null);
				user.setUpdated_at(txnObject.has("updatedAt") ? sdf1.parse(txnObject.getString("updatedAt")) : null);
				user.setCreated_at(txnObject.has("createdAt") ? sdf1.parse(txnObject.getString("createdAt")) : null);
				user.setMobileNumber(txnObject.has("mobileNumber") ? txnObject.getString("mobileNumber") : null);
				user.setFirstName(txnObject.has("firstName") ? txnObject.getString("firstName") : null);
				user.setLastName(txnObject.has("lastName") ? txnObject.getString("lastName") : null);
				user.setOtherName(txnObject.has("otherName") ? txnObject.getString("otherName") : null);
				user.setBranchCode(txnObject.has("branchCode") ? txnObject.getString("branchCode") : null);
				user.setBankCode(txnObject.has("bankCode") ? txnObject.getString("bankCode") : null);
				user.setPassword(txnObject.has("password") ? txnObject.getString("password") : null);
				user.setUniqueId(txnObject.has("uniqueId") ? txnObject.getString("uniqueId") : null);
				user.setUserStatus(txnObject.has("userStatus") ? UserStatus.values()[txnObject.getInt("userStatus")] : null);
				Distributor distributor = null;
				
				Long distId = txnObject.has("distributor") ? txnObject.getLong("distributor") : null;
				if(distId!=null)
				{
					String qry = "Select tp from Distributor tp where tp.id = " + distId;
					log.info("qry ----" + qry);
					distributor = (Distributor)swpService.getUniqueRecordByHQL(qry);
				}
				user.setDistributor(distributor);
				user.setDistributorId(txnObject.has("distributorId") ? txnObject.getLong("distributorId") : null);
				user.setDistributorCompanyName(txnObject.has("distributorCompanyName") ? txnObject.getString("distributorCompanyName") : null);
					
				if(user1==null)
					user = (User)swpService.createNewRecord(user);
				else
					swpService.updateRecord(user);
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}




	public static void handleForBankSyncIn(JSONObject txnObjects, SwpService swpService) throws JSONException
	{
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Bank bank = null;
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				System.out.println("txnObject-->" + txnObject.toString());
				Long bankId = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from Bank tp where tp.id = " + bankId;
				//System.out.println("qry == " + qry);
				//Bank bank1 = (Bank)session.createQuery(qry);
				//Bank bank1 = (Bank)session.get(Bank.class, bankId);
				Bank bank1 = (Bank)swpService.getRecordById(Bank.class, bankId);
				
				if(bank1==null)
				{
					System.out.println("bank1 == null");
					bank = new Bank();
					bank.setId(bankId);
				}
				else
				{
					System.out.println("bank1 != null");
					bank = bank1;
				}
				bank.setAccess_exodus(txnObject.has("accessExodus") ? txnObject.getString("accessExodus") : null);
				bank.setBankCode(txnObject.has("bankCode") ? txnObject.getString("bankCode") : null);
				bank.setBankName(txnObject.has("bankName") ? txnObject.getString("bankName") : null);
				bank.setCreated_at(txnObject.has("createdAt") ? sdf1.parse(txnObject.getString("createdAt")) : null);
				bank.setOnlineBankingURL(txnObject.has("onlineBankingUrl") ? txnObject.getString("onlineBankingUrl") : null);
				bank.setUpdated_at(txnObject.has("updatedAt") ? sdf1.parse(txnObject.getString("updatedAt")) : null);
				
				//System.out.println(new Gson().toJson(bank).toString());
				if(bank1==null)
				{
					System.out.println("bank1.save");
					//session.save(bank);
					bank = (Bank)swpService.createNewRecord(bank);
				}
				else
				{
					System.out.println("bank1.saveOrUpdate");
					swpService.updateRecord(bank);
					//session.saveOrUpdate(bank);
				}
			}
		}
		catch(Exception e)
		{
			log.error(e);
			e.printStackTrace();
		}
	}
	
	
	public void handleForECardDistributorAssignmentSyncIn(JSONObject txnObjects, SwpService swpService2)
	{
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		log.info("txnObjects----" + txnObjects.toString());
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				ECard ecard = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				ecard = (ECard)swpService2.getRecordById(ECard.class, id);
				
				if(ecard!=null)
				{
					ecard.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
					Long distributorId = txnObject.has("distributor") ? txnObject.getLong("distributor") : null;
					Distributor distributor = (Distributor)swpService2.getRecordById(Distributor.class, distributorId);
					ecard.setDistributorId(distributor.getId());
					ecard.setDistributor(distributor);
					ecard.setDistributorCode(txnObject.has("distributorCode") ? txnObject.getString("distributorCode") : null);
					ecard.setDistributorType(txnObject.has("distributorType") ? DistributorType.values()[txnObject.getInt("distributorType")] : null);
					ecard.setUniqueId(txnObject.has("uniqueId") ? txnObject.getString("uniqueId") : null);
					ecard.setCardStatus(txnObject.has("cardStatus") ? CardStatus.values()[txnObject.getInt("cardStatus")] : null);
					swpService2.updateRecord(ecard);
				}
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}

	
	private void handleForAssignTollUserToTollRouteSyncIn(JSONObject txnObjects, SwpService swpService2)
	{
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		log.info("txnObjects----" + txnObjects.toString());
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				User user = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from ECard tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//ECard ecard1 = (ECard)session.createQuery(qry);
				user = (User)swpService2.getRecordById(User.class, id);
				
				if(user!=null)
				{
					user.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
					user.setAssignedTrafficTollRouteCode(txnObject.has("assignedTrafficTollRouteCode") ? txnObject.getString("assignedTrafficTollRouteCode") : null);
					user.setAssignedTrafficTollRouteEnd(txnObject.has("assignedTrafficTollRouteEnd") ? txnObject.getString("assignedTrafficTollRouteEnd") : null);
					user.setAssignedTrafficTollRouteLane(txnObject.has("assignedTrafficTollRouteLane") ? txnObject.getInt("assignedTrafficTollRouteLane") : null);
					user.setAssignedTrafficTollRouteStart(txnObject.has("assignedTrafficTollRouteStart") ? txnObject.getString("assignedTrafficTollRouteStart") : null);
					swpService2.updateRecord(user);
				}
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	

	
	private void handleForECardUniqueIdSyncIn(JSONObject txnObjects,
			SwpService swpService2) {
		// TODO Auto-generated method stub
		SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		log.info("txnObjects----" + txnObjects.toString());
		try
		{
			for(int j=0; j<txnObjects.length(); j++)
			{
				ECard ecard = null;
				String key = "" + j;
				JSONObject txnObject = txnObjects.getJSONObject(key);
				Long id = txnObject.has("id") ? txnObject.getLong("id") : null;
				//String qry = "Select tp from ECard tp where tp.id = " + id;
				//System.out.println("qry == " + qry);
				//ECard ecard1 = (ECard)session.createQuery(qry);
				ecard = (ECard)swpService2.getRecordById(ECard.class, id);
				
				if(ecard!=null)
				{
					ecard.setUpdated_at(sdf1.parse(txnObject.has("updatedAt") ? txnObject.getString("updatedAt") : null));
					ecard.setUniqueId(txnObject.has("uniqueId") ? txnObject.getString("uniqueId") : null);
					swpService2.updateRecord(ecard);
				}
					
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}
	

	
}