package com.probase.nrfa.authenticator;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.security.auth.login.LoginException;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.probase.nrfa.enumerations.CardStatus;
import com.probase.nrfa.enumerations.CardType;
import com.probase.nrfa.enumerations.DistributorStatus;
import com.probase.nrfa.enumerations.MobileAccountStatus;
import com.probase.nrfa.enumerations.RequestType;
import com.probase.nrfa.enumerations.RoleType;
import com.probase.nrfa.enumerations.TransactionStatus;
import com.probase.nrfa.enumerations.UserStatus;
import com.probase.nrfa.models.Acquirer;
import com.probase.nrfa.models.AuditTrail;
import com.probase.nrfa.models.Bank;
import com.probase.nrfa.models.CardScheme;
import com.probase.nrfa.models.Distributor;
import com.probase.nrfa.models.ECard;
import com.probase.nrfa.models.Merchant;
import com.probase.nrfa.models.Transaction;
import com.probase.nrfa.models.User;
import com.probase.nrfa.util.Application;
import com.probase.nrfa.util.ERROR;
import com.probase.nrfa.util.PrbCustomService;
import com.probase.nrfa.util.ServiceLocator;
import com.probase.nrfa.util.SwpService;
import com.probase.nrfa.util.UtilityHelper;
import com.sun.org.apache.bcel.internal.generic.NEW;

public final class CardFunction {

    private static CardFunction authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(CardFunction.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;
	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private CardFunction() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static CardFunction getInstance() {
        if ( authenticator == null ) {
            authenticator = new CardFunction();
        }

        return authenticator;
    }

    
    
    public Response addNewCard(String cardType, String cardScheme, Integer quantity, String merchantCode, String branchCode, 
    		String token, String requestId, String ipAddress)
	{
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
    	
		try{
			
			if(cardType==null || cardScheme==null || quantity==null || merchantCode==null || branchCode==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			if(quantity>20)
			{
				jsonObject.add("status", ERROR.CARD_QUANTITY_MAX_EXCEEDED);
				jsonObject.add("message", "Maximum number of cards that you can create at a time is 20.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "branchCode ==" + branchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from Acquirer tp where lower(tp.acquirerName) = '" + app.getAcquirerId().toLowerCase() + "'";
			log.info(requestId + "hql ==" + hql);
			Acquirer acquirer = (Acquirer)swpService.getUniqueRecordByHQL(hql);
			
			hql = "Select tp from Merchant tp where lower(tp.merchantCode) = '" + merchantCode.toLowerCase() + "'";
			log.info(requestId + "1.hql ==" + hql);
			Merchant merchant = (Merchant)swpService.getUniqueRecordByHQL(hql);
			
			hql = "Select tp from CardScheme tp where tp.schemeCode = '" + cardScheme + "'";
			log.info(requestId + "3.hql ==" + hql);
			CardScheme scheme = (CardScheme)swpService.getUniqueRecordByHQL(hql);
			
			
			
			Calendar expiryDate = Calendar.getInstance();
			log.info(requestId + "Expiry Date ==" + expiryDate);
			expiryDate.add(Calendar.YEAR, 1);
			Date expDate = expiryDate.getTime();
			
			String batchId = RandomStringUtils.random(10, true, true).toUpperCase();
			
			
			JSONArray cardList = new JSONArray();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			
			for(int j=0; j<quantity; j++)
			{
				String pin = RandomStringUtils.random(4, false, true);
				log.info(requestId + "PIN ==" + pin);
				
				String pan = "";
				int cvi = new Random().nextInt(999);
				String cvv = cvi<10 ? ("00" + cvi) : ((cvi>9 && cvi<100) ? ("0" + cvi) : (cvi + ""));
				log.info(requestId + "CVV ==" + cvv);
				
				ECard ecard = new ECard();
				String cardCheckPan = null;
				
				while(cardCheckPan==null)
				{
					pan = UtilityHelper.generatePan(merchantCode, branchCode);
					log.info(requestId + "Pan ==" + pan);
					hql = "Select tp from ECard tp where tp.pan = '" + pan + "'";
					ECard cardCheck1 = (ECard)this.swpService.getUniqueRecordByHQL(hql);
					if(cardCheck1==null)
						cardCheckPan = pan;
				}

				ecard.setBatchId(batchId);
				ecard.setMerchant(merchant);
				ecard.setDistributor(null);
				ecard.setDistributorType(null);
				ecard.setAcquirer(acquirer);
				ecard.setCardScheme(scheme);
				ecard.setCardStatus(CardStatus.ACTIVATED_LEVEL_1);
				ecard.setCardType(CardType.NRFA_TOLL_CARD_DEBIT_CARD);
				ecard.setPan(pan);
				ecard.setPin(pin);
				ecard.setExpiryDate(expDate);
				ecard.setCvv(cvv);
				ecard.setOtp(null);
				ecard.setCustomerMobileNumber(null);
				ecard.setMerchantCode(merchantCode);
				ecard.setMerchantId(merchant.getId());
				ecard.setDistributorCode(null);
				ecard.setDistributorId(null);
				ecard.setLastCreditDate(new Date());
				ecard.setLastFiveTransactions(null);
				ecard.setChangedCardPin(Boolean.FALSE);
				ecard.setUniqueId(null);
				ecard.setCreated_at(new Date());
				ecard.setUpdated_at(new Date());
				ecard.setCurrentBalance(0.00);
				ecard.setTotalCredited(0.00);
				ecard.setTotalDebited(0.00);
				ecard.setCurrentDebt(0.00);
				ecard.setLastCreditDate(null);
				ecard.setLastDebitDate(null);
				ecard = (ECard)this.swpService.createNewRecord(ecard);
				
				
				
				JSONObject js = new JSONObject();
				js.put("id", ecard.getId());
				js.put("batchId", ecard.getBatchId());
				js.put("merchant", ecard.getMerchant()==null ? ecard.getMerchant() : ecard.getMerchant().getId());
				js.put("distributor", ecard.getDistributor()==null ? ecard.getDistributor() : ecard.getDistributor().getId());
				js.put("distributorType", ecard.getDistributorType()==null ? ecard.getDistributorType() : ecard.getDistributorType().ordinal());
				js.put("acquirer", ecard.getAcquirer()==null ? ecard.getAcquirer() : ecard.getAcquirer().getId());
				js.put("cardScheme", ecard.getCardScheme()==null ? ecard.getCardScheme() : ecard.getCardScheme().getId());
				js.put("cardStatus", ecard.getCardStatus()==null ? ecard.getCardStatus() : ecard.getCardStatus().ordinal());
				js.put("cardType", ecard.getCardType()==null ? ecard.getCardType() : ecard.getCardType().ordinal());
				js.put("pan", ecard.getPan());
				js.put("pin", ecard.getPin());
				js.put("expiryDate", sdf1.format(ecard.getExpiryDate()));
				js.put("cvv", ecard.getCvv());
				js.put("otp", ecard.getOtp());
				js.put("customerMobileNumber", ecard.getCustomerMobileNumber());
				js.put("merchantCode", ecard.getMerchantCode());
				js.put("merchantId", ecard.getMerchantId());
				js.put("distributorCode", ecard.getDistributorCode());
				js.put("distributorId", ecard.getDistributorId());
				js.put("lastFiveTransactions", ecard.getLastFiveTransactions());
				js.put("changedCardPin", ecard.getChangedCardPin());
				js.put("uniqueId", ecard.getUniqueId());
				js.put("createdAt", sdf1.format(ecard.getCreated_at()));
				js.put("updatedAt", sdf1.format(ecard.getUpdated_at()));
				js.put("currentBalance", ecard.getCurrentBalance());
				js.put("totalCredited", ecard.getTotalCredited());
				js.put("totalDebited", ecard.getTotalDebited());
				js.put("currentDebt", ecard.getCurrentDebt());
				js.put("lastCreditDate", ecard.getLastCreditDate()==null ? null : sdf1.format(ecard.getLastCreditDate()));
				js.put("lastDebitDate", ecard.getLastDebitDate()==null ? null : sdf1.format(ecard.getLastDebitDate()));
				txnObjects.put("" + a++, js);
				
				
				String actorUsername = verifyJ.has("username") ? verifyJ.getString("username") : null;
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_CARD_CREATION, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, ecard.getId(), ECard.class.getName());
				
				if(ecard!=null)
				{
					JSONObject jsObjectCard = new JSONObject();
					jsObjectCard.put("cardPan", ecard.getPan());
					jsObjectCard.put("expiryDate", expDate);
					jsObjectCard.put("cardBatchId", batchId);
					jsObjectCard.put("cardStatus", ecard.getCardStatus().name());
					jsObjectCard.put("cardType", ecard.getCardType().name());
					jsObjectCard.put("cardScheme", ecard.getCardScheme().getSchemeName());
					jsObjectCard.put("currentBalance", 0.0);
					cardList.put(jsObjectCard);
				}
				
				
			}
			log.info("txnObjects 1 ---" + txnObjects.toString());
			syncECardToCloud(txnObjects);
			
			jsonObject.add("message", "Cards generated successfully");
			jsonObject.add("cardList", cardList.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
    
    
    
    
    private boolean syncECardToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("ecard", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}

    
    
    public Response assignUniqueIdToCard(String batchId, String cardList,
			String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(cardList==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_UNIQUE_ID_ASSIGN_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Unique Id Asign Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "cardList = > " + cardList);
			JSONObject cardJSONObject = new JSONObject(cardList);
			boolean assignedTrue = false;
			String panList = "";
			Iterator<String> cardKeyIter = cardJSONObject.keys();
			String key = "";
			while(cardKeyIter.hasNext())
			{
				key = cardKeyIter.next();
				panList = panList + "'" + key + "',";
				
			}
			panList = panList.substring(0, panList.length() - 1);
			
			
			
			String hql = "Select tp from ECard tp where tp.cardStatus = "+CardStatus.ACTIVATED_LEVEL_1.ordinal()+" AND tp.uniqueId IS NULL AND tp.batchId = '" + batchId + "' " +
					"AND tp.pan IN (" + panList + ")";
			log.info(requestId + "hql  = " + hql);
			Collection<ECard> cards = (Collection<ECard>)this.swpService.getAllRecordsByHQL(hql);
			log.info(requestId + "cards.length()) = " + cards.size());
			log.info(requestId + "sql  = " + cards.size());
			Iterator<ECard> cardIterator = cards.iterator();
			//int i=0;
			
			JSONObject jsonObjectAssigned = new JSONObject();
			
			JSONObject txnObjects = new JSONObject();
			int a =0;
			while(cardIterator.hasNext())
			{
				ECard card = cardIterator.next();
				String cardUniqueId = cardJSONObject.getString(card.getPan());
				card.setUniqueId(cardUniqueId);
				card.setUpdated_at(new Date());
				this.swpService.updateRecord(card);
				
				JSONObject js = new JSONObject();
				js.put("id", card.getId());
				js.put("uniqueId", card.getUniqueId());
				js.put("updatedAt", sdf1.format(card.getUpdated_at()));
				txnObjects.put("" + a++, js);
							
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_ASSIGN_UNIQUE_ID, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, card.getId(), ECard.class.getName());
				assignedTrue = true;
				jsonObjectAssigned.put(card.getPan(), cardUniqueId);
				
			}
			syncCardUniqueIdAssignmentToCloud(txnObjects);
			
			/*
			JSONObject jsonObjectAlreadyAssigned = new JSONObject();
			String hql = "Select tp from ECard tp where tp.cardStatus = 0 AND tp.uniqueId IS NULL AND tp.batchId = '" + batchId + "' ORDER BY tp.id DESC";
			
			log.info(requestId + "hql =" + hql);
			log.info(requestId + "cardJSONObject.length()) = " + cardJSONObject.length());
			Collection<ECard> cards = (Collection<ECard>)this.swpService.getAllRecordsByHQL(hql, 0, cardJSONObject.length());
			log.info(requestId + "cards.length()) = " + cards.size());
			log.info(requestId + "sql  = " + cards.size());
			Iterator<ECard> cardIterator = cards.iterator();
			int i=0;
			
			JSONObject jsonObjectAssigned = new JSONObject();
			JSONObject jsonObjectAlreadyAssigned = new JSONObject();
			while(cardIterator.hasNext())
			{
				ECard card = cardIterator.next();
				log.info(requestId + "jsonArray.get(i) = > " + cardJSONObject.getString(i+""));
				if(cardJSONObject.has(i+""))
				{
					String cardUniqueId = cardJSONObject.getString(i+"");
					if(card!=null && card.getUniqueId()==null)
					{
						hql = "Select tp from ECard tp where tp.uniqueId = '" + cardUniqueId + "'";
						ECard cardCheck1 = (ECard)this.swpService.getUniqueRecordByHQL(hql);
						if(cardCheck1==null)
						{
							card.setUniqueId(cardUniqueId);
							this.swpService.updateRecord(card);
							
							AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_ASSIGN_UNIQUE_ID, requestId, this.swpService, 
									verifyJ.has("username") ? verifyJ.getString("username") : null, card.getId(), ECard.class.getName());
							
							assignedTrue = true;
							jsonObjectAssigned.put(i+"", cardUniqueId);
						}
						else
						{
							jsonObjectAlreadyAssigned.put(i+"", cardUniqueId);
						}
					}
				}
				i++;
			}*/
			
			if(assignedTrue==true)
			{
				jsonObject.add("message", "Cards Assigned Unique Ids successfully");
				jsonObject.add("status", ERROR.GENERAL_OK);
				jsonObject.add("uniqueIdsAssigned", jsonObjectAssigned.toString());
				jsonObject.add("cardList", cardList.toString());
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("message", "Cards Not Assigned Unique Ids successfully. Cards matching request details provided may not have been found or have already been assigned previously");
				jsonObject.add("status", ERROR.CARD_ASSIGN_DISTRIBUTOR_FAIL);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
		}catch(Exception e)
		{
			log.warn(requestId + e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}

    
    

    private boolean syncCardUniqueIdAssignmentToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			log.info("Received token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("carduniqueidassignment", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}

	public Response updateCard(String cardDetails, String token, String requestId, String ipAddress)
	{
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()) && !roleCode.equals(RoleType.BANK_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Update Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			
			
			
			JSONArray requestCardList = new JSONArray(cardDetails);
			JSONArray responseCardList = new JSONArray();
			for(int i=0; i<requestCardList.length(); i++)
			{
				JSONObject entry = requestCardList.getJSONObject(i);
				if(entry.has("cardPan") && entry.has("cardUniqueId"))
				{
					String cardPan = entry.getString("cardPan");
					String cardUniqueId = entry.getString("cardUniqueId");
					String hql = "Select tp from ECard tp where tp.uniqueId = '" + cardUniqueId + "' AND tp.pan = '" + cardPan + "'" ;
					ECard ecard = (ECard)swpService.getUniqueRecordByHQL(hql);
					if(ecard!=null)
					{
						
						if(entry.has("cardScheme") && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()))
						{
							String cardScheme = entry.getString("cardScheme");
							hql = "Select tp from CardScheme tp where tp.schemeCode = " + cardScheme;
							log.info(requestId + "3.hql ==" + hql);
							CardScheme scheme = (CardScheme)swpService.getUniqueRecordByHQL(hql);
							ecard.setCardScheme(scheme);
						}
						if(entry.has("cardMobileNumber"))
						{
							String cardMobileNumber = entry.getString("cardMobileNumber");
							ecard.setCustomerMobileNumber(cardMobileNumber);
						}
						if(entry.has("cardStatus") && roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()))
						{
							String cardStatus = entry.getString("cardStatus");
							CardStatus cs = CardStatus.valueOf(cardStatus);
							if(cs.equals(CardStatus.ACTIVATED_LEVEL_1) && roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()))
								ecard.setCardStatus(cs);
							else if(cs.equals(CardStatus.ACTIVATED_LEVEL_2) && (roleCode.equals(RoleType.BANK_STAFF.name()) || roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
								ecard.setCardStatus(cs);
							else if(cs.equals(CardStatus.ACTIVATED_LEVEL_3) && (roleCode.equals(RoleType.BANK_STAFF.name())))
								ecard.setCardStatus(cs);
							else if(cs.equals(CardStatus.DELETED) && (roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
								ecard.setCardStatus(cs);
							else if(cs.equals(CardStatus.DISABLED) && (roleCode.equals(RoleType.BANK_STAFF.name()) || roleCode==RoleType.NFRA_ADMIN_STAFF.name()))
								ecard.setCardStatus(cs);
							
						}
						
						if(entry.has("merchantCode") && roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()))
						{
							if(ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_1))
							{
								String merchantCode = entry.getString("merchantCode");
								hql = "Select tp from Merchant tp where tp.merchantCode = " + merchantCode;
								log.info(requestId + "Merchant hql ==" + hql);
								Merchant m1 = (Merchant)swpService.getUniqueRecordByHQL(hql);
								
								if(m1!=null)
								{
									ecard.setMerchant(m1);
									ecard.setMerchantCode(m1.getMerchantCode());
									ecard.setMerchantId(m1.getId());
									ecard.setUpdated_at(new Date());
									swpService.updateRecord(ecard);								
								}
							}
						}
						

						JSONObject jsObjectCard = new JSONObject();
						jsObjectCard.put("cardPan", ecard.getPan().substring(0,  4) + "*****" + ecard.getPan().substring(ecard.getPan().length()-4));
						if(ecard.getUniqueId()!=null)
							jsObjectCard.put("cardUniqueId", cardUniqueId);
						jsObjectCard.put("cardStatus", ecard.getCardStatus().name());
						jsObjectCard.put("cardType", ecard.getCardType().name());
						jsObjectCard.put("cardScheme", ecard.getCardScheme().getSchemeName());
						responseCardList.put(jsObjectCard);
						ecard.setUpdated_at(new Date());
						swpService.updateRecord(ecard);
						
						if(entry.has("cardMobileNumber"))
						{
							String message = "Hello, Your NRFA card "+ ecard.getPan().substring(0,  4) + "*****" + ecard.getPan().substring(ecard.getPan().length()-4) +" has been successfully updated.";
				            UtilityHelper.sendSMS(this.swpService, message, entry.getString("cardMobileNumber"));
						}

						AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_ASSIGN_UNIQUE_ID, requestId, this.swpService, 
								verifyJ.has("username") ? verifyJ.getString("username") : null, ecard.getId(), ECard.class.getName());
					}
				}
				
			}
			
			jsonObject.add("message", "Cards updated successfully");
			jsonObject.add("cardList", responseCardList.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
    
    
    
    public Response getLastFiveTransactions(String cardPan,
			String cardUniqueId, String token, String requestId) {
		// TODO Auto-generated method stub
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			
			
			String hql = "Select distinct tp from Transaction tp where tp.deleted_at IS NULL AND (tp.crCardPan = '" + cardPan + "' OR tp.drCardPan = '" + cardPan + "')" +
					" AND tp.status = " + TransactionStatus.SUCCESS.ordinal() + " ORDER BY tp.transactionDate DESC";
			log.info(requestId + "3.hql ==" + hql);
			Collection<Transaction> transactions = (Collection<Transaction>)swpService.getAllRecordsByHQL(hql, 0, 5);
			
			Iterator<Transaction> iterator = transactions.iterator();
			
			JSONArray transactionList = new JSONArray();
			while(iterator.hasNext())
			{
				Transaction transaction = iterator.next();
				
				JSONObject jsObjectCard = new JSONObject();
				jsObjectCard.put("cardPan", cardPan.substring(0,  4));
				jsObjectCard.put("transactionStatus", transaction.getStatus().name());
				jsObjectCard.put("transactionType", transaction.getServiceType().name());
				jsObjectCard.put("transactionAmount", transaction.getAmount());
				jsObjectCard.put("transactionDetail", transaction.getNarration());
				jsObjectCard.put("transactionDate", transaction.getTransactionDate());
				jsObjectCard.put("receiptNo", transaction.getReceiptNo());
				jsObjectCard.put("transactionPostedAt", transaction.getCreated_at());
				transactionList.put(jsObjectCard);
				
				
			}
			
			jsonObject.add("message", "Last Five Transactions On Card");
			jsonObject.add("transactionList", transactionList.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			log.info(requestId + "--" + jsonObject.build().toString());
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

    public Response getCardList( String merchantCode, Integer startIndex, Integer limit, String batchId, String token, Boolean assignedToDistributor, 
    		String distributorCode, String bankCode, String requestId, String ipAddress )
    {
    	
    	
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			if(merchantCode==null || startIndex==null || limit==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			
			
			String hql = "Select distinct tp from ECard tp where tp.merchantCode = '" + merchantCode + "' ";
			if(batchId!=null)
				hql = hql + "AND tp.batchId = '"+batchId+"'";
			if(assignedToDistributor!=null)
			{
				if(assignedToDistributor.equals(Boolean.TRUE))
					hql = hql + "AND tp.distributor.distributorCode IS NOT NULL ";
				else
					hql = hql + "AND tp.distributor IS NULL ";
			}
			if(distributorCode!=null && ((assignedToDistributor!=null && assignedToDistributor.equals(Boolean.TRUE)) || assignedToDistributor==null))
			{
				hql = hql + "AND tp.distributor.distributorCode = '"+(distributorCode) +"' ";
			}
			
			if(bankCode!=null)
			{
				if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()))
				{
					log.info(requestId + "Force BankCode to be Bank staff bank code ... "+userBankCode);
					bankCode = userBankCode;
				}
				
				hql = hql + "AND tp.merchant.merchantBank.bankCode = '"+(bankCode) +"' ";
			}
			
			if(roleCode!=null && (roleCode.equals(RoleType.BANK_STAFF.name()) || roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name())))
			{
				hql = hql + " AND tp.uniqueId IS NOT NULL";
			}
			
			hql = hql + " ORDER BY tp.created_at DESC" ;
			log.info(requestId + "3.hql ==" + hql);
			Collection<ECard> ecards = (Collection<ECard>)swpService.getAllRecordsByHQL(hql, startIndex, limit);
			
			String hql1 = "Select count(tp.id) as idCount " + hql.substring(18, hql.length()-28);
			log.info(requestId + "4.hql ==" + hql1);
			List<Long> totalEcardCount = (List<Long>)swpService.getAllRecordsByHQL(hql1);
			Long totalCards = totalEcardCount!=null ? totalEcardCount.iterator().next() : 0;
			log.info(requestId + "totalEcardCount ==" + totalCards);
			
			Iterator<ECard> iterator = ecards.iterator();
			
			JSONArray ecardList = new JSONArray();
			while(iterator.hasNext())
			{
				ECard ecard = iterator.next();
				
				JSONObject jsObjectCard = new JSONObject();
				jsObjectCard.put("cardPan", ecard.getPan());
				jsObjectCard.put("cvv", ecard.getCvv());
				jsObjectCard.put("expiryDate", new SimpleDateFormat("YYYY-MM-dd").format(ecard.getExpiryDate()));
				if(ecard.getUniqueId()!=null)
					jsObjectCard.put("cardUniqueId", ecard.getUniqueId());
				jsObjectCard.put("currentEValue", ecard.getCurrentBalance());
				jsObjectCard.put("currentDebt", ecard.getCurrentDebt());
				jsObjectCard.put("totalAmountSpent", ecard.getTotalDebited());
				jsObjectCard.put("totalAmountCredited", ecard.getTotalCredited());
				jsObjectCard.put("batchId", ecard.getBatchId());
				if(ecard.getDistributor()!=null)
					jsObjectCard.put("distributorCode", ecard.getDistributor().getDistributorCode());
				if(ecard.getMerchant()!=null)
					jsObjectCard.put("merchantCode", ecard.getMerchant().getMerchantCode());
				if(ecard.getMerchant()!=null)
					jsObjectCard.put("bankCode", ecard.getMerchant().getMerchantBank().getBankCode());
				jsObjectCard.put("status", ecard.getCardStatus().name());
				ecardList.put(jsObjectCard);
				
				
			}
			
			jsonObject.add("message", "Card Listing from Index " + startIndex + " to Index " + (startIndex+limit));
			jsonObject.add("cardList", ecardList.toString());
			jsonObject.add("totalCards", totalCards);
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
    }
    
    
    
    public Response getListCardsByBatchIdWithNoUniqueId( String batchId, Integer startIndex, Integer limit, String token, String requestId, String ipAddress )
    {
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			if(batchId==null || startIndex==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			
			
			String hql = "Select distinct tp from ECard tp where tp.batchId = '" + batchId + "' AND uniqueId IS NULL ORDER BY (tp.created_at) DESC" ;
			log.info(requestId + "3.hql ==" + hql);
			Collection<ECard> ecards = (Collection<ECard>)swpService.getAllRecordsByHQL(hql, startIndex, limit);
			
			
			String hql1 = "Select distinct count(tp.id) as idCount from ECard tp where tp.batchId = '" + batchId + "' AND uniqueId IS NULL";
			log.info(requestId + "4.hql ==" + hql1);
			List<Long> totalEcardCount = (List<Long>)swpService.getAllRecordsByHQL(hql1);
			Long totalCards = totalEcardCount!=null ? totalEcardCount.iterator().next() : 0;
			log.info(requestId + "totalEcardCount ==" + totalCards);
			
			Iterator<ECard> iterator = ecards.iterator();
			
			JSONArray ecardList = new JSONArray();
			while(iterator.hasNext())
			{
				ECard ecard = iterator.next();
				
				JSONObject jsObjectCard = new JSONObject();
				jsObjectCard.put("cardPan", ecard.getPan());
				jsObjectCard.put("expiryDate", new SimpleDateFormat("YYYY-MM-dd").format(ecard.getExpiryDate()));
				jsObjectCard.put("currentEValue", ecard.getCurrentBalance());
				jsObjectCard.put("currentDebt", ecard.getCurrentDebt());
				jsObjectCard.put("totalAmountSpent", ecard.getTotalDebited());
				jsObjectCard.put("totalAmountCredited", ecard.getTotalCredited());
				ecardList.put(jsObjectCard);
				
				
			}
			
			jsonObject.add("message", "Card Listing from Index " + startIndex + " to Index " + (startIndex+limit));
			jsonObject.add("cardList", ecardList.toString());
			jsonObject.add("totalCards", totalCards);
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
    }

	
    
    
    
    
    public Response getCardBatchIds( String token, String requestId, String ipAddress )
    {
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "Insufficient Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select tp.batchId from ECard tp GROUP BY tp.batchId" ;
			log.info(requestId + "3.hql ==" + hql);
			List<String> batchIds = (List<String>)swpService.getAllRecordsByHQL(hql);
			
			
			Iterator<String> iterator = batchIds.iterator();


			int j=0;
			JSONObject jsObjectCard = new JSONObject();
			while(iterator.hasNext())
			{
				String batchId = iterator.next();
				
				
				jsObjectCard.put(j++ + "", batchId);
			}
			
			jsonObject.add("message", "Batch Id Listing");
			jsonObject.add("batchIds", jsObjectCard.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
    }

	
    
    
    
    
    public Response addNewCardScheme(String schemeName, String schemeDetails,
			Double extraCharges, Boolean updateFlag, String schemeCode,
			Double transactionFee, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(updateFlag==null || schemeName==null || transactionFee==null || extraCharges==null || (updateFlag!=null && updateFlag.equals(Boolean.TRUE) && schemeCode==null))
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			CardScheme cardScheme = new CardScheme();
			if(updateFlag!=null && updateFlag.equals(Boolean.FALSE))
			{
				//Creation of card Scheme
				log.info(requestId + "---> updateflag is false");
				String hql = "Select tp from CardScheme tp where lower(tp.schemeName) = '" + schemeName.toLowerCase() + "'";
				CardScheme cardScheme1 = (CardScheme)this.swpService.getUniqueRecordByHQL(hql);
				if(cardScheme1!=null)
				{
					jsonObject.add("status", ERROR.CARD_SCHEME_ALREADY_EXISTS);
					jsonObject.add("message", "Card Scheme Creation Failed. Card Scheme Already Exists");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
				}
			}
			else if(updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				log.info(requestId + "---> updateflag is true");
				String hql = "Select tp from CardScheme tp where lower(tp.schemeCode) = '" + schemeCode.toLowerCase() + "'";
				cardScheme = (CardScheme)this.swpService.getUniqueRecordByHQL(hql);
				if(cardScheme==null)
				{
					jsonObject.add("status", ERROR.CARD_SCHEME_NOT_EXISTING);
					jsonObject.add("message", "Card Scheme Update Failed. Card Scheme Could Not Be Found");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
				}
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			cardScheme.setOverrideFixedFee(extraCharges);
			cardScheme.setOverrideTransactionFee(transactionFee);
			cardScheme.setSchemeName(schemeName);
			cardScheme.setUpdated_at(new Date());
			cardScheme.setSchemeDetail(schemeDetails);
			
			
			if(updateFlag!=null && updateFlag.equals(Boolean.FALSE))
			{
				cardScheme.setCreated_at(new Date());
				cardScheme.setDeleted_at(null);
				schemeCode = RandomStringUtils.random(4, false, true).toUpperCase();
				cardScheme.setSchemeCode(schemeCode);
				cardScheme.setCardSchemeStatus(Boolean.TRUE);
				cardScheme = (CardScheme)this.swpService.createNewRecord(cardScheme);
				
				
				JSONObject js = new JSONObject();
				JSONObject txnObjects = new JSONObject();
				int a =0;
				js.put("id", cardScheme.getId());
				js.put("overrideFixedFee", cardScheme.getOverrideFixedFee());
				js.put("overrideTransactionFee", cardScheme.getOverrideTransactionFee());
				js.put("schemeName", cardScheme.getSchemeName());
				js.put("updated_at", sdf1.format(cardScheme.getUpdated_at()));
				js.put("schemeDetail", cardScheme.getSchemeDetail());
				js.put("created_at", sdf1.format(cardScheme.getCreated_at()));
				js.put("deleted_at", cardScheme.getDeleted_at()==null ? null : sdf1.format(cardScheme.getDeleted_at()));
				js.put("schemeCode", cardScheme.getSchemeCode());
				js.put("schemeStatus", cardScheme.getCardSchemeStatus());
				txnObjects.put("" + a++, js);
				syncCardSchemeToCloud(txnObjects);
				
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_ASSIGN_UNIQUE_ID, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, cardScheme.getId(), CardScheme.class.getName());
				
				jsonObject.add("message", "Card Scheme generated successfully");
			}
			else if(updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				this.swpService.updateRecord(cardScheme);
				jsonObject.add("message", "Card Scheme updated successfully");
			}
			
			
			
			JSONObject cardSchemeObj = new JSONObject();
			cardSchemeObj.put("schemeName", schemeName);
			cardSchemeObj.put("schemeDetail", schemeDetails);
			cardSchemeObj.put("extraCharges", extraCharges);
			cardSchemeObj.put("updateFlag", updateFlag);
			cardSchemeObj.put("schemeCode", schemeCode);
			cardSchemeObj.put("transactionFee", transactionFee);
			cardSchemeObj.put("status", cardScheme.getCardSchemeStatus().equals(Boolean.TRUE) ? "Active" : "Inactive");
			
			
			jsonObject.add("scheme", cardSchemeObj.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
    
    
    
    private boolean syncCardSchemeToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("cardscheme", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
    

	public Response getCardSchemes() {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			String hql = "Select tp from CardScheme tp";
			Collection<CardScheme> cardSchemes = (Collection<CardScheme>)this.swpService.getAllRecordsByHQL(hql);
			if(cardSchemes==null)
			{
				jsonObject.add("status", ERROR.NO_CARD_SCHEMES);
				jsonObject.add("message", "No Card Schemes Available");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.EXPECTATION_FAILED ).entity( jsonObj.toString() ).build();
			}
			
			Iterator<CardScheme> iterator = cardSchemes.iterator();
			JSONArray schemeArray = new JSONArray();
			while(iterator.hasNext())
			{
				CardScheme cardScheme = iterator.next();
				JSONObject cardSchemeObj = new JSONObject();
				cardSchemeObj.put("schemeName", cardScheme.getSchemeName());
				cardSchemeObj.put("schemeDetail", cardScheme.getSchemeDetail());
				cardSchemeObj.put("extraCharges", cardScheme.getOverrideFixedFee());
				cardSchemeObj.put("schemeCode", cardScheme.getSchemeCode());
				cardSchemeObj.put("transactionFee", cardScheme.getOverrideTransactionFee());
				cardSchemeObj.put("status", cardScheme.getCardSchemeStatus().equals(Boolean.TRUE) ? "Active" : "Inactive");
				schemeArray.put(cardSchemeObj);
			}
			
			jsonObject.add("message", "Card Schemes Listed");
			jsonObject.add("cardSchmesList", schemeArray.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response getCard(String cardPan, String cardUniqueId, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			if(cardPan==null || cardUniqueId==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from ECard tp WHERE tp.pan = '"+cardPan+"' AND tp.uniqueId = '"+cardUniqueId+"'";
			ECard card = (ECard)this.swpService.getUniqueRecordByHQL(hql);
			if(card==null)
			{
				jsonObject.add("status", ERROR.CARD_NOT_EXIST);
				jsonObject.add("message", "Card does not exist");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
			
			JSONObject jsObjectCard = new JSONObject();
			jsObjectCard.put("cardPan", card.getPan().substring(0,  4));
			jsObjectCard.put("expiryDate", new SimpleDateFormat("YYYY-MM-dd").format(card.getExpiryDate()));
			if(card.getUniqueId()!=null)
				jsObjectCard.put("cardUniqueId", card.getUniqueId());
			jsObjectCard.put("cardStatus", card.getCardStatus().name());
			jsObjectCard.put("cardBatchId", card.getBatchId());
			jsObjectCard.put("cardType", card.getCardType().name());
			jsObjectCard.put("cardScheme", card.getCardScheme().getSchemeName());
			jsObjectCard.put("currentBalance", card.getCurrentBalance());
			if(card.getCustomerMobileNumber()!=null)
				jsObjectCard.put("customerMobileNumber", card.getCustomerMobileNumber());
			
				
			
			jsonObject.add("message", "Card Found");
			jsonObject.add("cardDetail", jsObjectCard.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
			log.info(requestId + " -- " + jsonObj.toString());
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(requestId + e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}


	
	
	
	public Response getCardCountByStatus(String cardStatus, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			String hql = "Select count(tp.id) from ECard tp where tp.status = " + CardStatus.valueOf(cardStatus).ordinal();
			log.info(requestId + "4.hql ==" + hql);
			List<Long> totalEcardCount = (List<Long>)swpService.getAllRecordsByHQL(hql);
			Long totalCards = totalEcardCount!=null ? totalEcardCount.iterator().next() : 0;
			log.info(requestId + "totalEcardCount ==" + totalCards);
			
			if(totalEcardCount==null)
			{
				jsonObject.add("status", ERROR.NO_CARDS_AVAILABLE);
				jsonObject.add("message", "No Cards Matching Card Status Provided Available");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.EXPECTATION_FAILED ).entity( jsonObj.toString() ).build();
			}
			
			
			jsonObject.add("message", "Card Count For Cards Matching Status");
			jsonObject.add("cardCount", totalCards);
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}


}