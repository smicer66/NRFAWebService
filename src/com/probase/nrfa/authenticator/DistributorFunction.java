package com.probase.nrfa.authenticator;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.management.relation.Role;
import javax.security.auth.login.LoginException;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.util.JsonReader;

import com.google.gson.Gson;
import com.probase.nrfa.enumerations.AccountStatus;
import com.probase.nrfa.enumerations.AccountType;
import com.probase.nrfa.enumerations.CardStatus;
import com.probase.nrfa.enumerations.CardType;
import com.probase.nrfa.enumerations.CustomerStatus;
import com.probase.nrfa.enumerations.CustomerType;
import com.probase.nrfa.enumerations.DeviceStatus;
import com.probase.nrfa.enumerations.DeviceType;
import com.probase.nrfa.enumerations.DistributorStatus;
import com.probase.nrfa.enumerations.DistributorType;
import com.probase.nrfa.enumerations.FundingAccountType;
import com.probase.nrfa.enumerations.MerchantStatus;
import com.probase.nrfa.enumerations.MobileAccountStatus;
import com.probase.nrfa.enumerations.NFRACurrency;
import com.probase.nrfa.enumerations.PaymentMeans;
import com.probase.nrfa.enumerations.RequestType;
import com.probase.nrfa.enumerations.RoleType;
import com.probase.nrfa.enumerations.ServiceType;
import com.probase.nrfa.enumerations.TransactionStatus;
import com.probase.nrfa.enumerations.UserStatus;
import com.probase.nrfa.models.Account;
import com.probase.nrfa.models.Acquirer;
import com.probase.nrfa.models.AuditTrail;
import com.probase.nrfa.models.Bank;
import com.probase.nrfa.models.CardScheme;
import com.probase.nrfa.models.Customer;
import com.probase.nrfa.models.Device;
import com.probase.nrfa.models.Distributor;
import com.probase.nrfa.models.ECard;
import com.probase.nrfa.models.Merchant;
import com.probase.nrfa.models.Transaction;
import com.probase.nrfa.models.User;
import com.probase.nrfa.util.Application;
import com.probase.nrfa.util.ERROR;
import com.probase.nrfa.util.PrbCustomService;
import com.probase.nrfa.util.ServiceLocator;
import com.probase.nrfa.util.SmsSender;
import com.probase.nrfa.util.SwpService;
import com.probase.nrfa.util.UtilityHelper;
import com.sun.org.apache.bcel.internal.generic.NEW;

public final class DistributorFunction {

    private static DistributorFunction authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(DistributorFunction.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;
	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private DistributorFunction() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static DistributorFunction getInstance() {
        if ( authenticator == null ) {
            authenticator = new DistributorFunction();
        }

        return authenticator;
    }
    
    
    public Response createDistributor(String contactEmail,
			String contactMobile, String address, String city, String district,
			String province, String companyName, String companyRegNo,
			String distributorStatus, String distributorCode, Boolean editFlag,
			String fundingAccountType, String distributorType, String contactFullName,
			String merchantCode, String corporateBankAccountNumber, Double thresholdValue, String parentDistributorCode, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
    	log.info(1);
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		log.info(2);
    	
		try{
			log.info(3);
			if(DistributorType.valueOf(distributorType).equals(DistributorType.CORPORATE) && (!FundingAccountType.valueOf(fundingAccountType).equals(FundingAccountType.DISTRIBUTOR_BANK_ACCOUNT) || corporateBankAccountNumber==null))
			{
				log.info(4);
				jsonObject.add("status", ERROR.INVALID_DISTRIBUTOR_FUNDING_ACCOUNT_TYPE_COMBINATION);
				log.info(5);
				jsonObject.add("message", "Invalid Distrubutor Type/Funding Account Type Combination");
				log.info(6);
				JsonObject jsonObj = jsonObject.build();
				log.info(7);
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
	            
			}
			
			log.info(8);
			if(contactEmail==null || contactMobile==null || address==null || city==null || district==null || province==null || companyName==null || 
					fundingAccountType==null || contactFullName==null || merchantCode==null)
			{
				log.info(9);
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				log.info(10);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				log.info(11);
				JsonObject jsonObj = jsonObject.build();
				log.info(12);
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			log.info(13);
			swpService = serviceLocator.getSwpService();
			log.info(14);
			Application app = Application.getInstance(swpService);
			log.info(15);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			log.info(16);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				log.info(17);
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				log.info(18);
				jsonObject.add("message", "Your session has expired. Please log in again");
				log.info(19);
				JsonObject jsonObj = jsonObject.build();
				log.info(20);
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}


			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			if(user==null || roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()) && !roleCode.equals(RoleType.BANK_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()))
			{
				merchantCode = userBankCode;
			}
			
			String hql = "Select tp from Merchant tp where tp.merchantCode = '" + merchantCode + "' AND tp.status = " + MerchantStatus.ACTIVE.ordinal();
			log.info(requestId + "HQL ==> " + hql);
			Merchant merchant = (Merchant)this.swpService.getUniqueRecordByHQL(hql);
			if(merchant==null)
			{
				jsonObject.add("status", ERROR.MERCHANT_NOT_EXIST);
				jsonObject.add("message", "Invalid Merchant Code provided. Couldnt match this distributor to a Merchant");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			hql = "Select tp from User tp where (tp.username) = '" + contactEmail + "' AND tp.email = '" + contactEmail + "'";
			User user1 = (User)this.swpService.getUniqueRecordByHQL(hql);
			if(user1!=null)
			{
				log.info(requestId + "2");
				jsonObject.add("status", ERROR.USER_EMAIL_USERNAME_EXISTS);
				jsonObject.add("message", "Username and email provided belongs to another user on the system");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			Distributor parentDistributor = null;
			if(parentDistributorCode!=null)
			{
				hql = "Select tp from Distributor tp where tp.distributorCode = '" + parentDistributorCode + "' AND tp.parentDistributorId IS NULL";
				parentDistributor = (Distributor)this.swpService.getUniqueRecordByHQL(hql);
				if(parentDistributor==null)
				{
					log.info(requestId + "2");
					jsonObject.add("status", ERROR.DISTRIBUTOR_NOT_EXIST);
					jsonObject.add("message", "Distributor does not exist");
					JsonObject jsonObj = jsonObject.build();
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
			}
			
			Distributor distributor = new Distributor();
			distributor.setContactEmail(contactEmail);
			distributor.setContactMobile(contactMobile);
			distributor.setContactAddress(address);
			distributor.setCity(city);
			distributor.setDistrict(district);
			distributor.setProvince(province);
			distributor.setCompanyName(companyName);
			distributor.setCompanyRegNo(companyRegNo);
			distributor.setDistributorStatus(DistributorStatus.ACTIVE);
			distributor.setParentDistributorId(parentDistributor==null ? null : parentDistributor.getId());
			distributor.setParentDistributorCode(parentDistributor==null ? null : parentDistributor.getDistributorCode());
			if(editFlag==null || (editFlag!=null && editFlag.equals(Boolean.FALSE)))
				distributor.setDistributorCode(RandomStringUtils.random(8, false, true).toUpperCase());
			
			distributor.setFundingAccountType(FundingAccountType.valueOf(fundingAccountType));
			distributor.setContactFullName(contactFullName);
			distributor.setDistributorName(companyName);
			distributor.setDistributorMerchant(merchant);
			distributor.setMerchantCode(merchantCode);
			distributor.setDistributorType(DistributorType.valueOf(distributorType));
			distributor.setCreatedByUserId(user);
			distributor.setCreatedByUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : " " + user.getLastName()));
			distributor.setDistributorStatus(DistributorStatus.ACTIVE);
			distributor.setCreated_at(new Date());
			distributor.setUpdated_at(new Date());
			distributor = (Distributor)this.swpService.createNewRecord(distributor);
			
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", distributor.getId());
			js.put("contactEmail", distributor.getContactEmail());
			js.put("contactMobile", distributor.getContactMobile());
			js.put("contactAddress", distributor.getContactAddress());
			js.put("city", distributor.getCity());
			js.put("district", distributor.getDistrict());
			js.put("province", distributor.getProvince());
			js.put("companyName", distributor.getCompanyName());
			js.put("companyRegNo", distributor.getCompanyRegNo());
			js.put("distributorStatus", distributor.getDistributorStatus().ordinal());
			js.put("distributorCode", distributor.getDistributorCode());
			js.put("fundingAccountType", distributor.getFundingAccountType().ordinal());
			js.put("contactFullName", distributor.getContactFullName());
			js.put("distributorName", distributor.getDistributorName());
			js.put("distributorMerchant", distributor.getDistributorMerchant()==null ? distributor.getDistributorMerchant() : distributor.getDistributorMerchant().getId());
			js.put("merchantCode", distributor.getMerchantCode());
			js.put("distributorType", distributor.getDistributorType().ordinal());
			js.put("createdByUserId", distributor.getCreatedByUserId()==null ? distributor.getCreatedByUserId() : distributor.getCreatedByUserId().getId());
			js.put("createdByUserName", distributor.getCreatedByUserName());
			js.put("distributorStatus", distributor.getDistributorStatus().ordinal());
			js.put("createdAt", sdf1.format(distributor.getCreated_at()));
			js.put("updatedAt", sdf1.format(distributor.getUpdated_at()));
			js.put("distributorBankAccount", distributor.getDistributorBankAccount()==null ? distributor.getDistributorBankAccount() : distributor.getDistributorBankAccount().getId());
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_DISTRIBUTOR_CREATION, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, distributor.getId(), Distributor.class.getName());
			
			Account account = new Account();
			if(editFlag==null || (editFlag!=null && editFlag.equals(Boolean.FALSE)))
			{
				String[] names = contactFullName.split(" ");
				Authenticator at = Authenticator.getInstance();
				String webActivationCode = RandomStringUtils.randomAlphanumeric(32);
				
				JSONObject bankKeys = app.getAccessKeys();
				log.info(requestId + "Bank Code = " + merchant.getMerchantCode());
				String bankKey = bankKeys.getString(merchant.getMerchantCode());
				log.info(requestId + "Bank Key = " + bankKey);
				User usr = new User();
				user.setRoleCode(RoleType.DISTRIBUTOR_STAFF);
				user.setWebActivationCode(webActivationCode);
				user.setFailedLoginCount(0);
				user.setUsername(contactEmail);
				user.setLockOut(Boolean.FALSE);
				user.setCreated_at(new Date());
				user.setUpdated_at(new Date());
				user.setMobileNumber(contactMobile);
				user.setFirstName(names.length>0 ? names[0] : contactFullName);
				user.setLastName(names.length>1 ? names[1] : contactFullName);
				user.setOtherName(null);
				user.setEmail(contactEmail);
				user.setBranchCode("001");
				user.setBankCode(merchant.getMerchantBank().getBankCode());
				String password = RandomStringUtils.randomAlphanumeric(8);
				log.info(requestId + "Username => " + contactEmail + " & Password => " + password);
				String encPassword = (String)UtilityHelper.encryptData(password, bankKey);
				user.setPassword(encPassword);
				user.setUserStatus(UserStatus.ACTIVE);
				user.setDistributor(distributor);
				log.info(requestId + "distributor ==> " + distributor==null ? "" : distributor.getId());
				user.setDistributorId(distributor.getId());
				user.setDistributorCompanyName(distributor.getCompanyName());
				String rnd="";
				boolean rndTrue = true;
				while(rndTrue==true)
				{
					rnd = RandomStringUtils.random(8).toUpperCase();
					String sql = "Select tp from User tp where tp.uniqueId = '" + rnd + "'";
					Collection<User> usrCheck = (Collection<User>)this.swpService.getAllRecordsByHQL(sql);
					if(usrCheck!=null && usrCheck.size()>0)
					{
						
					}
					else
					{
						rndTrue = false;
					}
				}
				user.setUniqueId(rnd);
				user = (User)this.swpService.createNewRecord(user);
				
				ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_USER_CREATION, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, user.getId(), User.class.getName());
				
				
				account.setAccountCount(0);
				account.setAccountIdentifier(RandomStringUtils.random(7, false, true));
				account.setBank(merchant.getMerchantBank());
				account.setAccountType(AccountType.SAVINGS);
				account.setBranchCode(userBranchCode);
				account.setCreated_at(new Date());
				account.setUpdated_at(new Date());
				account.setCurrencyCode("ZMW");
				account.setDistributor(distributor);
				account.setDistributorId(distributor.getId());
				account.setOtp(null);
				account.setStatus(AccountStatus.ACTIVE);
				account.setCurrentBalance(0.00);
				account.setRealBankAccountNo(corporateBankAccountNumber);
				account.setThresholdValue(thresholdValue!=null && thresholdValue>0 ? thresholdValue : app.getMinimumBalance());
				account = (Account)this.swpService.createNewRecord(account);
				
				distributor.setDistributorBankAccount(account);
				this.swpService.updateRecord(distributor);
				
				
				
				
				
				js.put("user_id", user.getId());
				js.put("user_roleCode", user.getRoleCode().ordinal());
				js.put("user_webActivationCode", user.getWebActivationCode());
				js.put("user_failedLoginCount", user.getFailedLoginCount());
				js.put("user_username", user.getUsername());
				js.put("user_lockout", user.getLockOut());
				js.put("user_createdAt", sdf1.format(user.getCreated_at()));
				js.put("user_updatedAt", sdf1.format(user.getUpdated_at()));
				js.put("user_mobileNumber", user.getMobileNumber());
				js.put("user_firstName", user.getFirstName());
				js.put("user_lastName", user.getLastName());
				js.put("user_otherName", user.getOtherName());
				js.put("user_email", user.getEmail());
				js.put("user_branchCode", user.getBranchCode());
				js.put("user_bankCode", user.getBankCode());
				js.put("user_uniqueId", user.getUniqueId());
				js.put("user_password", user.getPassword());
				js.put("user_userStatus", user.getUserStatus().ordinal());
				js.put("user_distributor", user.getDistributor()==null ? null : user.getDistributor().getId());
				js.put("user_distributorId", user.getDistributorId());
				js.put("user_distributorCompanyName", user.getDistributorCompanyName());


				js.put("account_id", account.getId());
				js.put("account_accountCount", account.getAccountCount());
				js.put("account_accountIdentifier", account.getAccountIdentifier());
				js.put("account_bank", account.getBank().getId());
				js.put("account_accountType", account.getAccountType().ordinal());
				js.put("account_branchCode", account.getBranchCode());
				js.put("account_createdAt", sdf1.format(account.getCreated_at()));
				js.put("account_updatedAt", sdf1.format(account.getUpdated_at()));
				js.put("account_currencyCode", account.getCurrencyCode());
				js.put("account_distributor", account.getDistributor()==null ? account.getDistributor() : account.getDistributor().getId());
				js.put("account_distributorId", account.getDistributorId());
				js.put("account_otp", account.getOtp());
				js.put("account_status", account.getStatus().ordinal());
				js.put("account_currentBalance", account.getCurrentBalance());
				if(corporateBankAccountNumber!=null)
					js.put("account_corporateBankAccountNumber", corporateBankAccountNumber);
				
				
				String message = "Hello & Welcome. Your new NRFA Distributor Account password is - "+ password;
	            //UtilityHelper.sendSMS(this.swpService, message, user.getMobileNumber());
	            try
				{
					new Thread(new SmsSender(this.swpService, message, user.getMobileNumber())).start();
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}

				ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.DISTRIBUTOR_VIRTUAL_ACCOUNT_CREATION, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, account.getId(), Account.class.getName());
				
				
				
			}
			txnObjects.put("" + a++, js);
			syncDistributorCreationToCloud(txnObjects);
			

			JSONObject json = new JSONObject();
			json.put("contactEmail", contactEmail);
			json.put("contactMobile", contactMobile);
			json.put("address", address);
			json.put("city", city);
			json.put("district", district);
			json.put("province", province);
			json.put("companyName", companyName);
			json.put("companyRegNo", companyRegNo);
			json.put("distributorCode", distributor.getDistributorCode());
			json.put("fundingAccountType", fundingAccountType);
			json.put("contactFullName", contactFullName);
			json.put("merchantCode", merchantCode);
			if(editFlag==null || (editFlag!=null && editFlag.equals(Boolean.FALSE)))
				json.put("distributorAccount", account.getAccountIdentifier());
			
			jsonObject.add("message", "New Distributor generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("terminalList", json.toString());
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}
		catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}

    
    
    

    private boolean syncDistributorCreationToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("distributorcreation", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
    
    
    
    
	public Response creditDistributorAccount(String distributorCode,
			Double amount, String hash, String orderId, String serviceType, String terminalId, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(distributorCode==null || amount==null || (amount!=null && amount<1))
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			String hql = "Select tp from Distributor tp WHERE lower(tp.distributorCode) = '" + distributorCode.toLowerCase() + "'";
			log.info(requestId + "hql = " + hql);
			Distributor distributor = (Distributor)this.swpService.getUniqueRecordByHQL(hql);
			
			log.info("roleCode==" +roleCode);
			log.info("distributor ==" + distributor.getId());
			log.info("merchant ==" + distributor.getDistributorMerchant().getId());
			log.info("bank ==" + distributor.getDistributorMerchant().getMerchantBank().getId());
			log.info("userBankCode ==" + userBankCode);
			log.info("bankcode ==" + distributor.getDistributorMerchant().getMerchantBank().getBankCode());
			
			if(userBankCode.equals(distributor.getDistributorMerchant().getMerchantBank().getBankCode()))
			{
				log.info("new bank code==" + userBankCode);
			}
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()) && distributor!=null && 
					distributor.getDistributorMerchant()!=null && distributor.getDistributorMerchant().getMerchantBank()!=null && 
					userBankCode.equals(distributor.getDistributorMerchant().getMerchantBank().getBankCode()))
			{
				
			}
			else
			{
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "Your priviledges are not sufficient to carry out this action. Please log out now!");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.FORBIDDEN ).entity( jsonObj.toString() ).build();
			}
			
			hql = "Select tp from Account tp WHERE tp.distributor.distributorCode = '" + distributorCode + "'";
			Account distributorAccount= (Account)this.swpService.getUniqueRecordByHQL(hql);
			
			
			Transaction transaction = new Transaction();
			
			String transactionRef = null;
			while(transactionRef==null)
			{
				String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
				hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
				Transaction txn = (Transaction)this.swpService.getUniqueRecordByHQL(hql);
				if(txn==null)
					transactionRef = txnRef;
			}
			
			Device device = (Device)this.swpService.getUniqueRecordByHQL("Select tp from Device tp WHERE tp.deviceCode = '" + terminalId + "'");
			if(device==null)
			{
				//invalid device used for transaction
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			
			String messageRequest = hash+"###"+terminalId+"###"+distributorCode+"###"+userBankCode+"###"+serviceType+"###"+orderId+"###"+amount+"###"+com.probase.nrfa.enumerations.Channel.POS.name()+user.getId();
			String messageResponse = transactionRef+"###"+orderId+"###"+terminalId+"###"+userBankCode+"###"+userBranchCode;
			Double new_balance = 0.00;
			
			if(serviceType.equals(ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_DISTRIBUTOR_ACCOUNT.name()))//ONUS
			{
				transaction.setTransactionRef(transactionRef);
				transaction.setOrderRef(orderId);
				transaction.setChannel(com.probase.nrfa.enumerations.Channel.OTC);
				transaction.setTransactionDate(new Date());
				transaction.setServiceType(ServiceType.valueOf(serviceType));
				transaction.setTransactingUser(user);
				transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
				transaction.setUserId(user.getId());
				transaction.setStatus(TransactionStatus.SUCCESS);
				transaction.setCard(null);
				transaction.setDevice(device);
				transaction.setDistributor(distributor);
				transaction.setMerchant(distributor.getDistributorMerchant());
				transaction.setDeviceId(device.getId());
				transaction.setDeviceCode(device.getDeviceCode());
				transaction.setStartRoute(null);
				transaction.setEndRoute(null);
				transaction.setTollLane(null);
				transaction.setMessageRequest(messageRequest);
				transaction.setMessageResponse(messageResponse);
				transaction.setFixedCharge(0.00);
				transaction.setTransactionFee(0.00);
				transaction.setAmount(amount);
				transaction.setResponseCode(Response.Status.OK.getStatusCode());
				transaction.setOnUsTransaction(Boolean.TRUE);
				transaction.setTransactingBankId(distributor.getDistributorMerchant().getMerchantBank().getId());
				transaction.setReceipientTransactingBankId(distributor.getDistributorMerchant().getMerchantBank().getId());
				transaction.setTransactionDetail("Credit: Distributor - " + distributor.getDistributorName() + " - | Amount - " + transaction.getAmount() + " - into Distributors Account in Bank - " + distributor.getDistributorMerchant().getMerchantBank().getBankName());
				transaction.setTrafficScheme(null);
				transaction.setTrafficSchemeId(null);
				transaction.setTrafficSchemeName(null);
				transaction.setCrCardId(null);
				transaction.setCrDistributorAccountId(distributorAccount.getId());
				transaction.setCrDistributorId(distributor.getId());
				transaction.setCrMerchantId(distributor.getDistributorMerchant().getId());
				transaction.setCrBankId(distributor.getDistributorMerchant().getMerchantBank().getId());
				transaction.setCrCardPan(null);
				transaction.setCrDistributorName(distributor.getDistributorName());
				transaction.setCrMerchantName(distributor.getDistributorMerchant().getMerchantName());
				transaction.setCrBankName(distributor.getDistributorMerchant().getMerchantBank().getBankName());
				transaction.setDrCardPan(null);
				transaction.setDrDistributorName(null);
				transaction.setDrMerchantName(null);
				transaction.setDrBankName(null);
				transaction.setDrCardId(null);
				transaction.setDrDistributorAccountId(null);
				transaction.setDrDistributorId(null);
				transaction.setDrMerchantId(null);
				transaction.setDrBankId(null);
				transaction.setUpdated_at(new Date());
				transaction.setCreated_at(new Date());
				transaction.setPaymentMeans(PaymentMeans.CASH);
				transaction.setNFRACurrency(NFRACurrency.ZAMBIAN_KWACHA);
				transaction.setServerOption(0);
				transaction.setNarration("CR: DISTR|" + distributor.getDistributorName() + "|" + transaction.getAmount() + "|" + distributor.getDistributorMerchant().getMerchantBank().getBankName());
				transaction = (Transaction)this.swpService.createNewRecord(transaction);
				
				transaction.setReceiptNo(distributor.getDistributorMerchant().getMerchantCode() + "/" + zeroPadNumber(transaction.getId()));
				this.swpService.updateRecord(transaction);
				
				
				if(amount>0 && transaction.getDistributor().getContactMobile()!=null)
				{
					String message = "Hello, NRFA Distributor Account CR: ZMW"+ amount + " | " + transaction.getReceiptNo();
		            //UtilityHelper.sendSMS(this.swpService, message, transaction.getDistributor().getContactMobile());
					try{
						new Thread(new SmsSender(this.swpService, message, transaction.getDistributor().getContactMobile())).start();
					}catch(Exception e)
					{
						e.printStackTrace();
					}
				}
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CREDIT_DISTRIBUTOR_ACCOUNT, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, transaction.getId(), Transaction.class.getName());
				
				distributorAccount.setUpdated_at(new Date());
				distributorAccount.setCurrentBalance(distributorAccount.getCurrentBalance() + amount);
				this.swpService.updateRecord(distributorAccount);
				
				ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, distributorAccount.getId(), Account.class.getName());
				
				new_balance = distributorAccount.getCurrentBalance();
			}
			
			

			jsonObject.add("message", "Distributor Account Credited Successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("updatedBalance", new_balance);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	private String zeroPadNumber(Long id) {
		// TODO Auto-generated method stub
    	String idS = Long.toString(id);
    	String idS1 = idS;
    	for(int i=0; i<(8-idS.length()); i++)
    	{
    		idS1 = "0" + idS1; 
    	}
    	String padded = idS1;
		return padded;
	}
	
	
	public Response assignCardsToCustomer(String cardPan, String cardUniqueId, String customerMobile, 
			String distributorCode, String firstName, String lastName, String otherName, 
			String contactEmail, String customerType, String hash, String distributorRoleCode, 
			String orderId, String distributorTerminalId, Double amount, String narration, 
    		String extraDetails, String distributorChannel, String vehicleRegNumber, String nfraCurrency,
			String token, String requestId, String ipAddress, String altContactMobile1, String altContactMobile2, Integer disableSMS) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			
			if(customerMobile==null || customerType==null || distributorCode==null || cardPan==null || cardUniqueId==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			if(user==null || roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.BANK_STAFF.name()) && !roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_ASSIGN_TO_CUSTOMER_PRIVILEDGES);
				jsonObject.add("message", "Insufficient Priviledges To Assign Card To Customer");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			boolean assignedTrue = false;
			
			
			String hql = "Select tp from ECard tp WHERE tp.pan = '" + cardPan + "' AND tp.merchant.merchantBank.bankCode = '"+userBankCode+"' AND tp.cardStatus = " + CardStatus.ACTIVATED_LEVEL_2.ordinal()
					+ " AND tp.customerMobileNumber IS NULL AND tp.distributorCode = '"+distributorCode+"' AND tp.customer.id IS NULL";
			log.info(hql);
			ECard ecard= (ECard)this.swpService.getUniqueRecordByHQL(hql);
			
			if(ecard==null)
			{
				jsonObject.add("status", ERROR.NO_CARD_MATCHING_DETAILS_PROVIDED);
				jsonObject.add("message", "Card could not be assigned to customer. Check the details provided and ensure this card has not been assigned to another customer");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			Customer customer = new Customer();
			customer.setFirstName(firstName);
			customer.setLastName(lastName);
			customer.setContactEmail(contactEmail);
			customer.setContactMobile(customerMobile);
			customer.setAltContactMobile1(altContactMobile1);
			customer.setAltContactMobile2(altContactMobile2);
			customer.setCreated_at(new Date());
			customer.setCustomerType(CustomerType.valueOf(customerType));
			customer.setOtherName(otherName);
			customer.setStatus(CustomerStatus.ACTIVE);
			customer.setUpdated_at(new Date());
			customer.setUser(null);
			customer.setVerificationNumber(RandomStringUtils.random(5, true, true).toUpperCase());
			customer.setCarPlateNumber(vehicleRegNumber);
			customer = (Customer)this.swpService.createNewRecord(customer);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_CUSTOMER_CREATION, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, customer.getId(), Customer.class.getName());
			
			ecard.setCustomer(customer);
			ecard.setCustomerMobileNumber(customerMobile);
			ecard.setCardStatus(CardStatus.ACTIVATED_LEVEL_3);
			ecard.setDefaultCarPlateNumber(vehicleRegNumber);
			ecard.setDisableSMS(disableSMS);
			this.swpService.updateRecord(ecard);
			
			
			
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", customer.getId());
			js.put("firstName", customer.getFirstName());
			js.put("lastName", customer.getLastName());
			js.put("contactEmail", customer.getContactEmail());
			js.put("customerMobile", customer.getContactMobile());
			js.put("createdAt", sdf1.format(customer.getCreated_at()));
			js.put("customerType", customer.getCustomerType()==null ? customer.getCustomerType() : customer.getCustomerType().ordinal());
			js.put("otherName", customer.getOtherName());
			js.put("status", customer.getStatus()==null ? customer.getStatus() : customer.getStatus().ordinal());
			js.put("updatedAt", sdf1.format(customer.getUpdated_at()));
			js.put("user", customer.getUser()==null ? customer.getUser() : customer.getUser().getId());
			js.put("verificationNumber", customer.getVerificationNumber());
			js.put("carPlateNumber", customer.getCarPlateNumber());
			js.put("ecardId", ecard.getId());
			js.put("customer", ecard.getCustomer().getId());
			js.put("customerMobileNumber", ecard.getCustomerMobileNumber());
			js.put("cardStatus", ecard.getCardStatus().ordinal());
			js.put("defaultCarPlateNumber", ecard.getDefaultCarPlateNumber());
			js.put("disableSMS", disableSMS);
			txnObjects.put("" + a++, js);
			
			
			
			
			Response response = PaymentFunction.getInstance().processCardTransaction(cardPan, orderId, distributorTerminalId, amount, narration, 
		    		ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS.name(), extraDetails, hash, null, null, null, 
		    		distributorChannel, null, nfraCurrency, token, requestId, ipAddress);
			
			ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_ASSIGN_TO_CUSTOMER, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, ecard.getId(), ECard.class.getName());
						
			log.info(requestId + "response.getEntity() ---> " + response.getEntity());
			//JsonReader jsonReader = Json.createReader(new StringReader())
			JSONObject jsonResponse = new JSONObject((String)response.getEntity());
			log.info(requestId + "jsonResponse ---> " + jsonResponse.toString());
			log.info(requestId + "status ---> " + jsonResponse.getInt("status") + " === " + ERROR.GENERAL_OK);
			
			if(jsonResponse.has("status") && jsonResponse.getInt("status")==(ERROR.GENERAL_OK))
			{

				syncAssignCardToCustomerToCloud(txnObjects);
				if(customerMobile!=null)
				{
					SimpleDateFormat sd = new SimpleDateFormat("MM/yy");
					String message = "Hello,\nNew NRFA card - "+ ecard.getPan().substring(0,  4) + "*****" + ecard.getPan().substring(ecard.getPan().length()-4) +". Exp: " + sd.format(ecard.getExpiryDate()) + ". Pin: " + ecard.getPin();
		            //UtilityHelper.sendSMS(this.swpService, message, customerMobile);
					try
					{
						new Thread(new SmsSender(this.swpService, message, customerMobile)).start();
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
				}
				
				jsonObject.add("message", "Cards Assigned To Customer successfully");
				jsonObject.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				
				jsonObject.add("message", "Cards Not Assigned successfully." + (jsonResponse.has("message") ? jsonResponse.getString("message") : ""));
				if(jsonResponse.has("status"))
					jsonObject.add("status", jsonResponse.getInt("status"));
				else
					jsonObject.add("status", ERROR.CARD_ASSIGN_CUSTOMER_FAIL);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
			}
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	

    
    private boolean syncNewDistributorToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("newdistributor", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
    
    
    private boolean syncAssignCardToCustomerToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("assigncardtocustomer", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
    
    
	

	public Response assignCardsToDistributor(String distributorCode, String cardList,
			String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	JsonObjectBuilder assignedList = Json.createObjectBuilder();
		JsonObjectBuilder notAssignedList = Json.createObjectBuilder();
    	
		try{
			
			if(distributorCode==null || cardList==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			//log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			log.info(requestId + "cardList = > " + cardList);
			JSONArray jsonArray = new JSONArray(cardList);
			boolean assignedTrue = false;
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.BANK_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_DISTRIBUTOR_ASSIGN_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Distributor Asign Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select tp from Distributor tp WHERE tp.distributorCode = '" + distributorCode + "' AND tp.distributorStatus = " + 
					DistributorStatus.ACTIVE.ordinal();
			Distributor distributor= (Distributor)this.swpService.getUniqueRecordByHQL(hql);
			int k1=0;
			int m1=0;
			JSONObject txnObjects = new JSONObject();
			for(int i=0; i<jsonArray.length(); i++)
			{
				log.info(requestId + "jsonArray.get(i) = > " + jsonArray.getJSONObject(i).toString());
				JSONObject cardJSONObject = jsonArray.getJSONObject(i);
				String cardPan = cardJSONObject.getString("cardPan");
				String cardUniqueId = cardJSONObject.getString("cardUniqueId");
				
				hql = "Select tp from ECard tp WHERE tp.pan = '" + cardPan + "' AND tp.merchant.merchantBank.bankCode = '" + userBankCode + 
						"' AND tp.cardStatus = " + CardStatus.ACTIVATED_LEVEL_1.ordinal();
				log.info(requestId + "= " + hql );
				ECard card = (ECard)this.swpService.getUniqueRecordByHQL(hql);
				if(card!=null && card.getUniqueId()!=null)
				{
					card.setDistributor(distributor);
					card.setDistributorCode(distributor.getDistributorCode());
					card.setDistributorId(distributor.getId());
					card.setDistributorType(distributor.getDistributorType());
					card.setCardStatus(CardStatus.ACTIVATED_LEVEL_2);
					card.setUpdated_at(new Date());
					//card.setUniqueId(cardUniqueId);
					this.swpService.updateRecord(card);
					assignedTrue = true;
					assignedList.add(k1+"", cardPan);
					
					
					JSONObject js = new JSONObject();
					js.put("id", card.getId());
					js.put("distributor", distributor.getId());
					js.put("distributorCode", card.getDistributorCode());
					js.put("distributorType", card.getDistributorType().ordinal());
					js.put("cardStatus", card.getCardStatus().ordinal());
					js.put("updatedAt", sdf1.format(card.getUpdated_at()));
					txnObjects.put(k1+"", js);
					
					k1++;
					
					AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_ASSIGN_TO_DISTRIBUTOR, requestId, this.swpService, 
							verifyJ.has("username") ? verifyJ.getString("username") : null, card.getId(), ECard.class.getName());
				}
				else
				{
					
					notAssignedList.add(m1+"", cardPan);
					m1++;
				}
				
			}
			
			if(assignedTrue==true)
			{
				syncAssignCardToDistributorToCloud(txnObjects);
				jsonObject.add("message", "Cards Assigned successfully");
				jsonObject.add("assignedList", assignedList.build().toString());
				jsonObject.add("notAssignedList", notAssignedList.build().toString());
				jsonObject.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("message", "Cards Not Assigned successfully. Cards matching request details provided not found");
				jsonObject.add("status", ERROR.CARD_ASSIGN_DISTRIBUTOR_FAIL);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	
	private boolean syncAssignCardToDistributorToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			log.info("Received token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("carddistributorassignment", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}

	public Response listDistributors(String merchantCode, Integer startIndex, Integer limit, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(merchantCode==null || startIndex==null || limit==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			if(limit!=null && limit>50)
				limit = 50;
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()))
				merchantCode = userBankCode;
			
			JSONArray jsonArray = new JSONArray();
			boolean assignedTrue = false;
			
			
			String hql = "Select tp from Distributor tp WHERE tp.merchantCode = '" + merchantCode + "'";
			Collection<Distributor> distributorList= (Collection<Distributor>)this.swpService.getAllRecordsByHQL(hql, startIndex, limit);
			
			
			String hql1 = "Select count(tp.id) as idCount " + hql.substring(10);
			System.out.println("4.hql ==" + hql1);
			List<Long> totalDistributorCount = (List<Long>)swpService.getAllRecordsByHQL(hql1);
			Long totalDistributors = totalDistributorCount!=null ? totalDistributorCount.iterator().next() : 0;
			System.out.println("totalDistributorCount ==" + totalDistributors);
			
			if(distributorList!=null && distributorList.size()>0)
			{
				Iterator<Distributor> distributorIterator = distributorList.iterator();
				while(distributorIterator.hasNext())
				{
					Distributor distributor = distributorIterator.next();
					hql = "Select tp from Account tp WHERE tp.distributorId = " + distributor.getId();
					Account acct= (Account)this.swpService.getUniqueRecordByHQL(hql);
					
					JSONObject json = new JSONObject();
					json.put("contactEmail", distributor.getContactEmail());
					json.put("contactMobile", distributor.getContactMobile());
					json.put("address", distributor.getContactAddress());
					json.put("city", distributor.getCity());
					json.put("district", distributor.getDistrict());
					json.put("province", distributor.getProvince());
					json.put("companyName", distributor.getCompanyName());
					if(distributor.getCompanyRegNo()!=null)
						json.put("companyRegNo", distributor.getCompanyRegNo());
					json.put("distributorCode", distributor.getDistributorCode());
					json.put("fundingAccountType", distributor.getFundingAccountType().name());
					json.put("contactFullName", distributor.getContactFullName());
					json.put("merchantCode", distributor.getMerchantCode());
					json.put("distributorAccount", acct.getAccountIdentifier());
					json.put("distributorAccountBalance", acct.getCurrentBalance());
					jsonArray.put(json);
				}
				
				
				jsonObject.add("message", "Distributor List");
				jsonObject.add("status", ERROR.GENERAL_OK);
				jsonObject.add("distributorList", jsonArray.toString());
				jsonObject.add("totalDistributorCount", totalDistributors);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("message", "No Distributors Currently listed on the platform");
				jsonObject.add("status", ERROR.NO_DISTRIBUTOR_LIST);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NO_CONTENT ).entity( jsonObj.toString() ).build();
			}
			
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	public Response getDistributorCount(String distributorStatus, String merchantCode) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			
			
			String hql = "Select count(tp.id) from Merchant tp";
			String sql = "";
			if(distributorStatus!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.distributorStatus = " + DistributorStatus.valueOf(distributorStatus).ordinal() + " ";
			if(merchantCode!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.merchantCode = '" + merchantCode + "' ";
			
			hql = hql + sql;
			System.out.println("4.hql ==" + hql);
			List<Long> totalDistributorCount = (List<Long>)swpService.getAllRecordsByHQL(hql);
			Long totalDistributors = totalDistributorCount!=null ? totalDistributorCount.iterator().next() : 0;
			System.out.println("totalMerchantCount ==" + totalDistributors);
			
			if(totalDistributorCount==null)
			{
				jsonObject.add("status", ERROR.NO_DISTRIBUTOR_LIST);
				jsonObject.add("message", "No Distributors Matching Parameters Provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.EXPECTATION_FAILED ).entity( jsonObj.toString() ).build();
			}
			
			
			jsonObject.add("message", "Distributor Count");
			jsonObject.add("distributorCount", totalDistributors);
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response updateCustomerDetails(String verificationNumber,
			String customerMobile, String firstName, String lastName,
			String otherName, String contactEmail, String token,
			String requestId, String ipAddress,
			String alternativeCustomerMobile1, String alternativeCustomerMobile2) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			
			if(customerMobile==null || verificationNumber==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			if(user==null || roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_ASSIGN_TO_CUSTOMER_PRIVILEDGES);
				jsonObject.add("message", "Insufficient Priviledges To Assign Card To Customer");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			Customer customer = (Customer)this.swpService.getUniqueRecordByHQL("select tp from Customer tp where tp.verificationNumber = '" + verificationNumber + "' " +
					"AND tp. AND " +
					"tp.status = " + CustomerStatus.ACTIVE.ordinal());
			if(customer==null)
			{
				jsonObject.add("status", ERROR.CUSTOMER_FETCH_FAILED);
				jsonObject.add("message", "Customer match failed. No Customer matching details provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			if(firstName!=null)
				customer.setFirstName(firstName);
			if(lastName!=null)
				customer.setLastName(lastName);
			if(contactEmail!=null)
				customer.setContactEmail(contactEmail);
			if(alternativeCustomerMobile1!=null)
				customer.setAltContactMobile1(alternativeCustomerMobile1);
			if(alternativeCustomerMobile2!=null)
				customer.setAltContactMobile2(alternativeCustomerMobile2);
			if(otherName!=null)
				customer.setOtherName(otherName);
			customer.setUpdated_at(new Date());
			
			this.swpService.updateRecord(customer);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_CUSTOMER_DETAILS, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, customer.getId(), Customer.class.getName());
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a = 0;
			js.put("id", customer.getId());
			js.put("firstName", customer.getFirstName());
			js.put("lastName", customer.getLastName());
			js.put("contactEmail", customer.getContactEmail());
			js.put("customerMobile", customer.getContactMobile());
			js.put("createdAt", sdf1.format(customer.getCreated_at()));
			js.put("customerType", customer.getCustomerType()==null ? customer.getCustomerType() : customer.getCustomerType().ordinal());
			js.put("otherName", customer.getOtherName());
			js.put("status", customer.getStatus()==null ? customer.getStatus() : customer.getStatus().ordinal());
			js.put("updatedAt", sdf1.format(customer.getUpdated_at()));
			js.put("user", customer.getUser()==null ? customer.getUser() : customer.getUser().getId());
			js.put("carPlateNumber", customer.getCarPlateNumber());
			txnObjects.put("" + a++, js);
			
			
			
			
			
			
			
			String message = "Hello,\nYour NRFA Customer account details have been upated successfully. If you did not request this account updated, kindly contact our administrators immediately";
            //UtilityHelper.sendSMS(this.swpService, message, customerMobile);
			try
			{
				new Thread(new SmsSender(this.swpService, message, customerMobile)).start();
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
				
			jsonObject.add("message", "Customer account details updated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}

	public Response disableCardSms(String cardPan, String cardUniqueId,
			String customerMobile, String distributorCode,
			String distributorTxnHash, String token, String requestId,
			String ipAddress, Integer disableSMS) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			
			if(customerMobile==null || distributorCode==null || cardPan==null || cardUniqueId==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			if(user==null || roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_SMS_ACTIVATE_PRIVILEDGES);
				jsonObject.add("message", "Insufficient Priviledges To Activate/Disable Customer Card SMS");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			boolean assignedTrue = false;
			
			
			String hql = "Select tp from ECard tp WHERE tp.pan = '" + cardPan + "' AND tp.uniqueId = '"+cardUniqueId+"' AND tp.merchant.merchantBank.bankCode = '"+userBankCode+"' AND tp.cardStatus = " + CardStatus.ACTIVATED_LEVEL_2.ordinal()
					+ " AND tp.customerMobileNumber = '" + customerMobile + "' AND tp.distributorCode = '"+distributorCode+"' AND tp.customer.id IS NOT NULL";
			log.info(hql);
			ECard ecard= (ECard)this.swpService.getUniqueRecordByHQL(hql);
			
			if(ecard==null)
			{
				jsonObject.add("status", ERROR.NO_CARD_MATCHING_DETAILS_PROVIDED);
				jsonObject.add("message", "Card could not be found");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			ecard.setDisableSMS(disableSMS);
			this.swpService.updateRecord(ecard);
			
			
			
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("ecardId", ecard.getId());
			js.put("customerMobileNumber", ecard.getCustomerMobileNumber());
			js.put("cardStatus", ecard.getCardStatus().ordinal());
			js.put("disableSMS", disableSMS);
			txnObjects.put("" + a++, js);
			
			
			
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_SMS_ACTIVATE, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, ecard.getId(), ECard.class.getName());
						
			if(customerMobile!=null)
			{
				SimpleDateFormat sd = new SimpleDateFormat("MM/yy");
				String message = "Hello,\nYour NRFA card - "+ ecard.getPan().substring(0,  4) + "*****" + 
						ecard.getPan().substring(ecard.getPan().length()-4) +" has been " + (disableSMS==1 ? "activated to receive SMS alerts" : "deactivated from receiving SMS alerts" ) + ".";
	            //UtilityHelper.sendSMS(this.swpService, message, customerMobile);
				try
				{
					new Thread(new SmsSender(this.swpService, message, customerMobile)).start();
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}
			
			jsonObject.add("message", "Card SMS alert flag updated");
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	

}