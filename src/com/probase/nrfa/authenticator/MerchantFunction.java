package com.probase.nrfa.authenticator;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.security.auth.login.LoginException;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.probase.nrfa.enumerations.CardStatus;
import com.probase.nrfa.enumerations.CardType;
import com.probase.nrfa.enumerations.DeviceStatus;
import com.probase.nrfa.enumerations.DeviceType;
import com.probase.nrfa.enumerations.MerchantStatus;
import com.probase.nrfa.enumerations.MobileAccountStatus;
import com.probase.nrfa.enumerations.RequestType;
import com.probase.nrfa.enumerations.RoleType;
import com.probase.nrfa.enumerations.TransactionStatus;
import com.probase.nrfa.enumerations.UserStatus;
import com.probase.nrfa.models.Acquirer;
import com.probase.nrfa.models.AuditTrail;
import com.probase.nrfa.models.Bank;
import com.probase.nrfa.models.CardScheme;
import com.probase.nrfa.models.Device;
import com.probase.nrfa.models.ECard;
import com.probase.nrfa.models.Merchant;
import com.probase.nrfa.models.MerchantScheme;
import com.probase.nrfa.models.Transaction;
import com.probase.nrfa.models.User;
import com.probase.nrfa.util.Application;
import com.probase.nrfa.util.ERROR;
import com.probase.nrfa.util.PrbCustomService;
import com.probase.nrfa.util.ServiceLocator;
import com.probase.nrfa.util.SwpService;
import com.probase.nrfa.util.UtilityHelper;
import com.sun.org.apache.bcel.internal.generic.NEW;

public final class MerchantFunction {

    private static MerchantFunction authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(MerchantFunction.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;
	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private MerchantFunction() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static MerchantFunction getInstance() {
        if ( authenticator == null ) {
            authenticator = new MerchantFunction();
        }

        return authenticator;
    }
    
    
	public Response createNewMerchant(String merchantName, String merchantBankCode, String merchantSchemeCode, Boolean isBank, String token, 
			String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			log.info(requestId + "Test 1");
			if(merchantName==null || merchantBankCode==null || merchantSchemeCode==null || isBank==null)
			{
				log.info(requestId + "Test 2");
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "Test 3");
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				log.info(requestId + "Test 4");
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				String hql = "select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal();
				log.info(requestId + "hql ==" + hql);
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				
				if(user==null)
				{

					log.info(requestId + "user IS NULL");
					log.info(requestId + "user firstname = " + user.getFirstName());
					log.info(requestId + "user lastname = " + user.getLastName());
					jsonObject.add("status", ERROR.USER_NOT_FOUND);
					jsonObject.add("message", "Invalid User Account");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
			}
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_MERCHANT_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Merchant Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			Bank bank = (Bank)this.swpService.getUniqueRecordByHQL("Select tp from Bank tp where tp.bankCode = '"+merchantBankCode+"'");
			if(bank==null)
			{
				jsonObject.add("status", ERROR.INVALID_BANK_PROVIDED);
				jsonObject.add("message", "Bank Code Not Matching Any Of The Banks");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			MerchantScheme mscheme = (MerchantScheme)this.swpService.getUniqueRecordByHQL("Select tp from MerchantScheme tp where tp.schemecode = '"+merchantSchemeCode+"'");
			if(mscheme==null)
			{
				jsonObject.add("status", ERROR.INVALID_MERCHANT_SCHEME);
				jsonObject.add("message", "Merchant Scheme Not Matching Any of the Scheme Codes");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
				
			Merchant merchant = new Merchant();
			merchant.setCreated_at(new Date());
			merchant.setUpdated_at(new Date());
			merchant.setMerchantBank(bank);
			if(isBank==Boolean.TRUE)
			{
				merchant.setMerchantCode(merchantBankCode);
			}
			else
			{
				boolean xyz = true;
				while(xyz==true)
				{
					String rnd = RandomStringUtils.randomNumeric(3);
					String hql = "Select tp from Merchant tp where tp.merchantCode = '" + rnd + "'";
					Merchant m1 = (Merchant)this.swpService.getUniqueRecordByHQL(hql);
					if(m1==null)
					{
						xyz = false;
					}
						
					merchant.setMerchantCode(rnd);
				}
			}
			
			merchant.setIsBank(isBank);
			merchant.setMerchantName(merchantName);
			merchant.setMerchantScheme(mscheme);
			merchant.setStatus(MerchantStatus.ACTIVE);
			merchant.setApiKey(RandomStringUtils.random(32, true, true));
			merchant.setUser(user);
			merchant.setCreatedByUserName(user.getFirstName() + " " + user.getLastName());
			merchant.setCreatedByUserId(user.getId());
			merchant = (Merchant)this.swpService.createNewRecord(merchant);
			

			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", merchant.getId());
			js.put("createdAt", sdf1.format(merchant.getCreated_at()));
			js.put("updatedAt", sdf1.format(merchant.getUpdated_at()));
			js.put("merchantBank", merchant.getMerchantBank()==null ? merchant.getMerchantBank() : merchant.getMerchantBank().getId());
			js.put("merchantCode", merchant.getMerchantCode());
			js.put("merchantCode", merchant.getMerchantCode());
			js.put("isBank", merchant.getIsBank());
			js.put("merchantName", merchant.getMerchantName());
			js.put("merchantScheme", merchant.getMerchantScheme()==null ? merchant.getMerchantScheme() : merchant.getMerchantScheme().getId());
			js.put("status", merchant.getStatus().ordinal());
			js.put("apiKey", merchant.getApiKey());
			js.put("user", merchant.getUser()==null ? merchant.getUser() : merchant.getUser().getId());
			js.put("createdByUserName", merchant.getCreatedByUserName());
			js.put("createdByUserId", merchant.getCreatedByUserId());
			txnObjects.put("" + a++, js);
			syncMerchantToCloud(txnObjects);
			
			
			app.getInstance(this.swpService, Boolean.TRUE);

			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_MERCHANT_CREATION, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, merchant.getId(), Merchant.class.getName());

			JSONObject jsonMerchant = new JSONObject();
			jsonMerchant.put("merchantName", merchantName);
			jsonMerchant.put("merchantBankCode", merchantBankCode);
			jsonMerchant.put("merchantBank", bank.getBankName());
			jsonMerchant.put("merchantCode", merchantBankCode);
			
			
				
			jsonObject.add("message", "Merchant generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("merchantDetails", jsonMerchant.toString());
			JsonObject jsonObj = jsonObject.build();
			log.info(requestId + " -- " + jsonObj.toString());
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	private boolean syncMerchantToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("merchant", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}

	
	public Response updateMerchant(String merchantBankCode, String merchantSchemeCode, Boolean isBank, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(merchantBankCode!=null || merchantSchemeCode==null || isBank==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_MERCHANT_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Merchant Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			Bank bank = (Bank)this.swpService.getUniqueRecordByHQL("Select tp from Bank tp where tp.bankCode = '"+merchantBankCode+"'");
			if(bank==null)
			{
				jsonObject.add("status", ERROR.INVALID_BANK_PROVIDED);
				jsonObject.add("message", "Bank Code Not Matching Any Of The Banks");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			MerchantScheme mscheme = (MerchantScheme)this.swpService.getUniqueRecordByHQL("Select tp from MerchantScheme tp where tp.schemecode = '"+merchantSchemeCode+"'");
			if(mscheme==null)
			{
				jsonObject.add("status", ERROR.INVALID_MERCHANT_SCHEME);
				jsonObject.add("message", "Merchant Scheme Not Matching Any of the Scheme Codes");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
				
			Merchant merchant = new Merchant();
			merchant.setCreated_at(new Date());
			merchant.setUpdated_at(new Date());
			merchant.setMerchantBank(bank);
			if(isBank==Boolean.TRUE)
				merchant.setMerchantCode(merchantBankCode);
			else
				merchant.setMerchantCode(RandomStringUtils.random(6, true, false).toUpperCase());
			
			merchant.setIsBank(isBank);
			merchant.setMerchantScheme(mscheme);
			merchant.setStatus(MerchantStatus.ACTIVE);
			merchant.setUser(user);
			merchant.setCreatedByUserName(user.getFirstName() + " " + user.getLastName());
			merchant = (Merchant)this.swpService.createNewRecord(merchant);
			

			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_MERCHANT, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, merchant.getId(), Merchant.class.getName());

			JSONObject jsonMerchant = new JSONObject();
			jsonMerchant.put("merchantBankCode", merchantBankCode);
			jsonMerchant.put("merchantBank", bank.getBankName());
			jsonMerchant.put("merchantCode", merchantBankCode);
			
			
				
			jsonObject.add("message", "Device generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("merchantDetails", jsonMerchant.toString());
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
	
	public Response getMerchantList(Integer startIndex,
			Integer limit, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(startIndex==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			if(limit==null || (limit!=null && limit>50))
				limit = 50;
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			
			if(roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()))
			{
				jsonObject.add("status", ERROR.INVALID_MERCHANT_LISTING_PRIVILEDGES);
				jsonObject.add("message", "Invalid Merchant Listing Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select distinct tp from Merchant tp ORDER BY tp.created_at DESC";
			//DE LIMIT " + startIndex + ", " + limit;
			Collection<Merchant> merchants= (Collection<Merchant>)this.swpService.getAllRecordsByHQL(hql, startIndex, limit);
			
			String hql1 = "Select count(tp.id) as idCount " + hql.substring(18, hql.length()-28);
			log.info(requestId + "4.hql ==" + hql1);
			List<Long> totalMerchantCount = (List<Long>)swpService.getAllRecordsByHQL(hql1);
			Long totalMerchants = totalMerchantCount!=null ? totalMerchantCount.iterator().next() : 0;
			log.info(requestId + "totalMerchantCount ==" + totalMerchants);
			
			JSONArray jsonArray = new JSONArray();
			if(merchants.size()>0)
			{
				Iterator<Merchant> merchantIterator = merchants.iterator();
				while(merchantIterator.hasNext())
				{
					Merchant merchant = merchantIterator.next();
					JSONObject json = new JSONObject();
					json.put("merchantName", merchant.getMerchantName());
					json.put("merchantBankCode", merchant.getMerchantBank().getBankCode());
					json.put("merchantBank", merchant.getMerchantBank().getBankName());
					json.put("merchantCode", merchant.getMerchantCode());
					
					jsonArray.put(json);
				}
			}
			jsonObject.add("message", "Merchant List generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("merchantList", jsonArray.toString());
			jsonObject.add("totalMerchantCount", totalMerchants);
			JsonObject jsonObj = jsonObject.build();
			log.info(requestId + " -- " + jsonObj.toString());
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
	public Response getMerchant(String merchantCode, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(merchantCode==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			String hql = "Select tp from Merchant tp WHERE tp.merchantCode = '" + merchantCode + "'";
			Merchant merchant= (Merchant)this.swpService.getUniqueRecordByHQL(hql);
			if(merchant!=null)
			{
				JSONObject json = new JSONObject();
				json.put("merchantCode", merchant.getMerchantCode());
				json.put("merchantBankName", merchant.getMerchantBank().getBankName());
				json.put("merchantName", merchant.getMerchantName());
				json.put("merchantSchemeName", merchant.getMerchantScheme().getSchemename());
				json.put("merchantSchemeCode", merchant.getMerchantScheme().getSchemecode());
				
				
				jsonObject.add("message", "Merchant Detail");
				jsonObject.add("status", ERROR.GENERAL_OK);
				jsonObject.add("merchant", json.toString());
			}
			else
			{
				jsonObject.add("message", "Merchant not found");
				jsonObject.add("status", ERROR.MERCHANT_EXIST_FAIL);
			}
			JsonObject jsonObj = jsonObject.build();
			log.info(requestId + " -- " + jsonObj.toString());
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	
	public Response createNewMerchantScheme(String schemename,
			String schemecode, Double transactionPercentage,
			Double fixedCharge, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(schemename==null || schemecode==null || transactionPercentage==null || fixedCharge==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INVALID_MERCHANT_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Merchant Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			MerchantScheme scheme = (MerchantScheme)this.swpService.getUniqueRecordByHQL("Select tp from MerchantScheme tp where tp.schemecode = '"+schemecode+"' " +
					"OR tp.schemename = '"+schemename+"'");
			if(scheme!=null)
			{
				jsonObject.add("status", ERROR.MERCHANT_SCHEME_EXISTS);
				jsonObject.add("message", "Merchant Scheme Already Exist");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
				
			MerchantScheme merchantScheme = new MerchantScheme();
			merchantScheme.setCreated_at(new Date());
			merchantScheme.setUpdated_at(new Date());
			merchantScheme.setFixedCharge(fixedCharge);
			merchantScheme.setSchemecode(schemecode);
			merchantScheme.setSchemename(schemename);
			merchantScheme.setTransactionPercentage(transactionPercentage);
			merchantScheme = (MerchantScheme)this.swpService.createNewRecord(merchantScheme);
			
			
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", merchantScheme.getId());
			js.put("createdAt", sdf1.format(merchantScheme.getCreated_at()));
			js.put("updatedAt", sdf1.format(merchantScheme.getUpdated_at()));
			js.put("fixedCharge", merchantScheme.getFixedCharge());
			js.put("schemeCode", merchantScheme.getSchemecode());
			js.put("schemeName", merchantScheme.getSchemename());
			js.put("transactionPercentage", merchantScheme.getTransactionPercentage());
			txnObjects.put("" + a++, js);
			syncMerchantSchemeToCloud(txnObjects);
			

			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_MERCHANT_SCHEME, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, merchantScheme.getId(), MerchantScheme.class.getName());

			JSONObject jsonMerchantScheme = new JSONObject();
			jsonMerchantScheme.put("merchantSchemeName", schemename);
			jsonMerchantScheme.put("merchantSchemeCode", schemecode);
			jsonMerchantScheme.put("fixedCharge", fixedCharge);
			jsonMerchantScheme.put("transactionPercentage", transactionPercentage);
			
			
				
			jsonObject.add("message", "Merchant Scheme Generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("merchantSchemeDetails", jsonMerchantScheme.toString());
			JsonObject jsonObj = jsonObject.build();
			log.info(requestId + " -- " + jsonObj.toString());
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	
	private boolean syncMerchantSchemeToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("merchantscheme", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
	
	
	
	public Response getMerchantScheme(String schemeCode,
			String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			if(schemeCode==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			String hql = "Select tp from MerchantScheme tp WHERE tp.schemecode = '" + schemeCode + "'";
			MerchantScheme merchantScheme= (MerchantScheme)this.swpService.getUniqueRecordByHQL(hql);
			if(merchantScheme==null)
			{
				jsonObject.add("message", "Merchant Scheme Does Not Exist");
				jsonObject.add("status", ERROR.MERCHANT_SCHEME_NOT_EXIST);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			JSONObject jsonMerchantScheme = new JSONObject();
			jsonMerchantScheme.put("merchantSchemeName", merchantScheme.getSchemename());
			jsonMerchantScheme.put("merchantSchemeCode", merchantScheme.getSchemecode());
			jsonMerchantScheme.put("fixedCharge", merchantScheme.getFixedCharge());
			jsonMerchantScheme.put("transactionPercentage", merchantScheme.getTransactionPercentage());
			
			
			jsonObject.add("message", "Merchant Scheme Details");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("merchantScheme", jsonMerchantScheme.toString());
			JsonObject jsonObj = jsonObject.build();
			log.info(requestId + " -- " + jsonObj.toString());
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response getMerchantSchemeList(String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			log.info(requestId + "userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			
			if(roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()))
			{
				jsonObject.add("status", ERROR.INVALID_MERCHANT_LISTING_PRIVILEDGES);
				jsonObject.add("message", "Invalid Merchant Listing Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from MerchantScheme tp";
			Collection<MerchantScheme> merchantSchemes= (Collection<MerchantScheme>)this.swpService.getAllRecordsByHQL(hql);
			JSONArray jsonArray = new JSONArray();
			if(merchantSchemes.size()>0)
			{
				Iterator<MerchantScheme> merchantSchemeIterator = merchantSchemes.iterator();
				while(merchantSchemeIterator.hasNext())
				{
					MerchantScheme merchantScheme = merchantSchemeIterator.next();
					JSONObject json = new JSONObject();
					json.put("merchantSchemeName", merchantScheme.getSchemename());
					json.put("merchantSchemeCode", merchantScheme.getSchemecode());
					json.put("fixedCharge", merchantScheme.getFixedCharge());
					json.put("transactionPercentage", merchantScheme.getTransactionPercentage());
					jsonArray.put(json);
				}
				jsonObject.add("message", "Merchant Scheme List generated successfully");
				jsonObject.add("status", ERROR.GENERAL_OK);
				jsonObject.add("merchantSchemeList", jsonArray.toString());
				JsonObject jsonObj = jsonObject.build();
				log.info(requestId + " -- " + jsonObj.toString());
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			jsonObject.add("message", "No Merchant Schemes Available");
			jsonObject.add("status", ERROR.NO_MERCHANT_SCHEMES);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NO_CONTENT ).entity( jsonObj.toString() ).build();
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
	
	
	public Response getMerchantCount(String merchantStatus, String bankCode, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			
			
			String hql = "Select count(tp.id) from Merchant tp";
			String sql = "";
			if(merchantStatus!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.status = " + MerchantStatus.valueOf(merchantStatus).ordinal() + " ";
			if(bankCode!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.merchantBank.bankCode = '" + bankCode + "' ";
			
			hql = hql + sql;
			log.info(requestId + "4.hql ==" + hql);
			List<Long> totalMerchantCount = (List<Long>)swpService.getAllRecordsByHQL(hql);
			Long totalMerchants = totalMerchantCount!=null ? totalMerchantCount.iterator().next() : 0;
			log.info(requestId + "totalMerchantCount ==" + totalMerchants);
			
			if(totalMerchantCount==null)
			{
				jsonObject.add("status", ERROR.NO_MERCHANT_LIST);
				jsonObject.add("message", "No Merchants Matching Parameters Provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.EXPECTATION_FAILED ).entity( jsonObj.toString() ).build();
			}
			
			
			jsonObject.add("message", "Merchant Count");
			jsonObject.add("merchantCount", totalMerchants);
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
			log.info(requestId + " -- " + jsonObj.toString());
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
	

	

	




}