package com.probase.nrfa.authenticator;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonValue;
import javax.security.auth.login.LoginException;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.probase.nrfa.enumerations.AccountStatus;
import com.probase.nrfa.enumerations.CardStatus;
import com.probase.nrfa.enumerations.CardType;
import com.probase.nrfa.enumerations.DeviceStatus;
import com.probase.nrfa.enumerations.DeviceType;
import com.probase.nrfa.enumerations.DistributorStatus;
import com.probase.nrfa.enumerations.DistributorType;
import com.probase.nrfa.enumerations.FundingAccountType;
import com.probase.nrfa.enumerations.MerchantStatus;
import com.probase.nrfa.enumerations.MobileAccountStatus;
import com.probase.nrfa.enumerations.NFRACurrency;
import com.probase.nrfa.enumerations.PaymentMeans;
import com.probase.nrfa.enumerations.RequestType;
import com.probase.nrfa.enumerations.RoleType;
import com.probase.nrfa.enumerations.ServiceType;
import com.probase.nrfa.enumerations.TransactionStatus;
import com.probase.nrfa.enumerations.UserStatus;
import com.probase.nrfa.models.Acquirer;
import com.probase.nrfa.models.AuditTrail;
import com.probase.nrfa.models.Bank;
import com.probase.nrfa.models.BatchEmail;
import com.probase.nrfa.models.CardScheme;
import com.probase.nrfa.models.Device;
import com.probase.nrfa.models.Distributor;
import com.probase.nrfa.models.ECard;
import com.probase.nrfa.models.Merchant;
import com.probase.nrfa.models.MerchantScheme;
import com.probase.nrfa.models.RequestTransactionReversal;
import com.probase.nrfa.models.TrafficScheme;
import com.probase.nrfa.models.TrafficTollPrice;
import com.probase.nrfa.models.TrafficTollRoute;
import com.probase.nrfa.models.TrafficTollRouteLane;
import com.probase.nrfa.models.Transaction;
import com.probase.nrfa.models.User;
import com.probase.nrfa.util.Application;
import com.probase.nrfa.util.ERROR;
import com.probase.nrfa.util.PrbCustomService;
import com.probase.nrfa.util.ServiceLocator;
import com.probase.nrfa.util.SmsSender;
import com.probase.nrfa.util.SwpService;
import com.probase.nrfa.util.UtilityHelper;
import com.probase.nrfa.enumerations.Channel;
import com.probase.nrfa.enumerations.TransactionCode;
import com.probase.nrfa.models.Account;
import com.probase.nrfa.models.District;
import com.sun.org.apache.bcel.internal.generic.NEW;

public final class PaymentFunction {

    private static PaymentFunction authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(PaymentFunction.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;
	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    public PaymentFunction() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static PaymentFunction getInstance() {
        if ( authenticator == null ) {
            authenticator = new PaymentFunction();
        }

        return authenticator;
    }
    
    
    
    public JSONObject handleCardDebitForTollV2(String cardPan, String orderId, String terminalId, Double amount, String narration, 
    		String serviceType, String extraDetails, String hash, String routeCode, Integer tollLane, 
    		String trafficSchemeCode, String channel, User user, String roleCode, String carPlateNumber, 
    		String nfraCurrency, Application app, SwpService swpService_, String requestId, String ipAddress)
    {
    	
    	//ServiceType.CARD_DEBIT_AT_TOLL
    	/*ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS;
    	
    	 * Customer walks in bank to credit their card at the bank that owns the card
    	 * 1. Cashier collects cash
    	 * 2. Cashier uses bank deposit system to log payment
    	 * 3. Cashier uses POS or SmartPay to log payment of cash
    	 * 4. POS or smartpay informs NRFA card was credited
    	 * 		A. Credit Distributor Account who owns the card
    	 * 		B. Update Card balance with new money
    	 * 
    	 
    	ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_NOTONUS;
    	
    	 * Customer walks in bank to credit their card at the bank that does not own the card
    	 * 1. Cashier collects cash
    	 * 2. Cashier uses bank deposit system to log payment and do transfer to cards bank
    	 * 3. Cash hits distributors account who owns the card
    	 * 4. Cashier uses POS or SmartPay to log payment of cash
    	 * 5. POS or smartpay informs NRFA card was credited
    	 * 		A. Credit Distributor Account who owns the card
    	 * 		B. Update Card balance with new money
    	 * 
    	 
    	ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS;
    	
    	 * Customer walks to a distributor that banks with the bank that owns the card
    	 * 1. Distributor collects cash
    	 * 2. Distributor uses POS or SmartPay to log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA card was credited
    	 * 		A. Credit Distributor Account who owns the card
    	 * 		B. Update Card balance with new money
    	 * 
    	 
    	ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS;
    	
    	 * Customer walks to a distributor that doesnt bank with the bank that owns the card
    	 * 1. Distributor collects cash
    	 * 2. Distributor uses POS or SmartPay to do transfer & log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA card was credited
    	 * 		A. Credit Distributor Account who owns the card
    	 * 		B. Update Card balance with new money
    	 * 
    	 
    	ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_DISTRIBUTOR_ACCOUNT;
    	
    	 * Distributor deposits cash into distributors account
    	 * 1. Distributor walks into bank
    	 * 2. Bank Staff uses POS or SmartPay to log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA that distributor account was credited
    	 * 		A. Credit Distributor Account
    	 * 
    	 
    	ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_GENERAL_POOL_ACCOUNT;
    	
    	 * Distributor deposits cash into distributors account
    	 * 1. Distributor walks into bank
    	 * 2. Bank Staff uses POS or SmartPay to log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA that distributor account was credited
    	 * 		A. Credit General Pool Account
    	 * 		B. Credit Distributor Account
    	 * 
    	 */
    	
    	
    	
    	
    	
    	
    	try
    	{
	    	JSONObject jsonReturn = new JSONObject();
	    	
	    	JSONObject jsonObject = new JSONObject();
	    	jsonObject.put("orderId", orderId);
	    	jsonObject.put("terminalId", terminalId);
	    	jsonObject.put("amount", amount);
	    	jsonObject.put("serviceType", serviceType);
	    	jsonObject.put("hash", hash);
	    	jsonObject.put("routeCode", routeCode);
	    	jsonObject.put("tollLane", tollLane);
	    	jsonObject.put("channel", channel);
	    	if(nfraCurrency!=null)
	    		jsonObject.put("nfraCurrency", nfraCurrency);
	    	if(carPlateNumber!=null)
	    		jsonObject.put("carPlateNumber", carPlateNumber);
	    	
	    	
	    	
	    	
	    	if(nfraCurrency!=null && nfraCurrency!=NFRACurrency.ZAMBIAN_KWACHA.name())
	    	{
	    		/*if(ServiceType.valueOf(serviceType).equals(ServiceType.CASH_COLLECT_AT_TOLL))
	    		{
		    		jsonReturn.put("status", 30);
		    		return jsonReturn;
	    		}*/
	    		
	    	}
    		
	    	if(user!=null)
			{
	    		log.info(requestId + "serviceType - " + serviceType);
				if(ServiceType.valueOf(serviceType).equals(ServiceType.CARD_DEBIT_AT_TOLL))
				{
	
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_TOLL_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);
					
					if(ecard!=null && ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3))
					{
						Merchant merchant = ecard.getMerchant();
						Distributor distributor = ecard.getDistributor();
						Device device = null;
						
						if(distributor!=null && distributor.getDistributorStatus().equals(DistributorStatus.ACTIVE))
						{
							if(merchant!=null && merchant.getStatus().equals(MerchantStatus.ACTIVE))
							{
								
								hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
								device = (Device)swpService_.getUniqueRecordByHQL(hql);
								
								if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
								{
	
									TrafficScheme trafficScheme = null;
									if(serviceType.equals(ServiceType.CARD_DEBIT_AT_TOLL.name()))
									{
										hql = "Select tp from TrafficScheme tp where tp.schemeCode = '" + trafficSchemeCode + "'";
										trafficScheme = (TrafficScheme)swpService_.getUniqueRecordByHQL(hql);
									}
									
									if(serviceType.equals(ServiceType.CARD_DEBIT_AT_TOLL.name()) && trafficScheme!=null && trafficScheme.getTrafficSchemeStatus().equals(Boolean.TRUE))
									{
										Date todayDate = new Date();
										Date expDate = ecard.getExpiryDate();
										
										if(expDate.after(todayDate))
										{
											String api_key = device.getTerminalApiKey();
											/*if(UtilityHelper.validateTransactionHash(
													hash, 
													terminalId,
													serviceType,
													orderId,
													amount,
													api_key)==true)*/
											if(1==1)
											{
												//if((amount - app.getMinimumBalance())>balance)
												
												
												JSONObject calcResp = calculateAmountBasedOnExceptionAndPromotions(ecard, null, amount, routeCode, 
											    		ecard.getCardScheme(), trafficScheme, swpService_);
												amount = calcResp.getDouble("amount");

									    		Long exceptionId = calcResp.has("exceptionId") ? calcResp.getLong("exceptionId") : null;
									    		Long promotionId = calcResp.has("promotionId") ? calcResp.getLong("promotionId") : null;
												Double exceptionAmountApplied = calcResp.has("exceptionId") ? calcResp.getDouble("appliedAmount") : null;
									    		Double promotionAmountApplied = calcResp.has("promotionId") ? calcResp.getDouble("appliedAmount") : null;
							            		
												
												
												
												Double balance = ecard.getCurrentBalance();
												Distributor cardDistributor = ecard.getDistributor();
												DistributorType cardDistributorType = cardDistributor.getDistributorType();
												FundingAccountType distributorFundingAccountType = cardDistributor.getFundingAccountType();
												
												hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId();
												com.probase.nrfa.models.Account distributorAcct = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
												
												Double cardDistributorBalance = distributorAcct.getCurrentBalance();
												boolean proceed = false;
												boolean debitCardTrue = false;
												
												//For Non-Corporate Account Users Force Card Bal to be More
												if(cardDistributorType.equals(DistributorType.INDIVIDUAL) && (balance - app.getMinimumBalance() > amount))
												{
													proceed = true;
													debitCardTrue = true;
												}
												else if(cardDistributorType.equals(DistributorType.CORPORATE) 
														&& distributorFundingAccountType.equals(FundingAccountType.DISTRIBUTOR_BANK_ACCOUNT) 
														&& (balance - app.getMinimumBalance() > amount))
												{
													proceed = true;
													debitCardTrue = true;
												}
												else if(cardDistributorType.equals(DistributorType.CORPORATE) 
														&& distributorFundingAccountType.equals(FundingAccountType.DISTRIBUTOR_BANK_ACCOUNT) 
														&& (cardDistributorBalance - app.getMinimumBalance() > amount))
												{
													proceed = true;
													debitCardTrue = false;
												}
													
												
												//if(balance - app.getMinimumBalance() > amount)
												if(proceed==true)
												{
													
													
													
													hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
													Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
													if(oldTrxn.size()>0)
													{
														jsonReturn.put("status", 29);
														return jsonReturn;
													}
													
													
													Transaction transaction = new Transaction();
													
													String transactionRef = null;
													while(transactionRef==null)
													{
														String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
														hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
														Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
														if(txn==null)
															transactionRef = txnRef;
													}
													transactionRef = app.serverOption + "" + transactionRef;
													
													hql = "Select tp from TrafficTollRoute tp where tp.routeCode = '" + routeCode + "'";
													com.probase.nrfa.models.TrafficTollRoute trafficTollRoute = (com.probase.nrfa.models.TrafficTollRoute)swpService_.getUniqueRecordByHQL(hql);
													if(trafficTollRoute==null)
													{
														jsonReturn.put("status", 13);
														return jsonReturn;
													}
													
													String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+com.probase.nrfa.enumerations.Channel.POS.name()+user.getId();
													String messageResponse = transactionRef+"###"+orderId+"###"+terminalId+"###"+trafficTollRoute.getStartRouteName()
															+"###"+trafficTollRoute.getEndRouteName()+"###"+tollLane;
													
													transaction.setTransactionRef(transactionRef);
													transaction.setOrderRef(orderId);
													transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
													transaction.setTransactionDate(new Date());
													transaction.setServiceType(ServiceType.valueOf(serviceType));
													transaction.setTransactingUser(user);
													transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
													transaction.setUserId(user.getId());
													transaction.setStatus(TransactionStatus.SUCCESS);
													transaction.setCard(ecard);
													transaction.setDevice(device);
													transaction.setDistributor(null);
													if(debitCardTrue == false)
													{
														transaction.setDistributor(cardDistributor);
													}
													transaction.setMerchant(null);
													transaction.setDeviceId(device.getId());
													transaction.setDeviceCode(device.getDeviceCode());
													transaction.setStartRoute(trafficTollRoute.getStartRouteName());
													transaction.setEndRoute(trafficTollRoute.getEndRouteName());
													transaction.setTollLane(tollLane);
													transaction.setMessageRequest(messageRequest);
													transaction.setMessageResponse(messageResponse);
													transaction.setFixedCharge(ecard.getCardScheme().getOverrideFixedFee());
													transaction.setTransactionFee(ecard.getCardScheme().getOverrideTransactionFee());
													transaction.setAmount(amount);
													transaction.setResponseCode(Response.Status.OK.getStatusCode());
													transaction.setOnUsTransaction(Boolean.TRUE);
													transaction.setTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
													transaction.setReceipientTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
													transaction.setTransactionDetail("Debit: NRFA TollCard #" + ecard.getPan() + " the amount " + transaction.getAmount() + " into Merchant Code #" + merchant.getMerchantCode());
													transaction.setNarration("Debit|NRFA TollCard|#" + ecard.getPan() + "|ZMW" + transaction.getAmount() + "|Merchant Code #" + merchant.getMerchantCode());
													transaction.setTrafficScheme(trafficScheme);
													transaction.setTrafficSchemeId(trafficScheme.getId());
													transaction.setTrafficSchemeName(trafficScheme.getSchemeName());
													
													/*Debit card distributor account*/
													transaction.setCrCardId(null);
													transaction.setCrDistributorAccountId(null);
													transaction.setCrDistributorId(null);
													transaction.setCrMerchantId(null);
													transaction.setCrBankId(null);
													transaction.setCrCardPan(null);
													transaction.setCrDistributorName(null);
													transaction.setCrMerchantName(null);
													transaction.setCrBankName(null);
													/*------------------------------------*/
													transaction.setDrCardPan(ecard.getPan());
													transaction.setDrDistributorName(ecard.getDistributor().getDistributorName());
													transaction.setDrMerchantName(ecard.getDistributor().getDistributorMerchant().getMerchantName());
													transaction.setDrBankName(distributorAcct.getBank().getBankName());
													transaction.setDrCardId(ecard.getId());
													if(debitCardTrue == false)
													{
														transaction.setDrCardId(null);
														transaction.setCardOverDraft(true);
													}
													transaction.setDrDistributorAccountId(distributorAcct.getId());
													transaction.setDrDistributorId(ecard.getDistributor().getId());
													transaction.setDrMerchantId(ecard.getMerchant().getId());
													transaction.setDrBankId(distributorAcct.getBank().getId());
													transaction.setUpdated_at(new Date());
													transaction.setCreated_at(new Date());
													transaction.setPaymentMeans(PaymentMeans.CARD);
													transaction.setCarPlateNumber(carPlateNumber);
													transaction.setExpectedCarPlateNumber(ecard.getDefaultCarPlateNumber());
													transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
													transaction.setExceptionAmountApplied(exceptionAmountApplied);
													transaction.setPromotionAmountApplied(promotionAmountApplied);
													transaction.setExceptionId(exceptionId);
													transaction.setPromotionId(promotionId);
													transaction.setExtraDetails(extraDetails);
													transaction.setServerOption(app.serverOption);
													transaction = (Transaction)swpService_.createNewRecord(transaction);
													
													transaction.setReceiptNo(trafficTollRoute.getRouteCode() + "/" + zeroPadNumber(transaction.getId()));
													swpService_.updateRecord(transaction);
													

									    			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
									    			String currentMonthIndex = sdf.format(new Date());
									    			
													if(ecard.getCurrentMonthIndex()==currentMonthIndex)
													{
														ecard.setCurrentMonthTollDebitTransactionCount(ecard.getCurrentMonthTollDebitTransactionCount() + 1);
													}
													else
													{
														ecard.setCurrentMonthTollDebitTransactionCount(1);
														ecard.setCurrentMonthIndex(currentMonthIndex);
													}
													
													AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_DEBIT_AT_TOLL, requestId, this.swpService, 
															user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
													
													ecard.setCurrentBalance(ecard.getCurrentBalance() - amount);
													if(ecard.getDefaultCarPlateNumber()==null)
														ecard.setDefaultCarPlateNumber(carPlateNumber);
													if(ecard.getDefaultTrafficScheme()==null)
														ecard.setDefaultTrafficScheme(trafficScheme);
													
													ecard.setTotalDebited((ecard.getTotalDebited()==null ? 0 : ecard.getTotalDebited()) + amount);
													swpService.updateRecord(ecard);
													
													
													
													if(debitCardTrue == false)
													{
														distributorAcct.setCurrentBalance(distributorAcct.getCurrentBalance() - amount);
														swpService.updateRecord(distributorAcct);
													}
													
													ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
															user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
													
													if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
													{
														if(debitCardTrue == false)
														{
															String message = "Account #" + distributorAcct.getAccountIdentifier() + 
																	" has been debited K"+ transaction.getAmount() + "due to insufficient card funds. Card ending ***"+
																	ecard.getPan().substring(ecard.getPan().length()-4)+" @ " + trafficTollRoute.getStartRouteName() + ".\n" + 
																	(carPlateNumber==null ? "" : "Car Reg: " + carPlateNumber + "\n") +  "Receipt No: " + 
																	transaction.getReceiptNo() + "\nNew bal: " + ecard.getCurrentBalance();
															try
															{
																new Thread(new SmsSender(this.swpService, message, distributorAcct.getDistributor().getContactMobile())).start();
															}
															catch(Exception e)
															{
																e.printStackTrace();
															}
														}
														else
														{
															String message = "Hello"+ (ecard.getCustomer().getFirstName()==null ? "" : (" " + ecard.getCustomer().getFirstName() + "")) +", Your card ending ***"+
																ecard.getPan().substring(ecard.getPan().length()-4)+" has been debited K"+ transaction.getAmount() + " @ " + trafficTollRoute.getStartRouteName() + ".\n" + 
																(carPlateNumber==null ? "" : "Car Reg: " + carPlateNumber + "\n") +  "Receipt No: " + 
																transaction.getReceiptNo() + "\nNew bal: " + ecard.getCurrentBalance();
															try
															{
																new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
															}
															catch(Exception e)
															{
																e.printStackTrace();
															}
														}
														
											            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
													}
	
													jsonObject.put("currentBalance", ecard.getCurrentBalance());
													jsonObject.put("receiptNo", transaction.getReceiptNo());
													jsonObject.put("amountDebited", transaction.getAmount());
													jsonObject.put("cardPan", ecard.getPan());
													jsonObject.put("transactionFee", transaction.getTransactionFee());
													jsonObject.put("transactionStatus", transaction.getStatus().name());
													jsonObject.put("paymentRef", transactionRef);
													jsonObject.put("trafficRuleApplied", exceptionAmountApplied!=null ? ("LOCAL USER EXCEPTION") : (promotionAmountApplied!=null ? ("FREQUENT USER RULE - DISCOUNT ZMW" + promotionAmountApplied) : "NORMAL CHARGE" ));
													
													jsonReturn.put("status", 2);
													jsonReturn.put("txn", jsonObject);
													return jsonReturn;
													
												}else
												{
													//Balance is invalid
													jsonReturn.put("status", 3);
													jsonReturn.put("txn", jsonObject);
													return jsonReturn;
												}
											}else
											{
												//Hash failed
												jsonReturn.put("status", 4);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											
										}else
										{
											//Invalid Card - Expired Card
											jsonReturn.put("status", 5);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
									}
									else
									{
										//Invalid Traffic SCheme
										jsonReturn.put("status", 6);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
								}
								else
								{
									//Invalid device status
									jsonReturn.put("status", 7);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Merchant Status invalid
								jsonReturn.put("status", 8);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}else
						{
							//Distributor Status invalid
							jsonReturn.put("status", 9);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CASH_COLLECT_AT_TOLL))
				{
	
					int x1 = 0;
					log.info(requestId + " = " + x1);
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_TOLL_STAFF.name())))
					{
						log.info(requestId + " = " + x1);
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					String hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
					log.info(requestId + " = " + hql);
					Device device = (Device)swpService_.getUniqueRecordByHQL(hql);
					
					if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
					{

						log.info(requestId + " = " + x1);
						TrafficScheme trafficScheme = null;
						
						hql = "Select tp from TrafficScheme tp where tp.schemeCode = '" + trafficSchemeCode + "'";
						log.info(requestId + " = " + hql);
						trafficScheme = (TrafficScheme)swpService_.getUniqueRecordByHQL(hql);
						
						
						if(trafficScheme!=null && trafficScheme.getTrafficSchemeStatus().equals(Boolean.TRUE))
						{

							log.info(requestId + " = " + x1);
							String api_key = device.getTerminalApiKey();
							/*if(UtilityHelper.validateTransactionHash(
									hash, 
									terminalId,
									serviceType,
									orderId,
									amount,
									api_key)==true)*/
							if(1==1)
							{
								hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
								log.info(requestId + " = " + hql);
								Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
								if(oldTrxn.size()>0)
								{
									log.info(requestId + " = " + x1);
									jsonReturn.put("status", 29);
									return jsonReturn;
								}

								log.info(requestId + " = " + x1);
								
								Transaction transaction = new Transaction();
								
								String transactionRef = null;
								while(transactionRef==null)
								{
									String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
									hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
									log.info(requestId + " = " + hql);
									Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
									if(txn==null)
										transactionRef = txnRef;
								}
								transactionRef = app.serverOption + "" + transactionRef;
								
								hql = "Select tp from TrafficTollRoute tp where tp.routeCode = '" + routeCode + "'";
								log.info(requestId + " = " + hql);
								com.probase.nrfa.models.TrafficTollRoute trafficTollRoute = (com.probase.nrfa.models.TrafficTollRoute)swpService_.getUniqueRecordByHQL(hql);
								if(trafficTollRoute==null)
								{
									log.info(requestId + " = " + x1);
									jsonReturn.put("status", 13);
									return jsonReturn;
								}
								

								log.info(requestId + " = " + x1);
								JSONObject calcResp = calculateAmountBasedOnExceptionAndPromotions(null, carPlateNumber, amount, routeCode, 
							    		null, trafficScheme, swpService_);
								log.info(requestId + " = " + x1);
								amount = calcResp.getDouble("amount");
								log.info(requestId + " = " + x1);
					    		Long exceptionId = calcResp.has("exceptionId") ? calcResp.getLong("exceptionId") : null;
								log.info(requestId + " = " + x1);
					    		Long promotionId = calcResp.has("promotionId") ? calcResp.getLong("promotionId") : null;
								log.info(requestId + " = " + x1);
								Double exceptionAmountApplied = calcResp.has("exceptionId") ? calcResp.getDouble("appliedAmount") : null;
								log.info(requestId + " = " + x1);
					    		Double promotionAmountApplied = calcResp.has("promotionId") ? calcResp.getDouble("appliedAmount") : null;
								log.info(requestId + " = " + x1);
								
								
								String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+com.probase.nrfa.enumerations.Channel.POS.name()+user.getId();
								log.info(requestId + " = " + x1);
								String messageResponse = transactionRef+"###"+orderId+"###"+terminalId+"###"+trafficTollRoute.getStartRouteName()
										+"###"+trafficTollRoute.getEndRouteName()+"###"+tollLane;
								log.info(requestId + " = " + x1);
								
								transaction.setTransactionRef(transactionRef);
								log.info(requestId + " = " + x1);
								transaction.setOrderRef(orderId);
								log.info(requestId + " = " + x1);
								transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
								log.info(requestId + " = " + x1);
								transaction.setTransactionDate(new Date());
								log.info(requestId + " = " + x1);
								transaction.setServiceType(ServiceType.valueOf(serviceType));
								log.info(requestId + " = " + x1);
								transaction.setTransactingUser(user);
								log.info(requestId + " = " + x1);
								transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
								transaction.setUserId(user.getId());
								log.info(requestId + " = " + x1);
								transaction.setStatus(TransactionStatus.SUCCESS);
								log.info(requestId + " = " + x1);
								transaction.setCard(null);
								log.info(requestId + " = " + x1);
								transaction.setDevice(device);
								log.info(requestId + " = " + x1);
								transaction.setDistributor(null);
								log.info(requestId + " = " + x1);
								transaction.setMerchant(null);
								log.info(requestId + " = " + x1);
								transaction.setDeviceId(device.getId());
								log.info(requestId + " = " + x1);
								transaction.setDeviceCode(device.getDeviceCode());
								log.info(requestId + " = " + x1);
								transaction.setStartRoute(trafficTollRoute.getStartRouteName());
								log.info(requestId + " = " + x1);
								transaction.setEndRoute(trafficTollRoute.getEndRouteName());
								log.info(requestId + " = " + x1);
								transaction.setTollLane(tollLane);
								log.info(requestId + " = " + x1);
								transaction.setMessageRequest(messageRequest);
								log.info(requestId + " = " + x1);
								transaction.setMessageResponse(messageResponse);
								log.info(requestId + " = " + x1);
								transaction.setFixedCharge(null);
								log.info(requestId + " = " + x1);
								transaction.setTransactionFee(null);
								log.info(requestId + " = " + x1);
								transaction.setAmount(amount);
								log.info(requestId + " = " + x1);
								transaction.setResponseCode(Response.Status.OK.getStatusCode());
								log.info(requestId + " = " + x1);
								transaction.setOnUsTransaction(Boolean.TRUE);
								log.info(requestId + " = " + x1);
								transaction.setTransactingBankId(null);
								log.info(requestId + " = " + x1);
								transaction.setReceipientTransactingBankId(null);
								log.info(requestId + " = " + x1);
								transaction.setTransactionDetail("Cash Payment:" + transaction.getAmount());
								log.info(requestId + " = " + x1);
								transaction.setNarration("Cash Payment|ZMW" + transaction.getAmount());
								log.info(requestId + " = " + x1);
								transaction.setTrafficScheme(trafficScheme);
								log.info(requestId + " = " + x1);
								transaction.setTrafficSchemeId(trafficScheme.getId());
								log.info(requestId + " = " + x1);
								transaction.setTrafficSchemeName(trafficScheme.getSchemeName());
								log.info(requestId + " = " + x1);
								transaction.setCrCardId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrDistributorAccountId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrDistributorId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrMerchantId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrBankId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrCardPan(null);
								transaction.setCrDistributorName(null);
								log.info(requestId + " = " + x1);
								transaction.setCrMerchantName(null);
								log.info(requestId + " = " + x1);
								transaction.setCrBankName(null);
								log.info(requestId + " = " + x1);
								transaction.setDrCardPan(null);
								log.info(requestId + " = " + x1);
								transaction.setDrDistributorName(null);
								transaction.setDrMerchantName(null);
								transaction.setDrBankName(null);
								log.info(requestId + " = " + x1);
								transaction.setDrCardId(null);
								log.info(requestId + " = " + x1);
								transaction.setDrDistributorAccountId(null);
								transaction.setDrDistributorId(null);
								transaction.setDrMerchantId(null);
								transaction.setDrBankId(null);
								log.info(requestId + " = " + x1);
								transaction.setUpdated_at(new Date());
								transaction.setCreated_at(new Date());
								transaction.setPaymentMeans(PaymentMeans.CASH);
								transaction.setCarPlateNumber(carPlateNumber);
								log.info(requestId + " = " + x1);
								transaction.setExpectedCarPlateNumber(null);
								transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
								log.info(requestId + " = " + x1);
								transaction.setExceptionAmountApplied(exceptionAmountApplied);
								log.info(requestId + " = " + x1);
								transaction.setPromotionAmountApplied(promotionAmountApplied);
								log.info(requestId + " = " + x1);
								transaction.setExceptionId(exceptionId);
								log.info(requestId + " = " + x1);
								transaction.setPromotionId(promotionId);
								transaction.setExtraDetails(extraDetails);
								transaction.setServerOption(app.serverOption);
								transaction = (Transaction)swpService_.createNewRecord(transaction);
								log.info(requestId + " = " + x1);
								transaction.setReceiptNo(trafficTollRoute.getRouteCode() + "/" + zeroPadNumber(transaction.getId()));
								log.info(requestId + " = " + x1);
								swpService_.updateRecord(transaction);
								log.info(requestId + " = " + x1);
								
								AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CASH_COLLECT_AT_TOLL, requestId, this.swpService, 
										user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
								log.info(requestId + " = " + x1);
								
								jsonObject.put("receiptNo", transaction.getReceiptNo());
								log.info(requestId + " = " + x1);
								jsonObject.put("amountDebited", transaction.getAmount());
								log.info(requestId + " = " + x1);
								jsonObject.put("transactionFee", transaction.getTransactionFee());
								log.info(requestId + " = " + x1);
								jsonObject.put("transactionStatus", transaction.getStatus().name());
								log.info(requestId + " = " + x1);
								jsonObject.put("paymentRef", transactionRef);
								log.info(requestId + " = " + x1);
								jsonObject.put("trafficRuleApplied", exceptionAmountApplied!=null ? ("LOCAL USER EXCEPTION") : (promotionAmountApplied!=null ? ("FREQUENT USER RULE - DISCOUNT ZMW" + promotionAmountApplied) : "NORMAL CHARGE" ));

								log.info(requestId + " = " + x1);
								jsonReturn.put("status", 2);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}else
							{
								//Hash failed
								jsonReturn.put("status", 4);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
								
							
						}
						else
						{
							//Invalid Traffic SCheme
							jsonReturn.put("status", 6);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
					}
					else
					{
						//Invalid device status
						jsonReturn.put("status", 7);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS))
				{

					log.info(requestId + "Servicie type - CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS starts here");
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.BANK_STAFF.name()) && !roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					log.info(requestId + "hql =" + hql);
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);
					
					if(ecard!=null && (ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_2) || ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3)))
					{
						log.info(requestId + "Activate Level 2 or 3 =");
						Merchant merchant = ecard.getMerchant();
						Distributor distributor = ecard.getDistributor();
						Device device = null;
						
						if(distributor!=null && distributor.getDistributorStatus().equals(DistributorStatus.ACTIVE))
						{
							log.info(requestId + "Distributor Status = Active");
							if(merchant!=null && merchant.getStatus().equals(MerchantStatus.ACTIVE))
							{
								log.info(requestId + "Merchant Status = Active");
								hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
								device = (Device)swpService_.getUniqueRecordByHQL(hql);
								
								if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
								{
									log.info(requestId + "Device Status = Active");
									Date todayDate = new Date();
									Date expDate = ecard.getExpiryDate();
									
									if(expDate.after(todayDate))
									{
										log.info(requestId + "Expiry date afar");
										String api_key = device.getTerminalApiKey();
										/*if(UtilityHelper.validateTransactionHash(
												hash, 
												terminalId,
												serviceType,
												orderId,
												amount,
												api_key)==true)*/
										if(1==1)
										{
											log.info(requestId + "hash worked");
											
											hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
											Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
											if(oldTrxn.size()>0)
											{
												jsonReturn.put("status", 29);
												return jsonReturn;
											}
											
											
											hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId();
											log.info(requestId + "HQL = " + hql);
											com.probase.nrfa.models.Account distributorAcct = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
											int x = 0;
											if(distributorAcct==null)
											{
												//No Account setup for this distributor
												jsonReturn.put("status", 23);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											log.info(1);
											
											
											if((distributorAcct.getCurrentBalance() - app.getMinimumBalance()) > amount)
											{
												log.info(2);
												Transaction transaction = new Transaction();
												log.info(3);
												String transactionRef = null;
												while(transactionRef==null)
												{
													log.info(4);
													String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
													hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
													log.info(hql);
													Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
													log.info(5);
													if(txn==null)
													{
														transactionRef = txnRef;
														log.info(6);
													}
												}

												transactionRef = app.serverOption + "" + transactionRef;
												
												
												log.info(7);
												String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+device.getDeviceType().name()+user.getId();
												String messageResponse = transactionRef+"###"+orderId+"###"+terminalId;
												log.info(8);
												transaction.setTransactionRef(transactionRef);
												log.info(9);
												transaction.setOrderRef(orderId);
												log.info(10);
												transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
												log.info(11);
												transaction.setTransactionDate(new Date());
												log.info(12);
												transaction.setServiceType(ServiceType.valueOf(serviceType));
												log.info(13);
												transaction.setTransactingUser(user);
												log.info(14);
												transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
												log.info(15);
												transaction.setUserId(user.getId());
												log.info(16);
												transaction.setStatus(TransactionStatus.SUCCESS);
												log.info(17);
												transaction.setCard(ecard);
												log.info(18);
												transaction.setDevice(device);
												log.info(19);
												transaction.setDistributor(ecard.getDistributor());
												log.info(20);
												transaction.setMerchant(null);
												log.info(21);
												transaction.setDeviceId(device.getId());
												log.info(22);
												transaction.setDeviceCode(device.getDeviceCode());
												log.info(23);
												transaction.setStartRoute(null);
												log.info(24);
												transaction.setEndRoute(null);
												log.info(25);
												transaction.setTollLane(null);
												log.info(26);
												transaction.setMessageRequest(messageRequest);
												log.info(27);
												transaction.setMessageResponse(messageResponse);
												log.info(28);
												transaction.setFixedCharge(0.00);
												log.info(29);
												transaction.setTransactionFee(0.00);
												log.info(30);
												transaction.setAmount(amount);
												log.info(31);
												transaction.setResponseCode(Response.Status.OK.getStatusCode());
												log.info(32);
												transaction.setOnUsTransaction(Boolean.TRUE);
												log.info(33);
												transaction.setTransactingBankId(distributor.getDistributorMerchant().getMerchantBank().getId());
												log.info(34);
												transaction.setReceipientTransactingBankId(distributor.getDistributorMerchant().getMerchantBank().getId());
												log.info(35);
												transaction.setTransactionDetail("Debit: Distributor Acct " + distributorAcct.getAccountIdentifier() + " the amount " + transaction.getAmount() + " | Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
												log.info(36);
												transaction.setNarration("Debit|Distributor Acct " + distributorAcct.getAccountIdentifier() + "|ZMW" + transaction.getAmount() + "|Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
												log.info(37);
												transaction.setTrafficScheme(null);
												log.info(38);
												transaction.setTrafficSchemeId(null);
												log.info(39);
												transaction.setTrafficSchemeName(null);
												log.info(40);
												transaction.setDrCardPan(null);
												log.info(41);
												/*Debit Card Distributor Account Because Distributor Has Collected Cash*/
												transaction.setDrDistributorAccountId(distributorAcct.getId());
												log.info(42);
												transaction.setDrDistributorId(ecard.getDistributor().getId());
												log.info(43);
												transaction.setDrMerchantId(ecard.getMerchant().getId());
												log.info(44);
												transaction.setDrBankId(ecard.getMerchant().getMerchantBank().getId());
												log.info(45);
												transaction.setDrCardPan(ecard.getPan());
												log.info(46);
												transaction.setDrDistributorName(ecard.getDistributor().getCompanyName());
												log.info(47);
												transaction.setDrMerchantName(ecard.getMerchant().getMerchantName());
												log.info(48);
												transaction.setDrBankName(ecard.getMerchant().getMerchantBank().getBankName());
												log.info(49);
												
												/*------------------------------*/
												
												transaction.setCrCardId(ecard.getId());
												log.info(50);
												transaction.setCrCardPan(ecard.getPan());
												log.info(51);
												transaction.setCrDistributorName(null);
												log.info(52);
												transaction.setCrMerchantName(null);
												log.info(53);
												transaction.setCrBankName(null);
												log.info(54);
												transaction.setCrCardId(null);
												log.info(55);
												transaction.setCrDistributorAccountId(null);
												log.info(56);
												transaction.setCrDistributorId(null);
												log.info(57);
												transaction.setCrMerchantId(null);
												log.info(58);
												transaction.setCrBankId(null);
												log.info(59);
												transaction.setUpdated_at(new Date());
												log.info(60);
												transaction.setCreated_at(new Date());
												log.info(61);
												transaction.setPaymentMeans(PaymentMeans.CARD);
												log.info(62);;
												transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
												log.info(63);
												transaction.setExtraDetails(extraDetails);
												log.info(64);
												transaction.setServerOption(app.serverOption);
												transaction = (Transaction)swpService_.createNewRecord(transaction);
												log.info(65);
												
												transaction.setReceiptNo(ecard.getDistributor().getDistributorCode() + "/" + zeroPadNumber(transaction.getId()));
												log.info(66);
												swpService_.updateRecord(transaction);
												log.info(67);
												
												
												AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
												log.info(68);
												ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
												log.info(69);
												ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
												log.info(70);
												swpService.updateRecord(ecard);
												log.info(71);
												
												ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
												log.info(72);
												
												distributorAcct.setCurrentBalance(distributorAcct.getCurrentBalance()-amount);
												distributorAcct.setUpdated_at(new Date());
												log.info(73);
												swpService.updateRecord(distributorAcct);
												log.info(74);
												ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, distributorAcct.getId(), Account.class.getName());
												log.info(75);
												
												
												if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
												{
													log.info(76);
													String message = "NRFA Card Credit CR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + ecard.getCurrentBalance();
										            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
													try
													{
														new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
													}
													catch(Exception e)
													{
														e.printStackTrace();
													}
												}
												if(transaction.getDistributor().getContactMobile()!=null)
												{
													log.info(77);
													String message = "NRFA Account Debit DR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + distributorAcct.getCurrentBalance();;
										            //UtilityHelper.sendSMS(this.swpService, message, transaction.getDistributor().getContactMobile());
													try
													{
														new Thread(new SmsSender(this.swpService, message, transaction.getDistributor().getContactMobile())).start();
													}
													catch(Exception e)
													{
														e.printStackTrace();
													}
												}
												log.info(78);
												jsonObject.put("currentBalance", ecard.getCurrentBalance());
												log.info(79);
												jsonObject.put("receiptNo", transaction.getReceiptNo());
												log.info(80);
												jsonObject.put("amountDebited", transaction.getAmount());
												log.info(81);
												jsonObject.put("cardPan", ecard.getPan());
												log.info(82);
												jsonObject.put("transactionFee", transaction.getTransactionFee());
												log.info(83);
												jsonObject.put("transactionStatus", transaction.getStatus().name());
												log.info(84);
												jsonObject.put("paymentRef", transactionRef);
												log.info(85);
												
												jsonReturn.put("status", 28);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											else
											{
												//Insufficient balance in Distributor Acct
												//Balance is invalid
												jsonReturn.put("status", 3);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
										}else
										{
											//Hash failed
											jsonReturn.put("status", 4);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
										
									}else
									{
										//Invalid Card - Expired Card
										jsonReturn.put("status", 5);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
								}
								else
								{
									//Invalid device status
									jsonReturn.put("status", 7);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Merchant Status invalid
								jsonReturn.put("status", 8);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}else
						{
							//Distributor Status invalid
							jsonReturn.put("status", 9);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS))
				{

					log.info(requestId + "Servicie type - CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS starts here");
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					log.info(requestId + "hql =" + hql);
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);
					
					if(ecard!=null && (ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3)))
					{
						log.info(requestId + "Must Be Activated Level 3 =");
						Distributor distributorCardIssuer = ecard.getDistributor();		//Distributor Who Issued Card
						Distributor distributorCashCollector = user.getDistributor();		//Distributor Collecting Cash
						Account distributorAcctCardIssuer = null;						//Distributor Account Who Issued Card
						Account distributorAcctCashCollector = null;						//Distributor Account Collecting Cash
						Merchant merchantCardIssuer = distributorCardIssuer.getDistributorMerchant();
						Merchant merchantCashCollector = distributorCashCollector.getDistributorMerchant();
						Device device = null;
						
						if(distributorCashCollector!=null && distributorCashCollector.getDistributorStatus().equals(DistributorStatus.ACTIVE) 
								&& distributorCardIssuer!=null && distributorCardIssuer.getDistributorStatus().equals(DistributorStatus.ACTIVE) )
						{
							log.info(requestId + "Distributor Status = Active");
							if(merchantCardIssuer!=null && merchantCardIssuer.getStatus().equals(MerchantStatus.ACTIVE)
									&& merchantCashCollector!=null && merchantCashCollector.getStatus().equals(MerchantStatus.ACTIVE))
							{
								log.info(requestId + "Merchant Status = Active");
								hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
								device = (Device)swpService_.getUniqueRecordByHQL(hql);
								
								if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
								{
									log.info(requestId + "Device Status = Active");
									Date todayDate = new Date();
									Date expDate = ecard.getExpiryDate();
									
									if(expDate.after(todayDate))
									{
										log.info(requestId + "Expiry date afar");
										String api_key = device.getTerminalApiKey();
										/*if(UtilityHelper.validateTransactionHash(
												hash, 
												terminalId,
												serviceType,
												orderId,
												amount,
												api_key)==true)*/
										if(1==1)
										{
											log.info(requestId + "hash worked");
											
											hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
											Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
											if(oldTrxn.size()>0)
											{
												jsonReturn.put("status", 29);
												return jsonReturn;
											}
											
											
											hql = "Select tp from Account tp where tp.distributor.id = " + distributorCardIssuer.getId();	
											log.info(requestId + "1. HQL = " + hql);
											distributorAcctCardIssuer = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
											hql = "Select tp from Account tp where tp.distributor.id = " + distributorCashCollector.getId();
											log.info(requestId + "2. HQL = " + hql);
											distributorAcctCashCollector = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
											
											if(distributorAcctCardIssuer==null)
											{
												//No Account setup for this distributor
												jsonReturn.put("status", 23);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											
											if(distributorAcctCashCollector==null)
											{
												//No Account setup for this distributor
												jsonReturn.put("status", 25);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											
											if((distributorAcctCashCollector.getCurrentBalance() - app.getMinimumBalance()) > amount)
											{
												Transaction transaction = new Transaction();
												
												String transactionRef = null;
												
												
												hql = "Select tp from Transaction tp where tolower(tp.orderRef) = '" + orderId.toLowerCase() + "'";
												Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
												if(txn!=null)
												{
													//Transaction with order id already exists
													jsonReturn.put("status", 26);
													jsonReturn.put("txn", jsonObject);
													return jsonReturn;
												}
												
												
												while(transactionRef==null)
												{
													String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
													hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
													txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
													if(txn==null)
														transactionRef = txnRef;
												}
												transactionRef = app.serverOption + "" + transactionRef;
												
												String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+device.getDeviceType().name()+user.getId();
												String messageResponse = transactionRef+"###"+orderId+"###"+terminalId;
												
												transaction.setTransactionRef(transactionRef);
												transaction.setOrderRef(orderId);
												transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
												transaction.setTransactionDate(new Date());
												transaction.setServiceType(ServiceType.valueOf(serviceType));
												transaction.setTransactingUser(user);
												transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
												transaction.setUserId(user.getId());
												transaction.setStatus(TransactionStatus.SUCCESS);
												transaction.setCard(ecard);
												transaction.setDevice(device);
												transaction.setDistributor(distributorCashCollector);
												transaction.setMerchant(null);
												transaction.setDeviceId(device.getId());
												transaction.setDeviceCode(device.getDeviceCode());
												transaction.setStartRoute(null);
												transaction.setEndRoute(null);
												transaction.setTollLane(null);
												transaction.setMessageRequest(messageRequest);
												transaction.setMessageResponse(messageResponse);
												transaction.setFixedCharge(0.00);
												transaction.setTransactionFee(0.00);
												transaction.setAmount(amount);
												transaction.setResponseCode(Response.Status.OK.getStatusCode());
												transaction.setOnUsTransaction(Boolean.TRUE);
												transaction.setTransactingBankId(distributorCashCollector.getDistributorMerchant().getMerchantBank().getId());
												transaction.setReceipientTransactingBankId(distributorCashCollector.getDistributorMerchant().getMerchantBank().getId());
												transaction.setTransactionDetail("TXFR FROM Distributor Acct " + distributorAcctCashCollector.getAccountIdentifier() + " the amount " + transaction.getAmount() + " | Credit Distributor Acct " + distributorAcctCardIssuer.getAccountIdentifier() + " | Credit Card -" + ecard.getPan());
												transaction.setNarration("Debit|Distributor Acct " + distributorAcctCashCollector.getAccountIdentifier() + "|ZMW" + transaction.getAmount() + "|Credit Distributor Acct " + distributorAcctCardIssuer.getAccountIdentifier() + "|Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
												transaction.setTrafficScheme(null);
												transaction.setTrafficSchemeId(null);
												transaction.setTrafficSchemeName(null);
												transaction.setCrCardId(ecard.getId());
												transaction.setCard(ecard);
												/*Debit Cash Collecting Distributor Acct Because Distributor Collected Cash*/
												transaction.setDrDistributorAccountId(distributorAcctCashCollector.getId());
												transaction.setDrDistributorId(distributorAcctCashCollector.getId());
												transaction.setDrMerchantId(merchantCashCollector.getId());
												transaction.setDrBankId(merchantCashCollector.getMerchantBank().getId());
												transaction.setDrDistributorName(distributorCashCollector.getCompanyName());
												transaction.setDrMerchantName(merchantCashCollector.getMerchantName());
												transaction.setDrBankName(merchantCashCollector.getMerchantBank().getBankName());
												transaction.setDrCardPan(null);
												/*-------------------------------*/
												transaction.setCrCardPan(ecard.getPan());
												transaction.setCrDistributorName(null);
												transaction.setCrMerchantName(null);
												transaction.setCrBankName(null);
												transaction.setCrCardId(null);
												transaction.setCrDistributorAccountId(null);
												transaction.setCrDistributorId(null);
												transaction.setCrMerchantId(null);
												transaction.setCrBankId(null);
												transaction.setUpdated_at(new Date());
												transaction.setCreated_at(new Date());
												transaction.setPaymentMeans(PaymentMeans.CARD);
												transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
												transaction.setExtraDetails(extraDetails);
												transaction.setServerOption(app.serverOption);
												transaction = (Transaction)swpService_.createNewRecord(transaction);
												
												transaction.setReceiptNo(distributorCashCollector.getDistributorCode() + "/" + zeroPadNumber(transaction.getId()));
												swpService_.updateRecord(transaction);
												
												
												
												
												AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
												
												ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
												ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
												swpService.updateRecord(ecard);
												ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
												
												distributorAcctCashCollector.setCurrentBalance(distributorAcctCashCollector.getCurrentBalance() - amount);
												swpService.updateRecord(distributorAcctCashCollector);
												ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, distributorAcctCashCollector.getId(), Account.class.getName());
												
												//distributorAcctCardIssuer.setCurrentBalance(distributorAcctCardIssuer.getCurrentBalance()+amount);
												//swpService.updateRecord(distributorAcctCashCollector);
												//ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
												//		user!=null ? user.getUsername() : null, distributorAcctCardIssuer.getId(), Account.class.getName());
												
												
												

												if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
												{
													String message = "Hello, NRFA Card Credit CR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + ecard.getCurrentBalance();;
										            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
													try
													{
														new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
													}
													catch(Exception e)
													{
														e.printStackTrace();
													}
													
												}
												if(distributorCashCollector.getContactMobile()!=null)
												{
													String message = "Hello, NRFA Account Debit DR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + distributorAcctCashCollector.getCurrentBalance();;
										            UtilityHelper.sendSMS(this.swpService, message, distributorCashCollector.getContactMobile());
													try
													{
														new Thread(new SmsSender(this.swpService, message, distributorCashCollector.getContactMobile())).start();
													}
													catch(Exception e)
													{
														e.printStackTrace();
													}
												}
												
	
												
												jsonObject.put("currentBalance", ecard.getCurrentBalance());
												jsonObject.put("receiptNo", transaction.getReceiptNo());
												jsonObject.put("amountDebited", transaction.getAmount());
												jsonObject.put("cardPan", ecard.getPan());
												jsonObject.put("transactionFee", transaction.getTransactionFee());
												jsonObject.put("transactionStatus", transaction.getStatus().name());
												jsonObject.put("paymentRef", transactionRef);
												
												jsonReturn.put("status", 22);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											else
											{
												//Insufficient balance in Distributor Acct
												//Balance is invalid
												jsonReturn.put("status", 3);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
										}else
										{
											//Hash failed
											jsonReturn.put("status", 4);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
										
									}else
									{
										//Invalid Card - Expired Card
										jsonReturn.put("status", 5);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
								}
								else
								{
									//Invalid device status
									jsonReturn.put("status", 7);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Merchant Status invalid
								jsonReturn.put("status", 8);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}else
						{
							//Distributor Status invalid
							jsonReturn.put("status", 9);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS))
				{

					log.info(requestId + "Servicie type - CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS starts here");
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.BANK_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					log.info(requestId + "hql =" + hql);
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);

					Merchant merchant = ecard.getMerchant();
					Distributor distributor = ecard.getDistributor();
					Device device = null;
					if(!merchant.getMerchantCode().equals(user.getBankCode()))
					{
						jsonReturn.put("status", 27);
						return jsonReturn;
					}
					
					if(ecard!=null && ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3))
					{
						log.info(requestId + "Activate Level 3 =");
						
						
						log.info(requestId + "Distributor Status = Active");
						if(merchant!=null && merchant.getStatus().equals(MerchantStatus.ACTIVE))
						{
							log.info(requestId + "Merchant Status = Active");
							hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
							device = (Device)swpService_.getUniqueRecordByHQL(hql);
							
							if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
							{
								log.info(requestId + "Device Status = Active");
								Date todayDate = new Date();
								Date expDate = ecard.getExpiryDate();
								
								if(expDate.after(todayDate))
								{
									log.info(requestId + "Expiry date afar");
									String api_key = device.getTerminalApiKey();
									/*if(UtilityHelper.validateTransactionHash(
											hash, 
											terminalId,
											serviceType,
											orderId,
											amount,
											api_key)==true)*/
									if(1==1)
									{
										log.info(requestId + "hash worked");
										
										hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
										Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
										if(oldTrxn.size()>0)
										{
											jsonReturn.put("status", 29);
											return jsonReturn;
										}
										
										hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId() + " AND tp.status = " + AccountStatus.ACTIVE.ordinal();
										log.info(requestId + "HQL = " + hql);
										com.probase.nrfa.models.Account distributorAcct = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
										
										if(distributorAcct==null)
										{
											//No Account setup for this distributor
											jsonReturn.put("status", 23);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
										
										
										Transaction transaction = new Transaction();
										
										String transactionRef = null;
										while(transactionRef==null)
										{
											String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
											hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
											Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
											if(txn==null)
												transactionRef = txnRef;
										}
										transactionRef = app.serverOption + "" + transactionRef;
										
										String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+device.getDeviceType().name()+user.getId();
										String messageResponse = transactionRef+"###"+orderId+"###"+terminalId;
										
										transaction.setTransactionRef(transactionRef);
										transaction.setOrderRef(orderId);
										transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
										transaction.setTransactionDate(new Date());
										transaction.setServiceType(ServiceType.valueOf(serviceType));
										transaction.setTransactingUser(user);
										transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
										transaction.setUserId(user.getId());
										transaction.setStatus(TransactionStatus.SUCCESS);
										transaction.setCard(ecard);
										transaction.setDevice(device);
										transaction.setDistributor(null);
										transaction.setMerchant(ecard.getMerchant());
										transaction.setDeviceId(device.getId());
										transaction.setDeviceCode(device.getDeviceCode());
										transaction.setStartRoute(null);
										transaction.setEndRoute(null);
										transaction.setTollLane(null);
										transaction.setMessageRequest(messageRequest);
										transaction.setMessageResponse(messageResponse);
										transaction.setFixedCharge(0.00);
										transaction.setTransactionFee(0.00);
										transaction.setAmount(amount);
										transaction.setResponseCode(Response.Status.OK.getStatusCode());
										transaction.setOnUsTransaction(Boolean.TRUE);
										transaction.setTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setReceipientTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setTransactionDetail("Credit: Distributor Acct " + distributorAcct.getAccountIdentifier() + " the amount " + transaction.getAmount() + " | Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
										transaction.setNarration("Credit|Distributor Acct " + distributorAcct.getAccountIdentifier() + "|ZMW" + transaction.getAmount() + "|Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
										transaction.setTrafficScheme(null);
										transaction.setTrafficSchemeId(null);
										transaction.setTrafficSchemeName(null);
										/*Distributor Does not receive Cash Directly*/
										/*Merchant Receives Cash and transfers same to Card*/
										transaction.setCrCardId(ecard.getId());
										transaction.setCrCardPan(ecard.getPan());
										transaction.setCrDistributorAccountId(null);
										transaction.setCrDistributorId(null);
										transaction.setCrDistributorName(null);
										transaction.setCrDistributorName(null);
										transaction.setCrMerchantName(null);
										transaction.setCrMerchantId(null);
										transaction.setCrBankId(null);
										/*transaction.setCrDistributorAccountId(distributorAcct.getId());
										transaction.setCrDistributorId(ecard.getDistributor().getId());
										transaction.setCrMerchantId(ecard.getMerchant().getId());
										transaction.setCrBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setCrDistributorName(ecard.getDistributor().getCompanyName());
										transaction.setCrMerchantName(ecard.getMerchant().getMerchantName());
										transaction.setCrBankName(ecard.getMerchant().getMerchantBank().getBankName());*/
										/*------------------------------------*/
										transaction.setDrCardPan(null);
										transaction.setDrBankName(null);
										transaction.setDrCardId(null);
										transaction.setDrDistributorAccountId(null);
										transaction.setDrDistributorId(null);
										transaction.setDrMerchantId(ecard.getMerchant().getId());
										transaction.setDrBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setDrMerchantName(ecard.getMerchant().getMerchantName());
										transaction.setDrBankName(ecard.getMerchant().getMerchantBank().getBankName());
										
										transaction.setUpdated_at(new Date());
										transaction.setCreated_at(new Date());
										transaction.setPaymentMeans(PaymentMeans.CARD);
										transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
										transaction.setExtraDetails(extraDetails);
										transaction.setServerOption(app.serverOption);
										transaction = (Transaction)swpService_.createNewRecord(transaction);
										transaction.setReceiptNo(ecard.getMerchant().getMerchantCode() + "/" + zeroPadNumber(transaction.getId()));
										swpService_.updateRecord(transaction);
										
										
										AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS, requestId, this.swpService, 
												user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
										
										ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
										ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
										swpService.updateRecord(ecard);
										ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
												user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
										
										//distributorAcct.setCurrentBalance(distributorAcct.getCurrentBalance()+amount);
										//swpService.updateRecord(distributorAcct);
										//ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
										//		user!=null ? user.getUsername() : null, distributorAcct.getId(), Account.class.getName());

										if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
										{
											String message = "Hello, NRFA Card Credit CR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + ecard.getCurrentBalance();;
								            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
											try
											{
												new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
											}
											catch(Exception e)
											{
												e.printStackTrace();
											}
										}
										/*if(distributorAcct.getDistributor().getContactMobile()!=null)
										{
											String message = "Hello, NRFA Account Credit DR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo();
								            //UtilityHelper.sendSMS(this.swpService, message, distributorAcct.getDistributor().getContactMobile());
											new Thread(new SmsSender(this.swpService, message, distributorAcct.getDistributor().getContactMobile())).start();
										}*/
										
										
										
										jsonObject.put("currentBalance", ecard.getCurrentBalance());
										jsonObject.put("receiptNo", transaction.getReceiptNo());
										jsonObject.put("amountDebited", transaction.getAmount());
										jsonObject.put("cardPan", ecard.getPan());
										jsonObject.put("transactionFee", transaction.getTransactionFee());
										jsonObject.put("transactionStatus", transaction.getStatus().name());
										jsonObject.put("paymentRef", transactionRef);
										
										jsonReturn.put("status", 22);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}else
									{
										//Hash failed
										jsonReturn.put("status", 4);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
									
								}else
								{
									//Invalid Card - Expired Card
									jsonReturn.put("status", 5);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Invalid device status
								jsonReturn.put("status", 7);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}
						else
						{
							//Merchant Status invalid
							jsonReturn.put("status", 8);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
						
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_NOTONUS))
				{

					log.info(requestId + "Servicie type - CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS starts here");
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.BANK_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					log.info(requestId + "hql =" + hql);
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);

					String userBankCode = user.getBankCode();
					hql = "Select tp from Merchant tp where tp.merchantCode = '" + userBankCode + "'";
					log.info(requestId + "hql =" + hql);
					Merchant merchantCashCollector = (Merchant)swpService_.getUniqueRecordByHQL(hql);
					
					
					Merchant merchantCardIssuer = ecard.getMerchant();
					Distributor distributorCardIssuer = ecard.getDistributor();
					Device device = null;
					
					if(merchantCardIssuer.getMerchantCode().equals(user.getBankCode()))
					{
						jsonReturn.put("status", 27);
						return jsonReturn;
					}
					
					if(ecard!=null && ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3))
					{
						log.info(requestId + "Activate Level 3 =");
						
						
						log.info(requestId + "Distributor Status = Active");
						if(merchantCashCollector!=null && merchantCashCollector.getStatus().equals(MerchantStatus.ACTIVE) && 
								merchantCardIssuer!=null && merchantCardIssuer.getStatus().equals(MerchantStatus.ACTIVE))
						{
							log.info(requestId + "Merchant Status = Active");
							hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
							device = (Device)swpService_.getUniqueRecordByHQL(hql);
							
							if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
							{
								log.info(requestId + "Device Status = Active");
								Date todayDate = new Date();
								Date expDate = ecard.getExpiryDate();
								
								if(expDate.after(todayDate))
								{
									log.info(requestId + "Expiry date afar");
									String api_key = device.getTerminalApiKey();
									/*if(UtilityHelper.validateTransactionHash(
											hash, 
											terminalId,
											serviceType,
											orderId,
											amount,
											api_key)==true)*/
									if(1==1)
									{
										log.info(requestId + "hash worked");
										
										hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
										Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
										if(oldTrxn.size()>0)
										{
											jsonReturn.put("status", 29);
											return jsonReturn;
										}
										
										
										hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId() + " AND tp.status = " + AccountStatus.ACTIVE.ordinal();
										log.info(requestId + "HQL = " + hql);
										Account distributorAcctCardIssuer = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
										
										if(distributorAcctCardIssuer==null)
										{
											//No Account setup for this distributor
											jsonReturn.put("status", 23);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
										
										
										Transaction transaction = new Transaction();
										
										String transactionRef = null;
										while(transactionRef==null)
										{
											String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
											hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
											Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
											if(txn==null)
												transactionRef = txnRef;
										}
										transactionRef = app.serverOption + "" + transactionRef;
										
										String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+device.getDeviceType().name()+user.getId();
										String messageResponse = transactionRef+"###"+orderId+"###"+terminalId;
										
										transaction.setTransactionRef(transactionRef);
										transaction.setOrderRef(orderId);
										transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
										transaction.setTransactionDate(new Date());
										transaction.setServiceType(ServiceType.valueOf(serviceType));
										transaction.setTransactingUser(user);
										transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
										transaction.setUserId(user.getId());
										transaction.setStatus(TransactionStatus.SUCCESS);
										transaction.setCard(ecard);
										transaction.setDevice(device);
										transaction.setDistributor(null);
										transaction.setMerchant(merchantCashCollector);
										transaction.setDeviceId(device.getId());
										transaction.setDeviceCode(device.getDeviceCode());
										transaction.setStartRoute(null);
										transaction.setEndRoute(null);
										transaction.setTollLane(null);
										transaction.setMessageRequest(messageRequest);
										transaction.setMessageResponse(messageResponse);
										transaction.setFixedCharge(0.00);
										transaction.setTransactionFee(0.00);
										transaction.setAmount(amount);
										transaction.setResponseCode(Response.Status.OK.getStatusCode());
										transaction.setOnUsTransaction(Boolean.FALSE);
										transaction.setTransactingBankId(merchantCashCollector.getMerchantBank().getId());
										transaction.setReceipientTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setTransactionDetail("Credit: Distributor Acct " + distributorAcctCardIssuer.getAccountIdentifier() + " the amount " + transaction.getAmount() + " | Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4) + "|Paid From " + ecard.getMerchant().getMerchantName());
										transaction.setNarration("Credit|Distributor Acct " + distributorAcctCardIssuer.getAccountIdentifier() + "|ZMW" + transaction.getAmount() + "|Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4) + "|Paid From " + ecard.getMerchant().getMerchantName());
										transaction.setTrafficScheme(null);
										transaction.setTrafficSchemeId(null);
										transaction.setTrafficSchemeName(null);
										transaction.setCrCardId(ecard.getId());
										transaction.setCrCardPan(ecard.getPan());
										/*transaction.setCrDistributorAccountId(distributorAcctCardIssuer.getId());
										transaction.setCrDistributorId(ecard.getDistributor().getId());
										transaction.setCrMerchantId(ecard.getMerchant().getId());
										transaction.setCrBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setCrDistributorName(ecard.getDistributor().getCompanyName());
										transaction.setCrMerchantName(ecard.getMerchant().getMerchantName());
										transaction.setCrBankName(ecard.getMerchant().getMerchantBank().getBankName());*/
										transaction.setCrDistributorAccountId(null);
										transaction.setCrDistributorId(null);
										transaction.setCrMerchantId(null);
										transaction.setCrBankId(null);
										transaction.setCrDistributorName(null);
										transaction.setCrMerchantName(null);
										transaction.setCrBankName(null);
										/*----------------------*/
										transaction.setDrCardPan(null);
										transaction.setDrDistributorName(null);
										transaction.setDrMerchantName(merchantCashCollector.getMerchantName());
										transaction.setDrBankName(merchantCashCollector.getMerchantBank().getBankName());
										transaction.setDrCardId(null);
										transaction.setDrDistributorAccountId(null);
										transaction.setDrDistributorId(null);
										transaction.setDrMerchantId(merchantCashCollector.getId());
										transaction.setDrBankId(merchantCashCollector.getMerchantBank().getId());
										transaction.setUpdated_at(new Date());
										transaction.setCreated_at(new Date());
										transaction.setPaymentMeans(PaymentMeans.CARD);
										transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
										transaction.setExtraDetails(extraDetails);
										transaction.setServerOption(app.serverOption);
										transaction = (Transaction)swpService_.createNewRecord(transaction);
										
										transaction.setReceiptNo(merchantCashCollector.getMerchantCode() + "/" + zeroPadNumber(transaction.getId()));
										swpService_.updateRecord(transaction);
										
										AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_NOTONUS, requestId, this.swpService, 
												user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
										
										ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
										ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
										swpService.updateRecord(ecard);
										ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
												user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
										
										//distributorAcctCardIssuer.setCurrentBalance(distributorAcctCardIssuer.getCurrentBalance()+amount);
										//swpService.updateRecord(distributorAcctCardIssuer);
										//ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
										//		user!=null ? user.getUsername() : null, distributorAcctCardIssuer.getId(), Account.class.getName());
										
										
										if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
										{
											String message = "Hello, NRFA Card Credit CR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + ecard.getCurrentBalance();;
								            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
											try
											{
												new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
											}
											catch(Exception e)
											{
												e.printStackTrace();
											}
										}
										//if(distributorAcctCardIssuer.getDistributor().getContactMobile()!=null)
										//{
										//	String message = "Hello, NRFA Account Credit DR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo();
								        //    UtilityHelper.sendSMS(this.swpService, message, distributorAcctCardIssuer.getDistributor().getContactMobile());
										//}

										jsonObject.put("currentBalance", ecard.getCurrentBalance());
										jsonObject.put("receiptNo", transaction.getReceiptNo());
										jsonObject.put("amountDebited", transaction.getAmount());
										jsonObject.put("cardPan", ecard.getPan());
										jsonObject.put("transactionFee", transaction.getTransactionFee());
										jsonObject.put("transactionStatus", transaction.getStatus().name());
										jsonObject.put("paymentRef", transactionRef);
										
										jsonReturn.put("status", 22);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}else
									{
										//Hash failed
										jsonReturn.put("status", 4);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
									
								}else
								{
									//Invalid Card - Expired Card
									jsonReturn.put("status", 5);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Invalid device status
								jsonReturn.put("status", 7);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}
						else
						{
							//Merchant Status invalid
							jsonReturn.put("status", 8);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
						
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else
				{
					//Invalid Service Type
					jsonReturn.put("status", 11);
					jsonReturn.put("txn", jsonObject);
					return jsonReturn;
				}
			}
			else
			{
				//user is null
				jsonReturn.put("status", 12);
				jsonReturn.put("txn", jsonObject);
				return jsonReturn;
			}
    	}catch(Exception e)
    	{
    		e.printStackTrace();
    		return null;
    	}
    }

    
    
    public JSONObject handleCardDebitForToll(String cardPan, String orderId, String terminalId, Double amount, String narration, 
    		String serviceType, String extraDetails, String hash, String routeCode, Integer tollLane, 
    		String trafficSchemeCode, String channel, User user, String roleCode, String carPlateNumber, 
    		String nfraCurrency, Application app, SwpService swpService_, String requestId, String ipAddress)
    {
    	
    	//ServiceType.CARD_DEBIT_AT_TOLL
    	/*ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS;
    	
    	 * Customer walks in bank to credit their card at the bank that owns the card
    	 * 1. Cashier collects cash
    	 * 2. Cashier uses bank deposit system to log payment
    	 * 3. Cashier uses POS or SmartPay to log payment of cash
    	 * 4. POS or smartpay informs NRFA card was credited
    	 * 		A. Credit Distributor Account who owns the card
    	 * 		B. Update Card balance with new money
    	 * 
    	 
    	ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_NOTONUS;
    	
    	 * Customer walks in bank to credit their card at the bank that does not own the card
    	 * 1. Cashier collects cash
    	 * 2. Cashier uses bank deposit system to log payment and do transfer to cards bank
    	 * 3. Cash hits distributors account who owns the card
    	 * 4. Cashier uses POS or SmartPay to log payment of cash
    	 * 5. POS or smartpay informs NRFA card was credited
    	 * 		A. Credit Distributor Account who owns the card
    	 * 		B. Update Card balance with new money
    	 * 
    	 
    	ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS;
    	
    	 * Customer walks to a distributor that banks with the bank that owns the card
    	 * 1. Distributor collects cash
    	 * 2. Distributor uses POS or SmartPay to log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA card was credited
    	 * 		A. Credit Distributor Account who owns the card
    	 * 		B. Update Card balance with new money
    	 * 
    	 
    	ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS;
    	
    	 * Customer walks to a distributor that doesnt bank with the bank that owns the card
    	 * 1. Distributor collects cash
    	 * 2. Distributor uses POS or SmartPay to do transfer & log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA card was credited
    	 * 		A. Credit Distributor Account who owns the card
    	 * 		B. Update Card balance with new money
    	 * 
    	 
    	ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_DISTRIBUTOR_ACCOUNT;
    	
    	 * Distributor deposits cash into distributors account
    	 * 1. Distributor walks into bank
    	 * 2. Bank Staff uses POS or SmartPay to log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA that distributor account was credited
    	 * 		A. Credit Distributor Account
    	 * 
    	 
    	ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_GENERAL_POOL_ACCOUNT;
    	
    	 * Distributor deposits cash into distributors account
    	 * 1. Distributor walks into bank
    	 * 2. Bank Staff uses POS or SmartPay to log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA that distributor account was credited
    	 * 		A. Credit General Pool Account
    	 * 		B. Credit Distributor Account
    	 * 
    	 */
    	
    	
    	
    	
    	
    	
    	try
    	{
	    	JSONObject jsonReturn = new JSONObject();
	    	
	    	JSONObject jsonObject = new JSONObject();
	    	jsonObject.put("orderId", orderId);
	    	jsonObject.put("terminalId", terminalId);
	    	jsonObject.put("amount", amount);
	    	jsonObject.put("serviceType", serviceType);
	    	jsonObject.put("hash", hash);
	    	jsonObject.put("routeCode", routeCode);
	    	jsonObject.put("tollLane", tollLane);
	    	jsonObject.put("channel", channel);
	    	if(nfraCurrency!=null)
	    		jsonObject.put("nfraCurrency", nfraCurrency);
	    	if(carPlateNumber!=null)
	    		jsonObject.put("carPlateNumber", carPlateNumber);
	    	
	    	
	    	
	    	
	    	if(nfraCurrency!=null && nfraCurrency!=NFRACurrency.ZAMBIAN_KWACHA.name())
	    	{
	    		/*if(ServiceType.valueOf(serviceType).equals(ServiceType.CASH_COLLECT_AT_TOLL))
	    		{
		    		jsonReturn.put("status", 30);
		    		return jsonReturn;
	    		}*/
	    		
	    	}
    		
	    	if(user!=null)
			{
	    		log.info(requestId + "serviceType - " + serviceType);
				if(ServiceType.valueOf(serviceType).equals(ServiceType.CARD_DEBIT_AT_TOLL))
				{
	
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_TOLL_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					log.info("hql --" + hql);
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);
					log.info("ecard status --" + ecard.getCardStatus().name());
					
					if(ecard!=null && ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3))
					{
						Merchant merchant = ecard.getMerchant();
						Distributor distributor = ecard.getDistributor();
						Device device = null;
						
						log.info("distributor status --" + distributor.getDistributorStatus().name());
						log.info("merchant status --" + merchant.getStatus().name());
						if(distributor!=null && distributor.getDistributorStatus().equals(DistributorStatus.ACTIVE))
						{
							if(merchant!=null && merchant.getStatus().equals(MerchantStatus.ACTIVE))
							{
								
								hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
								log.info("hql --" + hql);
								device = (Device)swpService_.getUniqueRecordByHQL(hql);
								
								log.info("device==" + device.getStatus().name());
								
								if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
								{
	
									TrafficScheme trafficScheme = null;
									if(serviceType.equals(ServiceType.CARD_DEBIT_AT_TOLL.name()))
									{
										hql = "Select tp from TrafficScheme tp where tp.schemeCode = '" + trafficSchemeCode + "'";
										log.info("hql--->" + hql);
										trafficScheme = (TrafficScheme)swpService_.getUniqueRecordByHQL(hql);
										log.info("trafficScheme==" + new Gson().toJson(trafficScheme));
									}
									
									log.info("serviceType==" + serviceType);
									if(serviceType.equals(ServiceType.CARD_DEBIT_AT_TOLL.name()) && trafficScheme!=null && trafficScheme.getTrafficSchemeStatus().equals(Boolean.TRUE))
									{
										Date todayDate = new Date();
										Date expDate = ecard.getExpiryDate();
										log.info("expDate==" + sdf1.format(expDate));
										
										if(expDate.after(todayDate))
										{
											log.info("after==");
											String api_key = device.getTerminalApiKey();
											log.info("api_key==" + api_key);
											/*if(UtilityHelper.validateTransactionHash(
													hash, 
													terminalId,
													serviceType,
													orderId,
													amount,
													api_key)==true)*/
											if(1==1)
											{
												//if((amount - app.getMinimumBalance())>balance)
												
												log.info("amount==" + amount);
												
												JSONObject calcResp = calculateAmountBasedOnExceptionAndPromotions(ecard, null, amount, routeCode, 
											    		ecard.getCardScheme(), trafficScheme, swpService_);
												log.info("calcResp==" + calcResp.toString());
												amount = calcResp.getDouble("amount");

									    		Long exceptionId = calcResp.has("exceptionId") ? calcResp.getLong("exceptionId") : null;
									    		Long promotionId = calcResp.has("promotionId") ? calcResp.getLong("promotionId") : null;
												Double exceptionAmountApplied = calcResp.has("exceptionId") ? calcResp.getDouble("appliedAmount") : null;
									    		Double promotionAmountApplied = calcResp.has("promotionId") ? calcResp.getDouble("appliedAmount") : null;
							            		
												
												
												
												//Double balance = ecard.getCurrentBalance();
												//if(balance - app.getMinimumBalance() > amount)
												//{
									    		Double balance = ecard.getCurrentBalance();
												Distributor cardDistributor = ecard.getDistributor();
												DistributorType cardDistributorType = cardDistributor.getDistributorType();
												FundingAccountType distributorFundingAccountType = cardDistributor.getFundingAccountType();
												
												hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId();
												com.probase.nrfa.models.Account distributorAcct = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
												
												Double cardDistributorBalance = distributorAcct.getCurrentBalance();
												boolean proceed = false;
												boolean debitCardTrue = false;
												
												//For Non-Corporate Account Users Force Card Bal to be More
												if(cardDistributorType.equals(DistributorType.INDIVIDUAL) && (balance - app.getMinimumBalance() > amount))
												{
													proceed = true;
													debitCardTrue = true;
												}
												else if(cardDistributorType.equals(DistributorType.CORPORATE) 
														&& distributorFundingAccountType.equals(FundingAccountType.DISTRIBUTOR_BANK_ACCOUNT) 
														&& (balance - app.getMinimumBalance() > amount))
												{
													proceed = true;
													debitCardTrue = true;
												}
												else if(cardDistributorType.equals(DistributorType.CORPORATE) 
														&& distributorFundingAccountType.equals(FundingAccountType.DISTRIBUTOR_BANK_ACCOUNT) 
														&& (cardDistributorBalance - app.getMinimumBalance() > amount))
												{
													proceed = true;
													debitCardTrue = false;
												}
													
												
												//if(balance - app.getMinimumBalance() > amount)
												if(proceed==true)
												{
													//hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId();
													//com.probase.nrfa.models.Account distributorAcct = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
													
													
													hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
													Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
													if(oldTrxn.size()>0)
													{
														jsonReturn.put("status", 29);
														return jsonReturn;
													}
													
													
													Transaction transaction = new Transaction();
													
													String transactionRef = null;
													while(transactionRef==null)
													{
														String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
														hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
														Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
														if(txn==null)
															transactionRef = txnRef;
													}
													
													hql = "Select tp from TrafficTollRoute tp where tp.routeCode = '" + routeCode + "'";
													com.probase.nrfa.models.TrafficTollRoute trafficTollRoute = (com.probase.nrfa.models.TrafficTollRoute)swpService_.getUniqueRecordByHQL(hql);
													if(trafficTollRoute==null)
													{
														jsonReturn.put("status", 13);
														return jsonReturn;
													}
													
													String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+com.probase.nrfa.enumerations.Channel.POS.name()+user.getId();
													String messageResponse = transactionRef+"###"+orderId+"###"+terminalId+"###"+trafficTollRoute.getStartRouteName()
															+"###"+trafficTollRoute.getEndRouteName()+"###"+tollLane;
													
													transaction.setTransactionRef(transactionRef);
													transaction.setServerOption(0);
													transaction.setOrderRef(orderId);
													transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
													transaction.setTransactionDate(new Date());
													transaction.setServiceType(ServiceType.valueOf(serviceType));
													transaction.setTransactingUser(user);
													transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
													transaction.setUserId(user.getId());
													transaction.setStatus(TransactionStatus.SUCCESS);
													transaction.setCard(ecard);
													transaction.setDevice(device);
													transaction.setDistributor(null);
													if(debitCardTrue == false)
													{
														transaction.setDistributor(cardDistributor);
													}
													
													transaction.setMerchant(null);
													transaction.setDeviceId(device.getId());
													transaction.setDeviceCode(device.getDeviceCode());
													transaction.setStartRoute(trafficTollRoute.getStartRouteName());
													transaction.setEndRoute(trafficTollRoute.getEndRouteName());
													transaction.setTollLane(tollLane);
													transaction.setMessageRequest(messageRequest);
													transaction.setMessageResponse(messageResponse);
													transaction.setFixedCharge(ecard.getCardScheme().getOverrideFixedFee());
													transaction.setTransactionFee(ecard.getCardScheme().getOverrideTransactionFee());
													transaction.setAmount(amount);
													transaction.setResponseCode(Response.Status.OK.getStatusCode());
													transaction.setOnUsTransaction(Boolean.TRUE);
													transaction.setTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
													transaction.setReceipientTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
													transaction.setTransactionDetail("Debit: NRFA TollCard #" + ecard.getPan() + " the amount " + transaction.getAmount() + " into Merchant Code #" + merchant.getMerchantCode());
													transaction.setNarration("Debit|NRFA TollCard|#" + ecard.getPan() + "|ZMW" + transaction.getAmount() + "|Merchant Code #" + merchant.getMerchantCode());
													transaction.setTrafficScheme(trafficScheme);
													transaction.setTrafficSchemeId(trafficScheme.getId());
													transaction.setTrafficSchemeName(trafficScheme.getSchemeName());
													
													/*Debit card distributor account*/
													transaction.setCrCardId(null);
													transaction.setCrDistributorAccountId(null);
													transaction.setCrDistributorId(null);
													transaction.setCrMerchantId(null);
													transaction.setCrBankId(null);
													transaction.setCrCardPan(null);
													transaction.setCrDistributorName(null);
													transaction.setCrMerchantName(null);
													transaction.setCrBankName(null);
													/*------------------------------------*/
													transaction.setDrCardPan(ecard.getPan());
													transaction.setDrDistributorName(ecard.getDistributor().getDistributorName());
													transaction.setDrMerchantName(ecard.getDistributor().getDistributorMerchant().getMerchantName());
													transaction.setDrBankName(distributorAcct.getBank().getBankName());
													transaction.setDrCardId(ecard.getId());
													if(debitCardTrue == false)
													{
														transaction.setDrCardId(null);
														transaction.setCardOverDraft(true);
													}
													transaction.setDrDistributorAccountId(distributorAcct.getId());
													transaction.setDrDistributorId(ecard.getDistributor().getId());
													transaction.setDrMerchantId(ecard.getMerchant().getId());
													transaction.setDrBankId(distributorAcct.getBank().getId());
													transaction.setUpdated_at(new Date());
													transaction.setCreated_at(new Date());
													transaction.setPaymentMeans(PaymentMeans.CARD);
													transaction.setCarPlateNumber(carPlateNumber);
													transaction.setExpectedCarPlateNumber(ecard.getDefaultCarPlateNumber());
													transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
													transaction.setExceptionAmountApplied(exceptionAmountApplied);
													transaction.setPromotionAmountApplied(promotionAmountApplied);
													transaction.setExceptionId(exceptionId);
													transaction.setPromotionId(promotionId);
													transaction.setExtraDetails(extraDetails);
													transaction = (Transaction)swpService_.createNewRecord(transaction);
													
													transaction.setReceiptNo(trafficTollRoute.getRouteCode() + "/" + zeroPadNumber(transaction.getId()));
													swpService_.updateRecord(transaction);
													

									    			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
									    			String currentMonthIndex = sdf.format(new Date());
									    			
													if(ecard.getCurrentMonthIndex()==currentMonthIndex)
													{
														ecard.setCurrentMonthTollDebitTransactionCount(ecard.getCurrentMonthTollDebitTransactionCount() + 1);
													}
													else
													{
														ecard.setCurrentMonthTollDebitTransactionCount(1);
														ecard.setCurrentMonthIndex(currentMonthIndex);
													}
													
													AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_DEBIT_AT_TOLL, requestId, this.swpService, 
															user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
													
													ecard.setCurrentBalance(ecard.getCurrentBalance() - amount);
													if(ecard.getDefaultCarPlateNumber()==null)
														ecard.setDefaultCarPlateNumber(carPlateNumber);
													if(ecard.getDefaultTrafficScheme()==null)
														ecard.setDefaultTrafficScheme(trafficScheme);
													
													ecard.setTotalDebited((ecard.getTotalDebited()==null ? 0 : ecard.getTotalDebited()) + amount);
													swpService.updateRecord(ecard);
													
													if(debitCardTrue == false)
													{
														distributorAcct.setCurrentBalance(distributorAcct.getCurrentBalance() - amount);
														swpService.updateRecord(distributorAcct);
														
														if(distributorAcct.getCurrentBalance() < distributorAcct.getThresholdValue())
														{
															//Send EMAIL NOTIFICATION TO DISTRIBUTOR
															String subject = "NRFA Account Threshold Reached!";
															String emailBody = "Hello<br>Your NRFA account #" + distributorAcct.getAccountIdentifier() + " has reached its threshold level.<br>" +
																	"Your are advised to proceed to credit your account to continue using our NRFA toll cards.";
															BatchEmail batchEmail = new BatchEmail();
															batchEmail.setCreated_at(new Date());
															batchEmail.setUpdated_at(new Date());
															batchEmail.setEmailBody(emailBody);
															batchEmail.setReceipients(distributorAcct.getDistributor().getContactEmail());
															batchEmail.setSentYes(0);
															batchEmail.setSubject(subject);
															batchEmail.setDeleted_at(null);
															swpService.createNewRecord(batchEmail);
														}
													}
													
													ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
															user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
													
													if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
													{
														if(debitCardTrue == false)
														{
															String message = "Account #" + distributorAcct.getAccountIdentifier() + 
																	" has been debited K"+ transaction.getAmount() + "due to insufficient card funds. Card ending ***"+
																	ecard.getPan().substring(ecard.getPan().length()-4)+" @ " + trafficTollRoute.getStartRouteName() + ".\n" + 
																	(carPlateNumber==null ? "" : "Car Reg: " + carPlateNumber + "\n") +  "Receipt No: " + 
																	transaction.getReceiptNo() + "\nNew bal: " + ecard.getCurrentBalance();
															try
															{
																new Thread(new SmsSender(this.swpService, message, distributorAcct.getDistributor().getContactMobile())).start();
															}
															catch(Exception e)
															{
																e.printStackTrace();
															}
														}
														else
														{
															String message = "Hello"+ (ecard.getCustomer().getFirstName()==null ? "" : (" " + ecard.getCustomer().getFirstName() + "")) +", Your card ending ***"+
																	ecard.getPan().substring(ecard.getPan().length()-4)+" has been debited K"+ transaction.getAmount() + " @ " + trafficTollRoute.getStartRouteName() + ".\n" + 
																	(carPlateNumber==null ? "" : "Car Reg: " + carPlateNumber + "\n") +  "Receipt No: " + 
																	transaction.getReceiptNo() + "\nNew bal: " + ecard.getCurrentBalance();
															try
															{
																new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
															}
															catch(Exception e)
															{
																e.printStackTrace();
															}
														}
											            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
													}
	
													jsonObject.put("currentBalance", ecard.getCurrentBalance());
													jsonObject.put("receiptNo", transaction.getReceiptNo());
													jsonObject.put("amountDebited", transaction.getAmount());
													jsonObject.put("cardPan", ecard.getPan());
													jsonObject.put("transactionFee", transaction.getTransactionFee());
													jsonObject.put("transactionStatus", transaction.getStatus().name());
													jsonObject.put("paymentRef", transactionRef);
													jsonObject.put("trafficRuleApplied", exceptionAmountApplied!=null ? ("LOCAL USER EXCEPTION") : (promotionAmountApplied!=null ? ("FREQUENT USER RULE - DISCOUNT ZMW" + promotionAmountApplied) : "NORMAL CHARGE" ));
													
													jsonReturn.put("status", 2);
													jsonReturn.put("txn", jsonObject);
													return jsonReturn;
													
												}else
												{
													//Balance is invalid
													jsonReturn.put("status", 3);
													jsonReturn.put("txn", jsonObject);
													return jsonReturn;
												}
											}else
											{
												//Hash failed
												jsonReturn.put("status", 4);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											
										}else
										{
											//Invalid Card - Expired Card
											jsonReturn.put("status", 5);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
									}
									else
									{
										//Invalid Traffic SCheme
										jsonReturn.put("status", 6);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
								}
								else
								{
									//Invalid device status
									jsonReturn.put("status", 7);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Merchant Status invalid
								jsonReturn.put("status", 8);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}else
						{
							//Distributor Status invalid
							jsonReturn.put("status", 9);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CASH_COLLECT_AT_TOLL))
				{
	
					int x1 = 0;
					log.info(requestId + " = " + x1);
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_TOLL_STAFF.name())))
					{
						log.info(requestId + " = " + x1);
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					String hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
					log.info(requestId + " = " + hql);
					Device device = (Device)swpService_.getUniqueRecordByHQL(hql);
					
					if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
					{

						log.info(requestId + " = " + x1);
						TrafficScheme trafficScheme = null;
						
						hql = "Select tp from TrafficScheme tp where tp.schemeCode = '" + trafficSchemeCode + "'";
						log.info(requestId + " = " + hql);
						trafficScheme = (TrafficScheme)swpService_.getUniqueRecordByHQL(hql);
						
						
						if(trafficScheme!=null && trafficScheme.getTrafficSchemeStatus().equals(Boolean.TRUE))
						{

							log.info(requestId + " = " + x1);
							String api_key = device.getTerminalApiKey();
							/*if(UtilityHelper.validateTransactionHash(
									hash, 
									terminalId,
									serviceType,
									orderId,
									amount,
									api_key)==true)*/
							if(1==1)
							{
								hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
								log.info(requestId + " = " + hql);
								Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
								if(oldTrxn.size()>0)
								{
									log.info(requestId + " = " + x1);
									jsonReturn.put("status", 29);
									return jsonReturn;
								}

								log.info(requestId + " = " + x1);
								
								Transaction transaction = new Transaction();
								
								String transactionRef = null;
								while(transactionRef==null)
								{
									String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
									hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
									log.info(requestId + " = " + hql);
									Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
									if(txn==null)
										transactionRef = txnRef;
								}
								
								hql = "Select tp from TrafficTollRoute tp where tp.routeCode = '" + routeCode + "'";
								log.info(requestId + " = " + hql);
								com.probase.nrfa.models.TrafficTollRoute trafficTollRoute = (com.probase.nrfa.models.TrafficTollRoute)swpService_.getUniqueRecordByHQL(hql);
								if(trafficTollRoute==null)
								{
									log.info(requestId + " = " + x1);
									jsonReturn.put("status", 13);
									return jsonReturn;
								}
								

								log.info(requestId + " = " + x1);
								JSONObject calcResp = calculateAmountBasedOnExceptionAndPromotions(null, carPlateNumber, amount, routeCode, 
							    		null, trafficScheme, swpService_);
								log.info(requestId + " = " + x1);
								amount = calcResp.getDouble("amount");
								log.info(requestId + " = " + x1);
					    		Long exceptionId = calcResp.has("exceptionId") ? calcResp.getLong("exceptionId") : null;
								log.info(requestId + " = " + x1);
					    		Long promotionId = calcResp.has("promotionId") ? calcResp.getLong("promotionId") : null;
								log.info(requestId + " = " + x1);
								Double exceptionAmountApplied = calcResp.has("exceptionId") ? calcResp.getDouble("appliedAmount") : null;
								log.info(requestId + " = " + x1);
					    		Double promotionAmountApplied = calcResp.has("promotionId") ? calcResp.getDouble("appliedAmount") : null;
								log.info(requestId + " = " + x1);
								
								
								String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+com.probase.nrfa.enumerations.Channel.POS.name()+user.getId();
								log.info(requestId + " = " + x1);
								String messageResponse = transactionRef+"###"+orderId+"###"+terminalId+"###"+trafficTollRoute.getStartRouteName()
										+"###"+trafficTollRoute.getEndRouteName()+"###"+tollLane;
								log.info(requestId + " = " + x1);
								
								transaction.setTransactionRef(transactionRef);
								transaction.setServerOption(0);
								log.info(requestId + " = " + x1);
								transaction.setOrderRef(orderId);
								log.info(requestId + " = " + x1);
								transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
								log.info(requestId + " = " + x1);
								transaction.setTransactionDate(new Date());
								log.info(requestId + " = " + x1);
								transaction.setServiceType(ServiceType.valueOf(serviceType));
								log.info(requestId + " = " + x1);
								transaction.setTransactingUser(user);
								log.info(requestId + " = " + x1);
								transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
								transaction.setUserId(user.getId());
								log.info(requestId + " = " + x1);
								transaction.setStatus(TransactionStatus.SUCCESS);
								log.info(requestId + " = " + x1);
								transaction.setCard(null);
								log.info(requestId + " = " + x1);
								transaction.setDevice(device);
								log.info(requestId + " = " + x1);
								transaction.setDistributor(null);
								log.info(requestId + " = " + x1);
								transaction.setMerchant(null);
								log.info(requestId + " = " + x1);
								transaction.setDeviceId(device.getId());
								log.info(requestId + " = " + x1);
								transaction.setDeviceCode(device.getDeviceCode());
								log.info(requestId + " = " + x1);
								transaction.setStartRoute(trafficTollRoute.getStartRouteName());
								log.info(requestId + " = " + x1);
								transaction.setEndRoute(trafficTollRoute.getEndRouteName());
								log.info(requestId + " = " + x1);
								transaction.setTollLane(tollLane);
								log.info(requestId + " = " + x1);
								transaction.setMessageRequest(messageRequest);
								log.info(requestId + " = " + x1);
								transaction.setMessageResponse(messageResponse);
								log.info(requestId + " = " + x1);
								transaction.setFixedCharge(null);
								log.info(requestId + " = " + x1);
								transaction.setTransactionFee(null);
								log.info(requestId + " = " + x1);
								transaction.setAmount(amount);
								log.info(requestId + " = " + x1);
								transaction.setResponseCode(Response.Status.OK.getStatusCode());
								log.info(requestId + " = " + x1);
								transaction.setOnUsTransaction(Boolean.TRUE);
								log.info(requestId + " = " + x1);
								transaction.setTransactingBankId(null);
								log.info(requestId + " = " + x1);
								transaction.setReceipientTransactingBankId(null);
								log.info(requestId + " = " + x1);
								transaction.setTransactionDetail("Cash Payment:" + transaction.getAmount());
								log.info(requestId + " = " + x1);
								transaction.setNarration("Cash Payment|ZMW" + transaction.getAmount());
								log.info(requestId + " = " + x1);
								transaction.setTrafficScheme(trafficScheme);
								log.info(requestId + " = " + x1);
								transaction.setTrafficSchemeId(trafficScheme.getId());
								log.info(requestId + " = " + x1);
								transaction.setTrafficSchemeName(trafficScheme.getSchemeName());
								log.info(requestId + " = " + x1);
								transaction.setCrCardId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrDistributorAccountId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrDistributorId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrMerchantId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrBankId(null);
								log.info(requestId + " = " + x1);
								transaction.setCrCardPan(null);
								transaction.setCrDistributorName(null);
								log.info(requestId + " = " + x1);
								transaction.setCrMerchantName(null);
								log.info(requestId + " = " + x1);
								transaction.setCrBankName(null);
								log.info(requestId + " = " + x1);
								transaction.setDrCardPan(null);
								log.info(requestId + " = " + x1);
								transaction.setDrDistributorName(null);
								transaction.setDrMerchantName(null);
								transaction.setDrBankName(null);
								log.info(requestId + " = " + x1);
								transaction.setDrCardId(null);
								log.info(requestId + " = " + x1);
								transaction.setDrDistributorAccountId(null);
								transaction.setDrDistributorId(null);
								transaction.setDrMerchantId(null);
								transaction.setDrBankId(null);
								log.info(requestId + " = " + x1);
								transaction.setUpdated_at(new Date());
								transaction.setCreated_at(new Date());
								transaction.setPaymentMeans(PaymentMeans.CASH);
								transaction.setCarPlateNumber(carPlateNumber);
								log.info(requestId + " = " + x1);
								transaction.setExpectedCarPlateNumber(null);
								transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
								log.info(requestId + " = " + x1);
								transaction.setExceptionAmountApplied(exceptionAmountApplied);
								log.info(requestId + " = " + x1);
								transaction.setPromotionAmountApplied(promotionAmountApplied);
								log.info(requestId + " = " + x1);
								transaction.setExceptionId(exceptionId);
								log.info(requestId + " = " + x1);
								transaction.setPromotionId(promotionId);
								transaction.setExtraDetails(extraDetails);
								transaction = (Transaction)swpService_.createNewRecord(transaction);
								log.info(requestId + " = " + x1);
								transaction.setReceiptNo(trafficTollRoute.getRouteCode() + "/" + zeroPadNumber(transaction.getId()));
								log.info(requestId + " = " + x1);
								swpService_.updateRecord(transaction);
								log.info(requestId + " = " + x1);
								
								AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CASH_COLLECT_AT_TOLL, requestId, this.swpService, 
										user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
								log.info(requestId + " = " + x1);
								
								jsonObject.put("receiptNo", transaction.getReceiptNo());
								log.info(requestId + " = " + x1);
								jsonObject.put("amountDebited", transaction.getAmount());
								log.info(requestId + " = " + x1);
								jsonObject.put("transactionFee", transaction.getTransactionFee());
								log.info(requestId + " = " + x1);
								jsonObject.put("transactionStatus", transaction.getStatus().name());
								log.info(requestId + " = " + x1);
								jsonObject.put("paymentRef", transactionRef);
								log.info(requestId + " = " + x1);
								jsonObject.put("trafficRuleApplied", exceptionAmountApplied!=null ? ("LOCAL USER EXCEPTION") : (promotionAmountApplied!=null ? ("FREQUENT USER RULE - DISCOUNT ZMW" + promotionAmountApplied) : "NORMAL CHARGE" ));

								log.info(requestId + " = " + x1);
								jsonReturn.put("status", 2);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}else
							{
								//Hash failed
								jsonReturn.put("status", 4);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
								
							
						}
						else
						{
							//Invalid Traffic SCheme
							jsonReturn.put("status", 6);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
					}
					else
					{
						//Invalid device status
						jsonReturn.put("status", 7);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS))
				{

					log.info(requestId + "Servicie type - CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS starts here");
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.BANK_STAFF.name()) && !roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					log.info(requestId + "hql =" + hql);
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);
					
					if(ecard!=null && (ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_2) || ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3)))
					{
						log.info(requestId + "Activate Level 2 or 3 =");
						Merchant merchant = ecard.getMerchant();
						Distributor distributor = ecard.getDistributor();
						Device device = null;
						
						if(distributor!=null && distributor.getDistributorStatus().equals(DistributorStatus.ACTIVE))
						{
							log.info(requestId + "Distributor Status = Active");
							if(merchant!=null && merchant.getStatus().equals(MerchantStatus.ACTIVE))
							{
								log.info(requestId + "Merchant Status = Active");
								hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
								device = (Device)swpService_.getUniqueRecordByHQL(hql);
								
								if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
								{
									log.info(requestId + "Device Status = Active");
									Date todayDate = new Date();
									Date expDate = ecard.getExpiryDate();
									
									if(expDate.after(todayDate))
									{
										log.info(requestId + "Expiry date afar");
										String api_key = device.getTerminalApiKey();
										/*if(UtilityHelper.validateTransactionHash(
												hash, 
												terminalId,
												serviceType,
												orderId,
												amount,
												api_key)==true)*/
										if(1==1)
										{
											log.info(requestId + "hash worked");
											
											hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
											Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
											if(oldTrxn.size()>0)
											{
												jsonReturn.put("status", 29);
												return jsonReturn;
											}
											
											
											hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId();
											log.info(requestId + "HQL = " + hql);
											com.probase.nrfa.models.Account distributorAcct = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
											int x = 0;
											if(distributorAcct==null)
											{
												//No Account setup for this distributor
												jsonReturn.put("status", 23);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											log.info(1);
											
											
											if((distributorAcct.getCurrentBalance() - app.getMinimumBalance()) > amount)
											{
												log.info(2);
												Transaction transaction = new Transaction();
												log.info(3);
												String transactionRef = null;
												while(transactionRef==null)
												{
													log.info(4);
													String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
													hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
													log.info(hql);
													Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
													log.info(5);
													if(txn==null)
													{
														transactionRef = txnRef;
														log.info(6);
													}
												}
												log.info(7);
												String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+device.getDeviceType().name()+user.getId();
												String messageResponse = transactionRef+"###"+orderId+"###"+terminalId;
												log.info(8);
												transaction.setTransactionRef(transactionRef);
												transaction.setServerOption(0);
												log.info(9);
												transaction.setOrderRef(orderId);
												log.info(10);
												transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
												log.info(11);
												transaction.setTransactionDate(new Date());
												log.info(12);
												transaction.setServiceType(ServiceType.valueOf(serviceType));
												log.info(13);
												transaction.setTransactingUser(user);
												log.info(14);
												transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
												log.info(15);
												transaction.setUserId(user.getId());
												log.info(16);
												transaction.setStatus(TransactionStatus.SUCCESS);
												log.info(17);
												transaction.setCard(ecard);
												log.info(18);
												transaction.setDevice(device);
												log.info(19);
												transaction.setDistributor(ecard.getDistributor());
												log.info(20);
												transaction.setMerchant(null);
												log.info(21);
												transaction.setDeviceId(device.getId());
												log.info(22);
												transaction.setDeviceCode(device.getDeviceCode());
												log.info(23);
												transaction.setStartRoute(null);
												log.info(24);
												transaction.setEndRoute(null);
												log.info(25);
												transaction.setTollLane(null);
												log.info(26);
												transaction.setMessageRequest(messageRequest);
												log.info(27);
												transaction.setMessageResponse(messageResponse);
												log.info(28);
												transaction.setFixedCharge(0.00);
												log.info(29);
												transaction.setTransactionFee(0.00);
												log.info(30);
												transaction.setAmount(amount);
												log.info(31);
												transaction.setResponseCode(Response.Status.OK.getStatusCode());
												log.info(32);
												transaction.setOnUsTransaction(Boolean.TRUE);
												log.info(33);
												transaction.setTransactingBankId(distributor.getDistributorMerchant().getMerchantBank().getId());
												log.info(34);
												transaction.setReceipientTransactingBankId(distributor.getDistributorMerchant().getMerchantBank().getId());
												log.info(35);
												transaction.setTransactionDetail("Debit: Distributor Acct " + distributorAcct.getAccountIdentifier() + " the amount " + transaction.getAmount() + " | Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
												log.info(36);
												transaction.setNarration("Debit|Distributor Acct " + distributorAcct.getAccountIdentifier() + "|ZMW" + transaction.getAmount() + "|Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
												log.info(37);
												transaction.setTrafficScheme(null);
												log.info(38);
												transaction.setTrafficSchemeId(null);
												log.info(39);
												transaction.setTrafficSchemeName(null);
												log.info(40);
												transaction.setDrCardPan(null);
												log.info(41);
												/*Debit Card Distributor Account Because Distributor Has Collected Cash*/
												transaction.setDrDistributorAccountId(distributorAcct.getId());
												log.info(42);
												transaction.setDrDistributorId(ecard.getDistributor().getId());
												log.info(43);
												transaction.setDrMerchantId(ecard.getMerchant().getId());
												log.info(44);
												transaction.setDrBankId(ecard.getMerchant().getMerchantBank().getId());
												log.info(45);
												transaction.setDrCardPan(ecard.getPan());
												log.info(46);
												transaction.setDrDistributorName(ecard.getDistributor().getCompanyName());
												log.info(47);
												transaction.setDrMerchantName(ecard.getMerchant().getMerchantName());
												log.info(48);
												transaction.setDrBankName(ecard.getMerchant().getMerchantBank().getBankName());
												log.info(49);
												
												/*------------------------------*/
												
												transaction.setCrCardId(ecard.getId());
												log.info(50);
												transaction.setCrCardPan(ecard.getPan());
												log.info(51);
												transaction.setCrDistributorName(null);
												log.info(52);
												transaction.setCrMerchantName(null);
												log.info(53);
												transaction.setCrBankName(null);
												log.info(54);
												transaction.setCrCardId(null);
												log.info(55);
												transaction.setCrDistributorAccountId(null);
												log.info(56);
												transaction.setCrDistributorId(null);
												log.info(57);
												transaction.setCrMerchantId(null);
												log.info(58);
												transaction.setCrBankId(null);
												log.info(59);
												transaction.setUpdated_at(new Date());
												log.info(60);
												transaction.setCreated_at(new Date());
												log.info(61);
												transaction.setPaymentMeans(PaymentMeans.CARD);
												log.info(62);;
												transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
												log.info(63);
												transaction.setExtraDetails(extraDetails);
												log.info(64);
												transaction = (Transaction)swpService_.createNewRecord(transaction);
												log.info(65);
												
												transaction.setReceiptNo(ecard.getDistributor().getDistributorCode() + "/" + zeroPadNumber(transaction.getId()));
												log.info(66);
												swpService_.updateRecord(transaction);
												log.info(67);
												
												
												AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
												log.info(68);
												ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
												log.info(69);
												ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
												log.info(70);
												swpService.updateRecord(ecard);
												log.info(71);
												
												ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
												log.info(72);
												
												distributorAcct.setCurrentBalance(distributorAcct.getCurrentBalance()-amount);
												log.info(73);
												swpService.updateRecord(distributorAcct);
												log.info(74);
												ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, distributorAcct.getId(), Account.class.getName());
												log.info(75);
												
												
												if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
												{
													log.info(76);
													String message = "NRFA Card Credit CR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + ecard.getCurrentBalance();
										            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
													try
													{
														new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
													}
													catch(Exception e)
													{
														e.printStackTrace();
													}
												}
												if(transaction.getDistributor().getContactMobile()!=null)
												{
													log.info(77);
													String message = "NRFA Account Debit DR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + distributorAcct.getCurrentBalance();;
										            //UtilityHelper.sendSMS(this.swpService, message, transaction.getDistributor().getContactMobile());
													try
													{
														new Thread(new SmsSender(this.swpService, message, transaction.getDistributor().getContactMobile())).start();
													}
													catch(Exception e)
													{
														e.printStackTrace();
													}
												}
												log.info(78);
												jsonObject.put("currentBalance", ecard.getCurrentBalance());
												log.info(79);
												jsonObject.put("receiptNo", transaction.getReceiptNo());
												log.info(80);
												jsonObject.put("amountDebited", transaction.getAmount());
												log.info(81);
												jsonObject.put("cardPan", ecard.getPan());
												log.info(82);
												jsonObject.put("transactionFee", transaction.getTransactionFee());
												log.info(83);
												jsonObject.put("transactionStatus", transaction.getStatus().name());
												log.info(84);
												jsonObject.put("paymentRef", transactionRef);
												log.info(85);
												
												jsonReturn.put("status", 28);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											else
											{
												//Insufficient balance in Distributor Acct
												//Balance is invalid
												jsonReturn.put("status", 3);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
										}else
										{
											//Hash failed
											jsonReturn.put("status", 4);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
										
									}else
									{
										//Invalid Card - Expired Card
										jsonReturn.put("status", 5);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
								}
								else
								{
									//Invalid device status
									jsonReturn.put("status", 7);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Merchant Status invalid
								jsonReturn.put("status", 8);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}else
						{
							//Distributor Status invalid
							jsonReturn.put("status", 9);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS))
				{

					log.info(requestId + "Servicie type - CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS starts here");
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.DISTRIBUTOR_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					log.info(requestId + "hql =" + hql);
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);
					
					if(ecard!=null && (ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3)))
					{
						log.info(requestId + "Must Be Activated Level 3 =");
						Distributor distributorCardIssuer = ecard.getDistributor();		//Distributor Who Issued Card
						Distributor distributorCashCollector = user.getDistributor();		//Distributor Collecting Cash
						Account distributorAcctCardIssuer = null;						//Distributor Account Who Issued Card
						Account distributorAcctCashCollector = null;						//Distributor Account Collecting Cash
						Merchant merchantCardIssuer = distributorCardIssuer.getDistributorMerchant();
						Merchant merchantCashCollector = distributorCashCollector.getDistributorMerchant();
						Device device = null;
						
						if(distributorCashCollector!=null && distributorCashCollector.getDistributorStatus().equals(DistributorStatus.ACTIVE) 
								&& distributorCardIssuer!=null && distributorCardIssuer.getDistributorStatus().equals(DistributorStatus.ACTIVE) )
						{
							log.info(requestId + "Distributor Status = Active");
							if(merchantCardIssuer!=null && merchantCardIssuer.getStatus().equals(MerchantStatus.ACTIVE)
									&& merchantCashCollector!=null && merchantCashCollector.getStatus().equals(MerchantStatus.ACTIVE))
							{
								log.info(requestId + "Merchant Status = Active");
								hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
								device = (Device)swpService_.getUniqueRecordByHQL(hql);
								
								if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
								{
									log.info(requestId + "Device Status = Active");
									Date todayDate = new Date();
									Date expDate = ecard.getExpiryDate();
									
									if(expDate.after(todayDate))
									{
										log.info(requestId + "Expiry date afar");
										String api_key = device.getTerminalApiKey();
										/*if(UtilityHelper.validateTransactionHash(
												hash, 
												terminalId,
												serviceType,
												orderId,
												amount,
												api_key)==true)*/
										if(1==1)
										{
											log.info(requestId + "hash worked");
											
											hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
											Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
											if(oldTrxn.size()>0)
											{
												jsonReturn.put("status", 29);
												return jsonReturn;
											}
											
											
											hql = "Select tp from Account tp where tp.distributor.id = " + distributorCardIssuer.getId();	
											log.info(requestId + "1. HQL = " + hql);
											distributorAcctCardIssuer = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
											hql = "Select tp from Account tp where tp.distributor.id = " + distributorCashCollector.getId();
											log.info(requestId + "2. HQL = " + hql);
											distributorAcctCashCollector = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
											
											if(distributorAcctCardIssuer==null)
											{
												//No Account setup for this distributor
												jsonReturn.put("status", 23);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											
											if(distributorAcctCashCollector==null)
											{
												//No Account setup for this distributor
												jsonReturn.put("status", 25);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											
											if((distributorAcctCashCollector.getCurrentBalance() - app.getMinimumBalance()) > amount)
											{
												Transaction transaction = new Transaction();
												
												String transactionRef = null;
												
												
												hql = "Select tp from Transaction tp where tolower(tp.orderRef) = '" + orderId.toLowerCase() + "'";
												Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
												if(txn!=null)
												{
													//Transaction with order id already exists
													jsonReturn.put("status", 26);
													jsonReturn.put("txn", jsonObject);
													return jsonReturn;
												}
												
												
												while(transactionRef==null)
												{
													String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
													hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
													txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
													if(txn==null)
														transactionRef = txnRef;
												}
												
												String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+device.getDeviceType().name()+user.getId();
												String messageResponse = transactionRef+"###"+orderId+"###"+terminalId;
												
												transaction.setTransactionRef(transactionRef);
												transaction.setServerOption(0);
												transaction.setOrderRef(orderId);
												transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
												transaction.setTransactionDate(new Date());
												transaction.setServiceType(ServiceType.valueOf(serviceType));
												transaction.setTransactingUser(user);
												transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
												transaction.setUserId(user.getId());
												transaction.setStatus(TransactionStatus.SUCCESS);
												transaction.setCard(ecard);
												transaction.setDevice(device);
												transaction.setDistributor(distributorCashCollector);
												transaction.setMerchant(null);
												transaction.setDeviceId(device.getId());
												transaction.setDeviceCode(device.getDeviceCode());
												transaction.setStartRoute(null);
												transaction.setEndRoute(null);
												transaction.setTollLane(null);
												transaction.setMessageRequest(messageRequest);
												transaction.setMessageResponse(messageResponse);
												transaction.setFixedCharge(0.00);
												transaction.setTransactionFee(0.00);
												transaction.setAmount(amount);
												transaction.setResponseCode(Response.Status.OK.getStatusCode());
												transaction.setOnUsTransaction(Boolean.TRUE);
												transaction.setTransactingBankId(distributorCashCollector.getDistributorMerchant().getMerchantBank().getId());
												transaction.setReceipientTransactingBankId(distributorCashCollector.getDistributorMerchant().getMerchantBank().getId());
												transaction.setTransactionDetail("TXFR FROM Distributor Acct " + distributorAcctCashCollector.getAccountIdentifier() + " the amount " + transaction.getAmount() + " | Credit Distributor Acct " + distributorAcctCardIssuer.getAccountIdentifier() + " | Credit Card -" + ecard.getPan());
												transaction.setNarration("Debit|Distributor Acct " + distributorAcctCashCollector.getAccountIdentifier() + "|ZMW" + transaction.getAmount() + "|Credit Distributor Acct " + distributorAcctCardIssuer.getAccountIdentifier() + "|Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
												transaction.setTrafficScheme(null);
												transaction.setTrafficSchemeId(null);
												transaction.setTrafficSchemeName(null);
												transaction.setCrCardId(ecard.getId());
												transaction.setCard(ecard);
												/*Debit Cash Collecting Distributor Acct Because Distributor Collected Cash*/
												transaction.setDrDistributorAccountId(distributorAcctCashCollector.getId());
												transaction.setDrDistributorId(distributorAcctCashCollector.getId());
												transaction.setDrMerchantId(merchantCashCollector.getId());
												transaction.setDrBankId(merchantCashCollector.getMerchantBank().getId());
												transaction.setDrDistributorName(distributorCashCollector.getCompanyName());
												transaction.setDrMerchantName(merchantCashCollector.getMerchantName());
												transaction.setDrBankName(merchantCashCollector.getMerchantBank().getBankName());
												transaction.setDrCardPan(null);
												/*-------------------------------*/
												transaction.setCrCardPan(ecard.getPan());
												transaction.setCrDistributorName(null);
												transaction.setCrMerchantName(null);
												transaction.setCrBankName(null);
												transaction.setCrCardId(null);
												transaction.setCrDistributorAccountId(null);
												transaction.setCrDistributorId(null);
												transaction.setCrMerchantId(null);
												transaction.setCrBankId(null);
												transaction.setUpdated_at(new Date());
												transaction.setCreated_at(new Date());
												transaction.setPaymentMeans(PaymentMeans.CARD);
												transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
												transaction.setExtraDetails(extraDetails);
												transaction = (Transaction)swpService_.createNewRecord(transaction);
												
												transaction.setReceiptNo(distributorCashCollector.getDistributorCode() + "/" + zeroPadNumber(transaction.getId()));
												swpService_.updateRecord(transaction);
												
												
												
												
												AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
												
												ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
												ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
												swpService.updateRecord(ecard);
												ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
												
												distributorAcctCashCollector.setCurrentBalance(distributorAcctCashCollector.getCurrentBalance() - amount);
												swpService.updateRecord(distributorAcctCashCollector);
												ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
														user!=null ? user.getUsername() : null, distributorAcctCashCollector.getId(), Account.class.getName());
												
												//distributorAcctCardIssuer.setCurrentBalance(distributorAcctCardIssuer.getCurrentBalance()+amount);
												//swpService.updateRecord(distributorAcctCashCollector);
												//ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
												//		user!=null ? user.getUsername() : null, distributorAcctCardIssuer.getId(), Account.class.getName());
												
												
												

												if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
												{
													String message = "Hello, NRFA Card Credit CR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + ecard.getCurrentBalance();;
										            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
													try
													{
														new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
													}
													catch(Exception e)
													{
														e.printStackTrace();
													}
													
												}
												if(distributorCashCollector.getContactMobile()!=null)
												{
													String message = "Hello, NRFA Account Debit DR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + distributorAcctCashCollector.getCurrentBalance();;
										            //UtilityHelper.sendSMS(this.swpService, message, distributorCashCollector.getContactMobile());
										            try
										            {
										            	new Thread(new SmsSender(this.swpService, message, distributorCashCollector.getContactMobile())).start();
										            }
													catch(Exception e)
													{
														e.printStackTrace();
													}
												}
												
	
												
												jsonObject.put("currentBalance", ecard.getCurrentBalance());
												jsonObject.put("receiptNo", transaction.getReceiptNo());
												jsonObject.put("amountDebited", transaction.getAmount());
												jsonObject.put("cardPan", ecard.getPan());
												jsonObject.put("transactionFee", transaction.getTransactionFee());
												jsonObject.put("transactionStatus", transaction.getStatus().name());
												jsonObject.put("paymentRef", transactionRef);
												
												jsonReturn.put("status", 22);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
											else
											{
												//Insufficient balance in Distributor Acct
												//Balance is invalid
												jsonReturn.put("status", 3);
												jsonReturn.put("txn", jsonObject);
												return jsonReturn;
											}
										}else
										{
											//Hash failed
											jsonReturn.put("status", 4);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
										
									}else
									{
										//Invalid Card - Expired Card
										jsonReturn.put("status", 5);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
								}
								else
								{
									//Invalid device status
									jsonReturn.put("status", 7);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Merchant Status invalid
								jsonReturn.put("status", 8);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}else
						{
							//Distributor Status invalid
							jsonReturn.put("status", 9);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS))
				{

					log.info(requestId + "Servicie type - CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS starts here");
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.BANK_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					log.info(requestId + "hql =" + hql);
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);

					Merchant merchant = ecard.getMerchant();
					Distributor distributor = ecard.getDistributor();
					Device device = null;
					if(!merchant.getMerchantCode().equals(user.getBankCode()))
					{
						jsonReturn.put("status", 27);
						return jsonReturn;
					}
					
					if(ecard!=null && ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3))
					{
						log.info(requestId + "Activate Level 3 =");
						
						
						log.info(requestId + "Distributor Status = Active");
						if(merchant!=null && merchant.getStatus().equals(MerchantStatus.ACTIVE))
						{
							log.info(requestId + "Merchant Status = Active");
							hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
							device = (Device)swpService_.getUniqueRecordByHQL(hql);
							
							if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
							{
								log.info(requestId + "Device Status = Active");
								Date todayDate = new Date();
								Date expDate = ecard.getExpiryDate();
								
								if(expDate.after(todayDate))
								{
									log.info(requestId + "Expiry date afar");
									String api_key = device.getTerminalApiKey();
									/*if(UtilityHelper.validateTransactionHash(
											hash, 
											terminalId,
											serviceType,
											orderId,
											amount,
											api_key)==true)*/
									if(1==1)
									{
										log.info(requestId + "hash worked");
										
										hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
										Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
										if(oldTrxn.size()>0)
										{
											jsonReturn.put("status", 29);
											return jsonReturn;
										}
										
										hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId() + " AND tp.status = " + AccountStatus.ACTIVE.ordinal();
										log.info(requestId + "HQL = " + hql);
										com.probase.nrfa.models.Account distributorAcct = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
										
										if(distributorAcct==null)
										{
											//No Account setup for this distributor
											jsonReturn.put("status", 23);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
										
										
										Transaction transaction = new Transaction();
										
										String transactionRef = null;
										while(transactionRef==null)
										{
											String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
											hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
											Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
											if(txn==null)
												transactionRef = txnRef;
										}
										
										String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+device.getDeviceType().name()+user.getId();
										String messageResponse = transactionRef+"###"+orderId+"###"+terminalId;
										
										transaction.setTransactionRef(transactionRef);
										transaction.setServerOption(0);
										transaction.setOrderRef(orderId);
										transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
										transaction.setTransactionDate(new Date());
										transaction.setServiceType(ServiceType.valueOf(serviceType));
										transaction.setTransactingUser(user);
										transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
										transaction.setUserId(user.getId());
										transaction.setStatus(TransactionStatus.SUCCESS);
										transaction.setCard(ecard);
										transaction.setDevice(device);
										transaction.setDistributor(null);
										transaction.setMerchant(ecard.getMerchant());
										transaction.setDeviceId(device.getId());
										transaction.setDeviceCode(device.getDeviceCode());
										transaction.setStartRoute(null);
										transaction.setEndRoute(null);
										transaction.setTollLane(null);
										transaction.setMessageRequest(messageRequest);
										transaction.setMessageResponse(messageResponse);
										transaction.setFixedCharge(0.00);
										transaction.setTransactionFee(0.00);
										transaction.setAmount(amount);
										transaction.setResponseCode(Response.Status.OK.getStatusCode());
										transaction.setOnUsTransaction(Boolean.TRUE);
										transaction.setTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setReceipientTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setTransactionDetail("Credit: Distributor Acct " + distributorAcct.getAccountIdentifier() + " the amount " + transaction.getAmount() + " | Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
										transaction.setNarration("Credit|Distributor Acct " + distributorAcct.getAccountIdentifier() + "|ZMW" + transaction.getAmount() + "|Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4));
										transaction.setTrafficScheme(null);
										transaction.setTrafficSchemeId(null);
										transaction.setTrafficSchemeName(null);
										/*Distributor Does not receive Cash Directly*/
										/*Merchant Receives Cash and transfers same to Card*/
										transaction.setCrCardId(ecard.getId());
										transaction.setCrCardPan(ecard.getPan());
										transaction.setCrDistributorAccountId(null);
										transaction.setCrDistributorId(null);
										transaction.setCrDistributorName(null);
										transaction.setCrDistributorName(null);
										transaction.setCrMerchantName(null);
										transaction.setCrMerchantId(null);
										transaction.setCrBankId(null);
										/*transaction.setCrDistributorAccountId(distributorAcct.getId());
										transaction.setCrDistributorId(ecard.getDistributor().getId());
										transaction.setCrMerchantId(ecard.getMerchant().getId());
										transaction.setCrBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setCrDistributorName(ecard.getDistributor().getCompanyName());
										transaction.setCrMerchantName(ecard.getMerchant().getMerchantName());
										transaction.setCrBankName(ecard.getMerchant().getMerchantBank().getBankName());*/
										/*------------------------------------*/
										transaction.setDrCardPan(null);
										transaction.setDrBankName(null);
										transaction.setDrCardId(null);
										transaction.setDrDistributorAccountId(null);
										transaction.setDrDistributorId(null);
										transaction.setDrMerchantId(ecard.getMerchant().getId());
										transaction.setDrBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setDrMerchantName(ecard.getMerchant().getMerchantName());
										transaction.setDrBankName(ecard.getMerchant().getMerchantBank().getBankName());
										
										transaction.setUpdated_at(new Date());
										transaction.setCreated_at(new Date());
										transaction.setPaymentMeans(PaymentMeans.CARD);
										transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
										transaction.setExtraDetails(extraDetails);
										transaction = (Transaction)swpService_.createNewRecord(transaction);
										transaction.setReceiptNo(ecard.getMerchant().getMerchantCode() + "/" + zeroPadNumber(transaction.getId()));
										swpService_.updateRecord(transaction);
										
										
										AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS, requestId, this.swpService, 
												user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
										
										ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
										ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
										swpService.updateRecord(ecard);
										ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
												user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
										
										//distributorAcct.setCurrentBalance(distributorAcct.getCurrentBalance()+amount);
										//swpService.updateRecord(distributorAcct);
										//ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
										//		user!=null ? user.getUsername() : null, distributorAcct.getId(), Account.class.getName());

										if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
										{
											String message = "Hello, NRFA Card Credit CR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + ecard.getCurrentBalance();;
								            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
											try
											{
												new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
											}
											catch(Exception e)
											{
												e.printStackTrace();
											}
										}
										/*if(distributorAcct.getDistributor().getContactMobile()!=null)
										{
											String message = "Hello, NRFA Account Credit DR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo();
								            //UtilityHelper.sendSMS(this.swpService, message, distributorAcct.getDistributor().getContactMobile());
											new Thread(new SmsSender(this.swpService, message, distributorAcct.getDistributor().getContactMobile())).start();
										}*/
										
										
										
										jsonObject.put("currentBalance", ecard.getCurrentBalance());
										jsonObject.put("receiptNo", transaction.getReceiptNo());
										jsonObject.put("amountDebited", transaction.getAmount());
										jsonObject.put("cardPan", ecard.getPan());
										jsonObject.put("transactionFee", transaction.getTransactionFee());
										jsonObject.put("transactionStatus", transaction.getStatus().name());
										jsonObject.put("paymentRef", transactionRef);
										
										jsonReturn.put("status", 22);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}else
									{
										//Hash failed
										jsonReturn.put("status", 4);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
									
								}else
								{
									//Invalid Card - Expired Card
									jsonReturn.put("status", 5);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Invalid device status
								jsonReturn.put("status", 7);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}
						else
						{
							//Merchant Status invalid
							jsonReturn.put("status", 8);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
						
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else if(ServiceType.valueOf(serviceType).equals(ServiceType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_NOTONUS))
				{

					log.info(requestId + "Servicie type - CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_ONUS starts here");
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.BANK_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					log.info(requestId + "hql =" + hql);
					ECard ecard = (ECard)swpService_.getUniqueRecordByHQL(hql);

					String userBankCode = user.getBankCode();
					hql = "Select tp from Merchant tp where tp.merchantCode = '" + userBankCode + "'";
					log.info(requestId + "hql =" + hql);
					Merchant merchantCashCollector = (Merchant)swpService_.getUniqueRecordByHQL(hql);
					
					
					Merchant merchantCardIssuer = ecard.getMerchant();
					Distributor distributorCardIssuer = ecard.getDistributor();
					Device device = null;
					
					if(merchantCardIssuer.getMerchantCode().equals(user.getBankCode()))
					{
						jsonReturn.put("status", 27);
						return jsonReturn;
					}
					
					if(ecard!=null && ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3))
					{
						log.info(requestId + "Activate Level 3 =");
						
						
						log.info(requestId + "Distributor Status = Active");
						if(merchantCashCollector!=null && merchantCashCollector.getStatus().equals(MerchantStatus.ACTIVE) && 
								merchantCardIssuer!=null && merchantCardIssuer.getStatus().equals(MerchantStatus.ACTIVE))
						{
							log.info(requestId + "Merchant Status = Active");
							hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
							device = (Device)swpService_.getUniqueRecordByHQL(hql);
							
							if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
							{
								log.info(requestId + "Device Status = Active");
								Date todayDate = new Date();
								Date expDate = ecard.getExpiryDate();
								
								if(expDate.after(todayDate))
								{
									log.info(requestId + "Expiry date afar");
									String api_key = device.getTerminalApiKey();
									/*if(UtilityHelper.validateTransactionHash(
											hash, 
											terminalId,
											serviceType,
											orderId,
											amount,
											api_key)==true)*/
									if(1==1)
									{
										log.info(requestId + "hash worked");
										
										hql = "Select tp from Transaction tp where tp.orderRef = '" + orderId + "'";
										Collection<Transaction> oldTrxn = (Collection<Transaction>)swpService_.getAllRecordsByHQL(hql);
										if(oldTrxn.size()>0)
										{
											jsonReturn.put("status", 29);
											return jsonReturn;
										}
										
										
										hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId() + " AND tp.status = " + AccountStatus.ACTIVE.ordinal();
										log.info(requestId + "HQL = " + hql);
										Account distributorAcctCardIssuer = (com.probase.nrfa.models.Account)swpService_.getUniqueRecordByHQL(hql);
										
										if(distributorAcctCardIssuer==null)
										{
											//No Account setup for this distributor
											jsonReturn.put("status", 23);
											jsonReturn.put("txn", jsonObject);
											return jsonReturn;
										}
										
										
										Transaction transaction = new Transaction();
										
										String transactionRef = null;
										while(transactionRef==null)
										{
											String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
											hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
											Transaction txn = (Transaction)swpService_.getUniqueRecordByHQL(hql);
											if(txn==null)
												transactionRef = txnRef;
										}
										
										String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+device.getDeviceType().name()+user.getId();
										String messageResponse = transactionRef+"###"+orderId+"###"+terminalId;
										
										transaction.setTransactionRef(transactionRef);
										transaction.setServerOption(0);
										transaction.setOrderRef(orderId);
										transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
										transaction.setTransactionDate(new Date());
										transaction.setServiceType(ServiceType.valueOf(serviceType));
										transaction.setTransactingUser(user);
										transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
										transaction.setUserId(user.getId());
										transaction.setStatus(TransactionStatus.SUCCESS);
										transaction.setCard(ecard);
										transaction.setDevice(device);
										transaction.setDistributor(null);
										transaction.setMerchant(merchantCashCollector);
										transaction.setDeviceId(device.getId());
										transaction.setDeviceCode(device.getDeviceCode());
										transaction.setStartRoute(null);
										transaction.setEndRoute(null);
										transaction.setTollLane(null);
										transaction.setMessageRequest(messageRequest);
										transaction.setMessageResponse(messageResponse);
										transaction.setFixedCharge(0.00);
										transaction.setTransactionFee(0.00);
										transaction.setAmount(amount);
										transaction.setResponseCode(Response.Status.OK.getStatusCode());
										transaction.setOnUsTransaction(Boolean.FALSE);
										transaction.setTransactingBankId(merchantCashCollector.getMerchantBank().getId());
										transaction.setReceipientTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setTransactionDetail("Credit: Distributor Acct " + distributorAcctCardIssuer.getAccountIdentifier() + " the amount " + transaction.getAmount() + " | Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4) + "|Paid From " + ecard.getMerchant().getMerchantName());
										transaction.setNarration("Credit|Distributor Acct " + distributorAcctCardIssuer.getAccountIdentifier() + "|ZMW" + transaction.getAmount() + "|Credit Card " + ecard.getPan().substring(0, 4) + "*****" + ecard.getPan().substring(ecard.getPan().length() - 4) + "|Paid From " + ecard.getMerchant().getMerchantName());
										transaction.setTrafficScheme(null);
										transaction.setTrafficSchemeId(null);
										transaction.setTrafficSchemeName(null);
										transaction.setCrCardId(ecard.getId());
										transaction.setCrCardPan(ecard.getPan());
										/*transaction.setCrDistributorAccountId(distributorAcctCardIssuer.getId());
										transaction.setCrDistributorId(ecard.getDistributor().getId());
										transaction.setCrMerchantId(ecard.getMerchant().getId());
										transaction.setCrBankId(ecard.getMerchant().getMerchantBank().getId());
										transaction.setCrDistributorName(ecard.getDistributor().getCompanyName());
										transaction.setCrMerchantName(ecard.getMerchant().getMerchantName());
										transaction.setCrBankName(ecard.getMerchant().getMerchantBank().getBankName());*/
										transaction.setCrDistributorAccountId(null);
										transaction.setCrDistributorId(null);
										transaction.setCrMerchantId(null);
										transaction.setCrBankId(null);
										transaction.setCrDistributorName(null);
										transaction.setCrMerchantName(null);
										transaction.setCrBankName(null);
										/*----------------------*/
										transaction.setDrCardPan(null);
										transaction.setDrDistributorName(null);
										transaction.setDrMerchantName(merchantCashCollector.getMerchantName());
										transaction.setDrBankName(merchantCashCollector.getMerchantBank().getBankName());
										transaction.setDrCardId(null);
										transaction.setDrDistributorAccountId(null);
										transaction.setDrDistributorId(null);
										transaction.setDrMerchantId(merchantCashCollector.getId());
										transaction.setDrBankId(merchantCashCollector.getMerchantBank().getId());
										transaction.setUpdated_at(new Date());
										transaction.setCreated_at(new Date());
										transaction.setPaymentMeans(PaymentMeans.CARD);
										transaction.setNFRACurrency(NFRACurrency.valueOf(nfraCurrency));
										transaction.setExtraDetails(extraDetails);
										transaction = (Transaction)swpService_.createNewRecord(transaction);
										
										transaction.setReceiptNo(merchantCashCollector.getMerchantCode() + "/" + zeroPadNumber(transaction.getId()));
										swpService_.updateRecord(transaction);
										
										AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CUSTOMER_DEPOSIT_CASH_VIA_MERCHANT_OTC_NOTONUS, requestId, this.swpService, 
												user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
										
										ecard.setCurrentBalance(ecard.getCurrentBalance() + amount);
										ecard.setTotalCredited((ecard.getTotalCredited()==null ? 0 : ecard.getTotalCredited()) + amount);
										swpService.updateRecord(ecard);
										ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_BALANCE_UPDATE, requestId, this.swpService, 
												user!=null ? user.getUsername() : null, ecard.getId(), ECard.class.getName());
										
										//distributorAcctCardIssuer.setCurrentBalance(distributorAcctCardIssuer.getCurrentBalance()+amount);
										//swpService.updateRecord(distributorAcctCardIssuer);
										//ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
										//		user!=null ? user.getUsername() : null, distributorAcctCardIssuer.getId(), Account.class.getName());
										
										
										if(transaction.getCard().getCustomer()!=null && transaction.getCard().getCustomer().getContactMobile()!=null)
										{
											String message = "Hello, NRFA Card Credit CR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo() + " | Bal: ZMW" + ecard.getCurrentBalance();;
								            //UtilityHelper.sendSMS(this.swpService, message, transaction.getCard().getCustomer().getContactMobile());
											try
											{
												new Thread(new SmsSender(this.swpService, message, transaction.getCard().getCustomer().getContactMobile())).start();
											}
											catch(Exception e)
											{
												e.printStackTrace();
											}
										}
										//if(distributorAcctCardIssuer.getDistributor().getContactMobile()!=null)
										//{
										//	String message = "Hello, NRFA Account Credit DR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo();
								        //    UtilityHelper.sendSMS(this.swpService, message, distributorAcctCardIssuer.getDistributor().getContactMobile());
										//}

										jsonObject.put("currentBalance", ecard.getCurrentBalance());
										jsonObject.put("receiptNo", transaction.getReceiptNo());
										jsonObject.put("amountDebited", transaction.getAmount());
										jsonObject.put("cardPan", ecard.getPan());
										jsonObject.put("transactionFee", transaction.getTransactionFee());
										jsonObject.put("transactionStatus", transaction.getStatus().name());
										jsonObject.put("paymentRef", transactionRef);
										
										jsonReturn.put("status", 22);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}else
									{
										//Hash failed
										jsonReturn.put("status", 4);
										jsonReturn.put("txn", jsonObject);
										return jsonReturn;
									}
									
								}else
								{
									//Invalid Card - Expired Card
									jsonReturn.put("status", 5);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
							}
							else
							{
								//Invalid device status
								jsonReturn.put("status", 7);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}
						else
						{
							//Merchant Status invalid
							jsonReturn.put("status", 8);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
						
		    		}
					else
					{
						//Card Is not active or not valid
						jsonReturn.put("status", 10);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else
				{
					//Invalid Service Type
					jsonReturn.put("status", 11);
					jsonReturn.put("txn", jsonObject);
					return jsonReturn;
				}
			}
			else
			{
				//user is null
				jsonReturn.put("status", 12);
				jsonReturn.put("txn", jsonObject);
				return jsonReturn;
			}
    	}catch(Exception e)
    	{
    		e.printStackTrace();
    		return null;
    	}
    }

    
    
    private JSONObject calculateAmountBasedOnExceptionAndPromotions(ECard ecard, String vehicleRegNo, Double amount, String routeCode, 
    		CardScheme cardScheme, TrafficScheme trafficScheme, SwpService swpService) throws JSONException {
		// TODO Auto-generated method stub
    	int x1 = 0;
    	Application app = Application.getInstance(swpService);
		log.info(x1);
    	JSONObject frequentUsers = app.getPromotionList();
		log.info(x1);
    	JSONObject trafficExceptionList = app.getTrafficExceptionList();
		log.info(x1);
    	
    	String localUserkey = routeCode + "~" + vehicleRegNo;
		log.info(x1);
    	if(trafficExceptionList!=null && trafficExceptionList.length()>0 && trafficExceptionList.has(localUserkey))
    	{
    		log.info(x1);
    		JSONObject entry = trafficExceptionList.getJSONObject(localUserkey);
    		log.info(x1);
    		Double percent = entry.getDouble("0");
    		log.info(x1);
    		Long exceptionId = entry.getLong("1");
    		log.info(x1);
    		Double appliedAmount = (percent/100) * amount;
    		log.info(x1);
    		JSONObject resp = new JSONObject();
    		log.info(x1);
    		resp.put("amount", (amount - appliedAmount));
    		log.info(x1);
    		resp.put("exceptionAmountApplied", appliedAmount);
    		log.info(x1);
    		resp.put("exceptionId", exceptionId);
    		log.info(x1);
    		return resp;
    	}
    	else
    	{
    		log.info(x1);
    		if(trafficExceptionList!=null && trafficExceptionList.length()>0)
    		{
    			log.info("trafficExceptionList = " + trafficExceptionList.toString());
    			log.info(x1);
	    		String freqUserKey1 = routeCode  + (trafficScheme!=null ? ("~" + trafficScheme.getSchemeCode()) : "");
	    		log.info("freqUserKey1 = " + freqUserKey1);
	    		String freqUserKey2 = routeCode + (cardScheme!=null ? ("~" + cardScheme.getSchemeCode()) : "");
	    		log.info("freqUserKey2 = " + freqUserKey2);
	    		if(frequentUsers!=null && frequentUsers.has(freqUserKey1))
	        	{
	    			
	    			JSONObject entry = frequentUsers.getJSONObject(freqUserKey1);
	    			log.info("entry = " + entry.toString());
	    			Integer baseCount = entry.getInt("0");
	    			Double percent = entry.getDouble("1");
	    			Long promotionId = entry.getLong("2");
	    			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
	    			String currentMonthIndex = sdf.format(new Date());
	    			if(ecard.getCurrentMonthIndex()!=null && ecard.getCurrentMonthIndex()==currentMonthIndex && ecard.getCurrentMonthTollDebitTransactionCount()!=null && ecard.getCurrentMonthTollDebitTransactionCount()>=baseCount)
	    			{
	    				log.info("ecard.getCurrentMonthIndex() = " + ecard.getCurrentMonthIndex());
	    				log.info("currentMonthIndex =" + currentMonthIndex);
	    				Double appliedAmount = (percent/100) * amount;
	    				log.info("amount = " + amount);
	    				log.info("appliedAmount = " + appliedAmount);
	            		JSONObject resp = new JSONObject();
	            		resp.put("amount", (amount - appliedAmount));
	            		resp.put("promotionAmountApplied", appliedAmount);
	            		resp.put("promotionId", promotionId);
	    				log.info("resp = " + resp.toString());
	            		return resp;
	    			}
	        		
	        	}
	    		else if(frequentUsers!=null && frequentUsers.has(freqUserKey2))
	    		{
					if(cardScheme.getSchemeCode()!=null && cardScheme.getSchemeCode()==ecard.getCardScheme().getSchemeCode())
					{
						log.info("cardScheme.getSchemeCode() = " + cardScheme.getSchemeCode());
						log.info("ecard.getCardScheme().getSchemeCode() = " + ecard.getCardScheme().getSchemeCode());
		    			JSONObject entry = frequentUsers.getJSONObject(freqUserKey1);
		    			Integer baseCount = entry.getInt("0");
		    			log.info("baseCount = " + baseCount);
		    			Double percent = entry.getDouble("1");
		    			log.info("percent = " + percent);
		    			Long promotionId = entry.getLong("2");
		    			log.info("promotionId = " + promotionId);
		    			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
		    			String currentMonthIndex = sdf.format(new Date());
		    			log.info("currentMonthIndex = " + currentMonthIndex);
		    			if(ecard.getCurrentMonthIndex()!=null && ecard.getCurrentMonthIndex()==currentMonthIndex && ecard.getCurrentMonthTollDebitTransactionCount()!=null && ecard.getCurrentMonthTollDebitTransactionCount()>=baseCount)
		    			{
			    			log.info("ecard.getCurrentMonthIndex() = " + ecard.getCurrentMonthIndex());
			    			log.info("ecard.getCurrentMonthTollDebitTransactionCount() = " + ecard.getCurrentMonthTollDebitTransactionCount());
		    				Double appliedAmount = (percent/100) * amount;
			    			log.info("appliedAmount = " + appliedAmount);
		            		JSONObject resp = new JSONObject();
		            		resp.put("amount", (amount - appliedAmount));
		            		resp.put("promotionAmountApplied", appliedAmount);
		            		resp.put("promotionId", promotionId);
			    			log.info("resp = " + resp.toString());
		            		return resp;
		    			}
					}
	    		}
	    		else
	    		{
	    			JSONObject resp = new JSONObject();
	    			resp.put("amount", amount);
	    			log.info("resp = " + resp.toString());
            		return resp;
	    		}
    		}
    		else
    		{
    			JSONObject resp = new JSONObject();
    			resp.put("amount", (amount));
    			log.info("resp = " + resp.toString());
        		return resp;
    		}
    	}
    	JSONObject resp = new JSONObject();
		resp.put("amount", (amount));
		log.info("resp = " + resp.toString());
		return resp;
	}

	private String zeroPadNumber(Long id) {
		// TODO Auto-generated method stub
    	String idS = Long.toString(id);
    	String padded = "";
    	for(int i=0; i<(8-(idS.length())); i++)
		{
    		padded = padded + "0";
		}
    	padded = padded + "" + Long.toString(id);
		return padded;
	}

	public Response processCardTransaction(String cardPan, String orderId, String terminalId, Double amount, String narration, 
    		String serviceType, String extraDetails, String hash, String routeCode, Integer tollLane, String trafficSchemeCode, 
    		String channel, String vehicleRegNumber, String nfraCurrency, String token, String requestId, String ipAddress)
	{
    	JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
    	
    	
    	JSONObject jsonObjectReq = new JSONObject();
    	Response response = null;
    	
    	try{

    		jsonObjectReq.put("orderId", orderId);
    		jsonObjectReq.put("terminalId", terminalId);
    		jsonObjectReq.put("amount", amount);
    		jsonObjectReq.put("serviceType", serviceType);
    		jsonObjectReq.put("hash", hash);
    		jsonObjectReq.put("routeCode", routeCode);
    		jsonObjectReq.put("tollLane", tollLane);
    		jsonObjectReq.put("channel", channel);
    		if(vehicleRegNumber!=null)
    			jsonObjectReq.put("carPlateNumber", vehicleRegNumber);
    		
    		
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			
			JSONObject jsonReturn = handleCardDebitForToll(cardPan, orderId, terminalId, amount, narration, 
		    		serviceType, extraDetails, hash, routeCode, tollLane,  trafficSchemeCode, channel, user, roleCode, vehicleRegNumber, nfraCurrency, 
		    		app, this.swpService, requestId, ipAddress);
			JsonObject jsonObj = null;
			
			if(jsonReturn !=null && jsonReturn.length()>0)
			{
				int status = jsonReturn.getInt("status");
				JSONObject txn = jsonReturn.has("txn") ? jsonReturn.getJSONObject("txn") : null;
				
				
				
					//Transaction exists
					switch(status)
					{
						case 1: 
							jsonObjectResponse.add("status", ERROR.INVALID_CARD_CHARGE_PRIVILEDGES);
							jsonObjectResponse.add("message", "Invalid Card Charge Priviledges");
							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 2: 
							jsonObjectResponse.add("status", ERROR.GENERAL_OK);
							if(serviceType.equals(ServiceType.CARD_DEBIT_AT_TOLL.name()))
								jsonObjectResponse.add("message", "Card Debited succcessfully");
							else if(serviceType.equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS.name()) || serviceType.equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS.name()))
								jsonObjectResponse.add("message", "Card Credited succcessfully");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 3: 
							//Balance is invalid
							jsonObjectResponse.add("status", ERROR.INSUFFICIENT_FUNDS);
							jsonObjectResponse.add("message", "Card Debit Failed. Insufficient Funds");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 4:
							//Hash failed
							jsonObjectResponse.add("status", ERROR.HASH_FAIL_VALIDATION);
							jsonObjectResponse.add("message", "Hash data validation failed");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
	
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 5:
							//Invalid Card - Expired Card
							jsonObjectResponse.add("status", ERROR.EXPIRED_CARD);
							jsonObjectResponse.add("message", "Card Expired");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
		
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 6:
							//Invalid Traffic SCheme
							jsonObjectResponse.add("status", ERROR.INVALID_TRAFFIC_SCHEME);
							jsonObjectResponse.add("message", "Invalid traffic scheme provided");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
			
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 7:
							//Invalid device status
							jsonObjectResponse.add("status", ERROR.INVALID_DEVICE_USED);
							jsonObjectResponse.add("message", "Invalid traffic scheme provided");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
				
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 8:
							//Merchant Status invalid
							jsonObjectResponse.add("status", ERROR.MERCHANT_STATUS_INVALID);
							jsonObjectResponse.add("message", "Merchant status inactive");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
					
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 9:
							//Distributor Status invalid
							jsonObjectResponse.add("status", ERROR.DISTRIBUTOR_STATUS_INVALID);
							jsonObjectResponse.add("message", "Distributor status inactive");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
						
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 10:
							//Card Is not active or not valid
							jsonObjectResponse.add("status", ERROR.CARD_NOT_VALID);
							jsonObjectResponse.add("message", "Invalid Card Used. Card may not exist or may not be active");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 11:
							//Invalid Service Type
							jsonObjectResponse.add("status", ERROR.INVALID_SERVICE_TYPE);
							jsonObjectResponse.add("message", "Invalid Service Type Provided");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
				            break;
						case 12:
							//user is null
							jsonObjectResponse.add("status", ERROR.TRANSACTION_BY_INVALID_USER);
							jsonObjectResponse.add("message", "Invalid User");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
							break;
						case 13:
							//user is null
							jsonObjectResponse.add("status", ERROR.NO_ROUTE_MATCHING_ROUTE_CODE);
							jsonObjectResponse.add("message", "No Route matching Route Code");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
							break;
						case 22: 
							jsonObjectResponse.add("status", ERROR.GENERAL_OK);
							jsonObjectResponse.add("message", "New Card Assigned to Customer succcessfully");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 23: 
							jsonObjectResponse.add("status", ERROR.ISSUING_CARD_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObjectResponse.add("message", "We couldnt find an active distributor account setup for the distributor");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 24: 
							jsonObjectResponse.add("status", ERROR.INVALID_SERVICE_TYPE_PROVIDED);
							jsonObjectResponse.add("message", "Invalid Service Type provided. Ensure you specify the appropriate service type for a card load");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 25: 
							jsonObjectResponse.add("status", ERROR.CASH_COLLECTING_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObjectResponse.add("message", "No Account setup for the cash collecting distributor");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 26: 
							jsonObjectResponse.add("status", ERROR.CASH_COLLECTING_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObjectResponse.add("message", "Transaction failed. Transaction Order Id duplicate");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 27: 
							jsonObjectResponse.add("status", ERROR.SERVICE_TYPE_MISMATCH);
							jsonObjectResponse.add("message", "Service Type mismatch. You are either trying to do an OnUs Transaction but sent a NotOnUs Service Type");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 28: 
							jsonObjectResponse.add("status", ERROR.GENERAL_OK);
							jsonObjectResponse.add("message", "Card Credited succcessfully");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 29: 
							jsonObjectResponse.add("status", ERROR.ORDER_ID_DUPLICATE);
							jsonObjectResponse.add("message", "Order Id provided has been used before. Transaction failed");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 30: 
							jsonObjectResponse.add("status", ERROR.CURRENCY_SERVICETYPE_NOT_SUPPORTED);
							jsonObjectResponse.add("message", "Provided currency not supported by the service type");

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						default:
							log.info(requestId + "default case");
							jsonObjectResponse.add("status", ERROR.GENERAL_SYSTEM_ERROR);
							jsonObjectResponse.add("message", "System Failure");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
							break;
					}
				
			}
			else
			{
				log.info(requestId + "Empty return");
				//handle empty return
				jsonObjectResponse.add("status", ERROR.GENERAL_SYSTEM_ERROR);
				jsonObjectResponse.add("message", "System Failure");
				jsonObjectResponse.add("transaction", jsonObjectReq.toString());
				jsonObj = jsonObjectResponse.build();
				response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
			}

			return response;
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObjectResponse.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}


    public Response processCardBatchTransactions(String transactionData, String token, String requestId, String ipAddress)
	{
    	JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
    	try
    	{
        	JSONArray jsonArrayReq = new JSONArray(transactionData);
        	if(jsonArrayReq.length()==0)
        	{
        		jsonObjectResponse.add("status", ERROR.NO_TRANSACTIONS_LISTED);
				jsonObjectResponse.add("message", "No Transactions Listed");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
        	}
        	String cardPan=null; String expiryDate=null; String orderId=null; String terminalId=null; Double amount=null; String narration=null; 
    		String serviceType=null; String extraDetails=null; String hash=null; String routeCode=null; Integer tollLane=null; 
    		String trafficSchemeCode=null; String channel=null; String carPlateNumber = null; String nfraCurrency=null;
    		
    		swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE);
			}
			
			
			JSONArray jsonArrayResp = new JSONArray();
    		
    		for(int index=0; index<jsonArrayReq.length(); index++)
    		{
        	
    	    	JSONObject jsonObject = new JSONObject();
    	
	    		JSONObject jsObjEntry = jsonArrayReq.getJSONObject(index);
		    	cardPan = 			jsObjEntry.getString("cardPan");
		    	orderId = 			jsObjEntry.getString("orderId"); 
		    	terminalId = 		jsObjEntry.getString("terminalId");
		    	amount = 			jsObjEntry.getDouble("amount");
		    	narration = 		jsObjEntry.getString("narration");
				serviceType = 		jsObjEntry.getString("serviceType");
				extraDetails = 		jsObjEntry.getString("extraDetails");
				hash = 				jsObjEntry.getString("hash");
				routeCode = 		jsObjEntry.getString("routeCode");
				tollLane = 			jsObjEntry.getInt("tollLane");
				trafficSchemeCode = jsObjEntry.getString("trafficSchemeCode");
				channel = 			jsObjEntry.getString("channel");
				carPlateNumber = 	jsObjEntry.has("carPlateNumber") ? jsObjEntry.getString("carPlateNumber") : null;
				nfraCurrency	= 	jsObjEntry.has("nfraCurrency") ? jsObjEntry.getString("nfraCurrency") : null;
	    		
	    		
	    		JSONObject jsonReturn = handleCardDebitForToll(cardPan, orderId, terminalId, amount, narration, 
			    		serviceType, extraDetails, hash, routeCode, tollLane,  trafficSchemeCode, channel, user, roleCode, carPlateNumber, nfraCurrency,
			    		app, this.swpService, requestId, ipAddress);
				
				if(jsonReturn !=null && jsonReturn.length()>0)
				{
					int status = jsonReturn.getInt("status");
					JSONObject txn = jsonReturn.has("txn") ? jsonReturn.getJSONObject("txn") : null;
					
					
					/*if(txn!=null)
					{
						//Transaction exists
						if(status==2)
						{
							jsonObject.put("orderId", orderId);
		    	    		jsonObject.put("terminalId", terminalId);
		    	    		jsonObject.put("amount", amount);
		    	    		jsonObject.put("serviceType", serviceType);
		    	    		jsonObject.put("hash", hash);
		    	    		jsonObject.put("routeCode", routeCode);
		    	    		jsonObject.put("tollLane", tollLane);
		    	    		jsonObject.put("channel", channel);

		    	    		jsonArrayResp.put(jsonObject);
						}
					}*/
					
					
					
					jsonObject.put("orderId", orderId);
    	    		jsonObject.put("terminalId", terminalId);
    	    		jsonObject.put("amount", amount);
    	    		jsonObject.put("serviceType", serviceType);
    	    		jsonObject.put("hash", hash);
    	    		jsonObject.put("routeCode", routeCode);
    	    		jsonObject.put("tollLane", tollLane);
    	    		jsonObject.put("channel", channel);
    	    		
					switch(status)
					{
						case 1: 
							jsonObject.put("status", ERROR.INVALID_CARD_CHARGE_PRIVILEDGES);
							jsonObject.put("message", "Invalid Card Charge Priviledges");
				            break;
						case 2: 
							jsonObject.put("status", ERROR.GENERAL_OK);
							if(serviceType.equals(ServiceType.CARD_DEBIT_AT_TOLL.name()))
								jsonObject.put("message", "Card Debited succcessfully");
							if(serviceType.equals(ServiceType.CASH_COLLECT_AT_TOLL.name()))
								jsonObject.put("message", "Cash collected succcessfully");
							else if(serviceType.equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS.name()) || serviceType.equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS.name()))
								jsonObject.put("message", "Card Credited succcessfully");
							
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 3: 
							//Balance is invalid
							jsonObject.put("status", ERROR.INSUFFICIENT_FUNDS);
							jsonObject.put("message", "Card Debit Failed. Insufficient Funds");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 4:
							//Hash failed
							jsonObject.put("status", ERROR.HASH_FAIL_VALIDATION);
							jsonObject.put("message", "Hash data validation failed");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 5:
							//Invalid Card - Expired Card
							jsonObject.put("status", ERROR.EXPIRED_CARD);
							jsonObject.put("message", "Card Expired");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 6:
							//Invalid Traffic SCheme
							jsonObject.put("status", ERROR.INVALID_TRAFFIC_SCHEME);
							jsonObject.put("message", "Invalid traffic scheme provided");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 7:
							//Invalid device status
							jsonObject.put("status", ERROR.INVALID_DEVICE_USED);
							jsonObject.put("message", "Invalid traffic scheme provided");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 8:
							//Merchant Status invalid
							jsonObject.put("status", ERROR.MERCHANT_STATUS_INVALID);
							jsonObject.put("message", "Merchant status inactive");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 9:
							//Distributor Status invalid
							jsonObject.put("status", ERROR.DISTRIBUTOR_STATUS_INVALID);
							jsonObject.put("message", "Distributor status inactive");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 10:
							//Card Is not active or not valid
							jsonObject.put("status", ERROR.CARD_NOT_VALID);
							jsonObject.put("message", "Invalid Card Used. Card may not exist or may not be active");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 11:
							//Invalid Service Type
							jsonObject.put("status", ERROR.INVALID_SERVICE_TYPE);
							jsonObject.put("message", "Invalid Service Type Provided");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 12:
							//user is null
							jsonObject.put("status", ERROR.TRANSACTION_BY_INVALID_USER);
							jsonObject.put("message", "Invalid User");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
							break;
						case 13:
							//user is null
							jsonObject.put("status", ERROR.NO_ROUTE_MATCHING_ROUTE_CODE);
							jsonObject.put("message", "No Route matching Route Code");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
							break;
						case 22: 
							jsonObject.put("status", ERROR.GENERAL_OK);
							jsonObject.put("message", "New Card Assigned to Customer succcessfully");
							
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 23: 
							jsonObject.put("status", ERROR.ISSUING_CARD_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObject.put("message", "We couldnt find an active distributor account setup for the distributor");
							
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 24: 
							jsonObject.put("status", ERROR.INVALID_SERVICE_TYPE_PROVIDED);
							jsonObject.put("message", "Invalid Service Type provided. Ensure you specify the appropriate service type for a card load");
							
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 25: 
							jsonObject.put("status", ERROR.CASH_COLLECTING_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObject.put("message", "No Account setup for the cash collecting distributor");
							
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 26: 
							jsonObject.put("status", ERROR.CASH_COLLECTING_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObject.put("message", "Transaction failed. Transaction Order Id duplicate");
							
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());

				            break;
						case 27: 
							jsonObject.put("status", ERROR.SERVICE_TYPE_MISMATCH);
							jsonObject.put("message", "Service Type mismatch. You are either trying to do an OnUs Transaction but sent a NotOnUs Service Type");
							
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());

				            break;
						case 28: 
							jsonObject.put("status", ERROR.GENERAL_OK);
							jsonObject.put("message", "Card Credited succcessfully");
							
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
				            break;
						case 29: 
							jsonObject.put("status", ERROR.ORDER_ID_DUPLICATE);
							jsonObject.put("message", "Order Id provided has been used before. Transaction failed");
							
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());

				            break;
						case 30: 
							jsonObject.put("status", ERROR.CURRENCY_SERVICETYPE_NOT_SUPPORTED);
							jsonObject.put("message", "Provided currency not supported by the service type");

				            break;
						default:
							log.info(requestId + "default case");
							jsonObject.put("status", ERROR.GENERAL_SYSTEM_ERROR);
							jsonObject.put("message", "System Failure");
							if(txn!=null)
								jsonObject.put("transaction", txn.toString());
							break;
					}
					jsonArrayResp.put(jsonObject);
				}
    				
    			
    		}
    		
    		jsonObjectResponse.add("status", ERROR.GENERAL_OK);
			jsonObjectResponse.add("message", "Check status for transactions submitted are listed");
			jsonObjectResponse.add("transaction", jsonArrayResp.toString());

			JsonObject jsonObj = jsonObjectResponse.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
    	}
    	catch(Exception e)
    	{
    		log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObjectResponse.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
    	}
	}

    
    public Response processCardTransactionV2(String cardPan, String orderId, String terminalId, Double amount, String narration, 
    		String serviceType, String extraDetails, String hash, String routeCode, Integer tollLane, String trafficSchemeCode, 
    		String channel, String vehicleRegNumber, String nfraCurrency, String token, String requestId, String ipAddress)
	{
    	JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
    	
    	
    	JSONObject jsonObjectReq = new JSONObject();
    	Response response = null;
    	
    	try{

    		jsonObjectReq.put("orderId", orderId);
    		jsonObjectReq.put("terminalId", terminalId);
    		jsonObjectReq.put("amount", amount);
    		jsonObjectReq.put("serviceType", serviceType);
    		jsonObjectReq.put("hash", hash);
    		jsonObjectReq.put("routeCode", routeCode);
    		jsonObjectReq.put("tollLane", tollLane);
    		jsonObjectReq.put("channel", channel);
    		if(vehicleRegNumber!=null)
    			jsonObjectReq.put("carPlateNumber", vehicleRegNumber);
    		
    		
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			
			JSONObject jsonReturn = handleCardDebitForTollV2(cardPan, orderId, terminalId, amount, narration, 
		    		serviceType, extraDetails, hash, routeCode, tollLane,  trafficSchemeCode, channel, user, roleCode, vehicleRegNumber, nfraCurrency, 
		    		app, this.swpService, requestId, ipAddress);
			JsonObject jsonObj = null;
			
			if(jsonReturn !=null && jsonReturn.length()>0)
			{
				int status = jsonReturn.getInt("status");
				JSONObject txn = jsonReturn.has("txn") ? jsonReturn.getJSONObject("txn") : null;
				
				
				
					//Transaction exists
					switch(status)
					{
						case 1: 
							jsonObjectResponse.add("status", ERROR.INVALID_CARD_CHARGE_PRIVILEDGES);
							jsonObjectResponse.add("message", "Invalid Card Charge Priviledges");
							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 2: 
							jsonObjectResponse.add("status", ERROR.GENERAL_OK);
							if(serviceType.equals(ServiceType.CARD_DEBIT_AT_TOLL.name()))
								jsonObjectResponse.add("message", "Card Debited succcessfully");
							else if(serviceType.equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_ONUS.name()) || serviceType.equals(ServiceType.CUSTOMER_LOAD_CARD_VIA_DISTRIBUTOR_NOTONUS.name()))
								jsonObjectResponse.add("message", "Card Credited succcessfully");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 3: 
							//Balance is invalid
							jsonObjectResponse.add("status", ERROR.INSUFFICIENT_FUNDS);
							jsonObjectResponse.add("message", "Card Debit Failed. Insufficient Funds");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 4:
							//Hash failed
							jsonObjectResponse.add("status", ERROR.HASH_FAIL_VALIDATION);
							jsonObjectResponse.add("message", "Hash data validation failed");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
	
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 5:
							//Invalid Card - Expired Card
							jsonObjectResponse.add("status", ERROR.EXPIRED_CARD);
							jsonObjectResponse.add("message", "Card Expired");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
		
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 6:
							//Invalid Traffic SCheme
							jsonObjectResponse.add("status", ERROR.INVALID_TRAFFIC_SCHEME);
							jsonObjectResponse.add("message", "Invalid traffic scheme provided");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
			
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 7:
							//Invalid device status
							jsonObjectResponse.add("status", ERROR.INVALID_DEVICE_USED);
							jsonObjectResponse.add("message", "Invalid traffic scheme provided");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
				
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 8:
							//Merchant Status invalid
							jsonObjectResponse.add("status", ERROR.MERCHANT_STATUS_INVALID);
							jsonObjectResponse.add("message", "Merchant status inactive");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
					
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 9:
							//Distributor Status invalid
							jsonObjectResponse.add("status", ERROR.DISTRIBUTOR_STATUS_INVALID);
							jsonObjectResponse.add("message", "Distributor status inactive");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
						
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 10:
							//Card Is not active or not valid
							jsonObjectResponse.add("status", ERROR.CARD_NOT_VALID);
							jsonObjectResponse.add("message", "Invalid Card Used. Card may not exist or may not be active");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 11:
							//Invalid Service Type
							jsonObjectResponse.add("status", ERROR.INVALID_SERVICE_TYPE);
							jsonObjectResponse.add("message", "Invalid Service Type Provided");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
				            break;
						case 12:
							//user is null
							jsonObjectResponse.add("status", ERROR.TRANSACTION_BY_INVALID_USER);
							jsonObjectResponse.add("message", "Invalid User");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
							break;
						case 13:
							//user is null
							jsonObjectResponse.add("status", ERROR.NO_ROUTE_MATCHING_ROUTE_CODE);
							jsonObjectResponse.add("message", "No Route matching Route Code");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
							break;
						case 22: 
							jsonObjectResponse.add("status", ERROR.GENERAL_OK);
							jsonObjectResponse.add("message", "New Card Assigned to Customer succcessfully");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 23: 
							jsonObjectResponse.add("status", ERROR.ISSUING_CARD_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObjectResponse.add("message", "We couldnt find an active distributor account setup for the distributor");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 24: 
							jsonObjectResponse.add("status", ERROR.INVALID_SERVICE_TYPE_PROVIDED);
							jsonObjectResponse.add("message", "Invalid Service Type provided. Ensure you specify the appropriate service type for a card load");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 25: 
							jsonObjectResponse.add("status", ERROR.CASH_COLLECTING_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObjectResponse.add("message", "No Account setup for the cash collecting distributor");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 26: 
							jsonObjectResponse.add("status", ERROR.CASH_COLLECTING_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObjectResponse.add("message", "Transaction failed. Transaction Order Id duplicate");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 27: 
							jsonObjectResponse.add("status", ERROR.SERVICE_TYPE_MISMATCH);
							jsonObjectResponse.add("message", "Service Type mismatch. You are either trying to do an OnUs Transaction but sent a NotOnUs Service Type");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 28: 
							jsonObjectResponse.add("status", ERROR.GENERAL_OK);
							jsonObjectResponse.add("message", "Card Credited succcessfully");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 29: 
							jsonObjectResponse.add("status", ERROR.ORDER_ID_DUPLICATE);
							jsonObjectResponse.add("message", "Order Id provided has been used before. Transaction failed");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 30: 
							jsonObjectResponse.add("status", ERROR.CURRENCY_SERVICETYPE_NOT_SUPPORTED);
							jsonObjectResponse.add("message", "Provided currency not supported by the service type");

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						default:
							log.info(requestId + "default case");
							jsonObjectResponse.add("status", ERROR.GENERAL_SYSTEM_ERROR);
							jsonObjectResponse.add("message", "System Failure");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
							break;
					}
				
			}
			else
			{
				log.info(requestId + "Empty return");
				//handle empty return
				jsonObjectResponse.add("status", ERROR.GENERAL_SYSTEM_ERROR);
				jsonObjectResponse.add("message", "System Failure");
				jsonObjectResponse.add("transaction", jsonObjectReq.toString());
				jsonObj = jsonObjectResponse.build();
				response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
			}

			return response;
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObjectResponse.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}

    
    
    /*
     if(user!=null)
			{
				if(serviceType==ServiceType.CARD_DEBIT_AT_TOLL.name())
				{
	
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_TOLL_STAFF.name()))
					{
						
					}
					
					
					String hql = "Select tp from ECard tp where tp.pan = '" + cardPan + "'";
					ECard ecard = (ECard)this.swpService.getUniqueRecordByHQL(hql);
					
					if(ecard!=null && ecard.getCardStatus().equals(CardStatus.ACTIVATED_LEVEL_3))
					{
						Merchant merchant = ecard.getMerchant();
						Distributor distributor = ecard.getDistributor();
						Device device = null;
						
						if(distributor!=null && distributor.getDistributorStatus().equals(DistributorStatus.ACTIVE))
						{
							if(merchant!=null && merchant.getStatus().equals(MerchantStatus.ACTIVE))
							{
								
								hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
								device = (Device)this.swpService.getUniqueRecordByHQL(hql);
								
								if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
								{
	
									hql = "Select tp from TrafficScheme tp where tp.schemeCode = '" + trafficSchemeCode + "'";
									TrafficScheme trafficScheme = (TrafficScheme)this.swpService.getUniqueRecordByHQL(hql);
									
									if(trafficScheme!=null && trafficScheme.getTrafficSchemeStatus().equals(Boolean.TRUE))
									{
										Date todayDate = new Date();
										Date expDate = ecard.getExpiryDate();
										
										if(expDate.after(todayDate))
										{
											String api_key = merchant.getApiKey();
											if(UtilityHelper.validateTransactionHash(
													hash, 
													terminalId,
													serviceType,
													orderId,
													amount,
													api_key)==true)
											{
												//if((amount - app.getMinimumBalance())>balance)
												Double balance = ecard.getCurrentBalance();
												if(balance - app.getMinimumBalance() > amount)
												{
													hql = "Select tp from Account tp where tp.distributor.id = " + ecard.getDistributor().getId();
													com.probase.nrfa.models.Account distributorAcct = (com.probase.nrfa.models.Account)this.swpService.getUniqueRecordByHQL(hql);
													
													Transaction transaction = new Transaction();
													//Double fixedCharge = app.getAllSettings()!=null && app.getAllSettings().has("Fixed Charge") ? app.getAllSettings().getDouble("Fixed Charge") : null;;
													//Double transactionPercentage = app.getAllSettings()!=null && app.getAllSettings().has("Transaction Percentage") ? app.getAllSettings().getDouble("Transaction Percentage") : null;
													Double fixedCharge = ecard.getCardScheme().getOverrideFixedFee();
													Double transactionFee = ecard.getCardScheme().getOverrideTransactionFee();
													
													String transactionRef = null;
													while(transactionRef==null)
													{
														String txnRef = RandomStringUtils.random(12, true, true);
														hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
														Transaction txn = (Transaction)this.swpService.getUniqueRecordByHQL(hql);
														if(txn==null)
															transactionRef = txnRef;
													}
													
													String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+com.probase.nrfa.enumerations.Channel.POS.name()+user.getId();
													String messageResponse = transactionRef+"###"+orderId+"###"+terminalId+"###"+startRoute+"###"+endRoute+"###"+tollLane;
													
													transaction.setTransactionRef(transactionRef);
													transaction.setOrderRef(orderId);
													transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
													transaction.setTransactionDate(new Date());
													transaction.setServiceType(ServiceType.valueOf(serviceType));
													transaction.setTransactingUser(user);
													transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
													transaction.setUserId(user.getId());
													transaction.setStatus(TransactionStatus.SUCCESS);
													transaction.setCard(ecard);
													transaction.setDevice(device);
													transaction.setDistributor(ecard.getDistributor());
													transaction.setMerchant(ecard.getMerchant());
													transaction.setDeviceId(device.getId());
													transaction.setDeviceCode(device.getDeviceCode());
													transaction.setStartRoute(startRoute);
													transaction.setEndRoute(endRoute);
													transaction.setTollLane(tollLane);
													transaction.setMessageRequest(messageRequest);
													transaction.setMessageResponse(messageResponse);
													transaction.setFixedCharge(ecard.getCardScheme().getOverrideFixedFee());
													transaction.setTransactionFee(ecard.getCardScheme().getOverrideTransactionFee());
													transaction.setAmount(amount);
													transaction.setResponseCode(Response.Status.OK.getStatusCode());
													transaction.setOnUsTransaction(Boolean.TRUE);
													transaction.setTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
													transaction.setReceipientTransactingBankId(ecard.getMerchant().getMerchantBank().getId());
													transaction.setTransactionDetail("Debit: EagleCard #" + ecard.getPan() + " the amount " + transaction.getAmount() + " into Merchant Account #" + merchant);
													transaction.setTrafficScheme(trafficScheme);
													transaction.setTrafficSchemeId(trafficScheme.getId());
													transaction.setTrafficSchemeName(trafficScheme.getSchemeName());
													transaction.setCrCardId(null);
													transaction.setCrDistributorAccountId(null);
													transaction.setCrDistributorId(null);
													transaction.setCrMerchantId(null);
													transaction.setCrBankId(null);
													transaction.setCrCardPan(null);
													transaction.setCrDistributorName(null);
													transaction.setCrMerchantName(null);
													transaction.setCrBankName(null);
													transaction.setDrCardPan(ecard.getPan());
													transaction.setDrDistributorName(ecard.getDistributor().getDistributorName());
													transaction.setDrMerchantName(ecard.getDistributor().getDistributorMerchant().getMerchantName());
													transaction.setDrBankName(distributorAcct.getBank().getBankName());
													transaction.setDrCardId(ecard.getId());
													transaction.setDrDistributorAccountId(distributorAcct.getId());
													transaction.setDrDistributorId(ecard.getDistributor().getId());
													transaction.setDrMerchantId(ecard.getMerchant().getId());
													transaction.setDrBankId(distributorAcct.getBank().getId());
													transaction.setUpdated_at(new Date());
													transaction.setCreated_at(new Date());
													transaction = (Transaction)this.swpService.createNewRecord(transaction);

													
													jsonObject.put("cardPan", ecard.getPan());
													jsonObject.put("transactionFee", transaction.getTransactionFee());
													jsonObject.put("transactionStatus", transaction.getStatus().name());
													jsonObject.put("paymentRef", transactionRef);
													
													jsonObjectResponse.add("status", ERROR.GENERAL_OK);
													jsonObjectResponse.add("message", "Card Debited succcessfully");
													jsonObjectResponse.add("transaction", jsonObject.toString());

													JsonObject jsonObj = jsonObjectResponse.build();
										            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
													
												}else
												{
													//Balance is invalid
													jsonObjectResponse.add("status", ERROR.INSUFFICIENT_FUNDS);
													jsonObjectResponse.add("message", "Card Debit Failed. Insufficient Funds");
													jsonObjectResponse.add("transaction", jsonObject.toString());

													JsonObject jsonObj = jsonObjectResponse.build();
										            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
												}
											}else
											{
												//Hash failed
												jsonObjectResponse.add("status", ERROR.HASH_FAIL_VALIDATION);
												jsonObjectResponse.add("message", "Hash data validation failed");
												jsonObjectResponse.add("transaction", jsonObject.toString());

												JsonObject jsonObj = jsonObjectResponse.build();
									            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
											}
											
										}else
										{
											//Invalid Card - Expired Card
											jsonObjectResponse.add("status", ERROR.EXPIRED_CARD);
											jsonObjectResponse.add("message", "Card Expired");
											jsonObjectResponse.add("transaction", jsonObject.toString());

											JsonObject jsonObj = jsonObjectResponse.build();
								            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
										}
									}
									else
									{
										//Invalid Traffic SCheme
										jsonObjectResponse.add("status", ERROR.INVALID_TRAFFIC_SCHEME);
										jsonObjectResponse.add("message", "Invalid traffic scheme provided");
										jsonObjectResponse.add("transaction", jsonObject.toString());

										JsonObject jsonObj = jsonObjectResponse.build();
							            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
									}
								}
								else
								{
									//Invalid device status
									jsonObjectResponse.add("status", ERROR.INVALID_DEVICE_USED);
									jsonObjectResponse.add("message", "Invalid traffic scheme provided");
									jsonObjectResponse.add("transaction", jsonObject.toString());

									JsonObject jsonObj = jsonObjectResponse.build();
						            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
								}
							}
							else
							{
								//Merchant Status invalid
								jsonObjectResponse.add("status", ERROR.MERCHANT_STATUS_INVALID);
								jsonObjectResponse.add("message", "Merchant status inactive");
								jsonObjectResponse.add("transaction", jsonObject.toString());

								JsonObject jsonObj = jsonObjectResponse.build();
					            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
							}
						}else
						{
							//Distributor Status invalid
							jsonObjectResponse.add("status", ERROR.DISTRIBUTOR_STATUS_INVALID);
							jsonObjectResponse.add("message", "Distributor status inactive");
							jsonObjectResponse.add("transaction", jsonObject.toString());

							JsonObject jsonObj = jsonObjectResponse.build();
				            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
						}
		    		}
					else
					{
						//Card Is not active or not valid
						jsonObjectResponse.add("status", ERROR.CARD_NOT_VALID);
						jsonObjectResponse.add("message", "Invalid Card Used. Card may not exist or may not be active");
						jsonObjectResponse.add("transaction", jsonObject.toString());

						JsonObject jsonObj = jsonObjectResponse.build();
			            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
					}
				}
				else
				{
					//Invalid Service Type
					jsonObjectResponse.add("status", ERROR.INVALID_SERVICE_TYPE);
					jsonObjectResponse.add("message", "Invalid Service Type Provided");
					jsonObjectResponse.add("transaction", jsonObject.toString());
					JsonObject jsonObj = jsonObjectResponse.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
				}
    		}
			else
			{
				//user is null
				jsonObjectResponse.add("status", ERROR.TRANSACTION_BY_INVALID_USER);
				jsonObjectResponse.add("message", "Invalid Service Type Provided");
				jsonObjectResponse.add("transaction", jsonObject.toString());
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
     */
    
    
    
    
    
    public Response getTransaction(String paymentRef, String orderId, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			String hql = "Select tp from Transaction tp WHERE lower(tp.transactionRef) = '"+paymentRef.toLowerCase()+"' AND lower(tp.orderRef) = '"+ orderId.toLowerCase() +"'";
			Transaction transaction = (Transaction)this.swpService.getUniqueRecordByHQL(hql);
			if(transaction==null)
			{
				jsonObject.add("status", ERROR.NO_CARD_SCHEMES);
				jsonObject.add("message", "No Card Schemes Available");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NOT_FOUND ).entity( jsonObj.toString() ).build();
			}
			JSONObject txn = new JSONObject();
			txn.put("orderId", transaction.getOrderRef()); 
			txn.put("terminalId", transaction.getDeviceCode());
			txn.put("amount", transaction.getAmount());
			txn.put("narration", transaction.getNarration());
			txn.put("serviceType", transaction.getServiceType().name());
			txn.put("startRoute", transaction.getStartRoute());
			txn.put("endRoute", transaction.getEndRoute());
			txn.put("tollLane", transaction.getTollLane());
			txn.put("trafficSchemeCode", transaction.getTrafficScheme().getSchemeCode());
			txn.put("channel", transaction.getChannel().name());
			txn.put("cardPan", transaction.getCard().getPan().substring(0,  4) + "*****" + transaction.getCard().getPan().substring(transaction.getCard().getPan().length()-4));
			txn.put("transactionFee", transaction.getTransactionFee());
			txn.put("transactionStatus", transaction.getStatus().name());
			txn.put("paymentRef", transaction.getTransactionRef());
			
			jsonObject.add("message", "Transaction Found");
			jsonObject.add("transaction", txn.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response listTransactions(String merchantCode, String cardPan,
			String terminalId, Double minumumAmount, Double maximumAmount,
			String serviceType, String startRoute, String endRoute,
			Integer tollLane, String trafficScheme, String startDate,
			String endDate, String transactionStatus, String distributorCode, 
			Integer parentDistributorYes, Integer startIndex,
			Integer limit, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			if(startIndex==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()) && merchantCode!=null && merchantCode!=userBankCode)
			{
				//Force merchant code to be bank staff code to avoid bank staff viewing other banks transactions on purpose
				merchantCode = userBankCode;
			}
			
			String hql = "Select distinct tp from Transaction tp ";
			String sql = "";
			if(limit==null || (limit!=null && limit>50))
					limit = 50;
			
			if(merchantCode!=null)
			{
				Merchant m1 = (Merchant)this.swpService.getUniqueRecordByHQL("Select tp from Merchant tp where tp.merchantCode = '" + merchantCode + "'");
				if(m1!=null)
					sql = sql + (sql!="" ? "AND " :"WHERE ") + "(tp.crMerchantId = " + m1.getId() + " OR tp.drMerchantId = " + m1.getId() + " OR tp.merchant.id = " + m1.getId() + ") ";
			}
			if(cardPan!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.card.cardPan = '" + cardPan + "' ";
			if(terminalId!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.device.deviceCode = '" + terminalId + "' ";
			if(minumumAmount!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.amount > '" + minumumAmount + "' ";
			if(maximumAmount!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.amount < '" + maximumAmount + "' ";
			if(serviceType!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.serviceType = " + ServiceType.valueOf(serviceType).ordinal() + " ";
			if(startRoute!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.startRoute = '" + startRoute + "' ";
			if(endRoute!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.endRoute = '" + endRoute + "' ";
			if(tollLane!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.tollLane = " + tollLane + " ";
			if(trafficScheme!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.trafficScheme = '" + trafficScheme + "' ";
			if(startDate!=null && startDate.length()>0)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.created_at > '" + startDate + "' ";
			if(endDate!=null && endDate.length()>0)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.created_at < '" + endDate + "' ";
			if(transactionStatus!=null)
				sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.status = " + TransactionStatus.valueOf(transactionStatus).ordinal() + " ";
			
			sql = sql + (sql!="" ? "AND " :"WHERE ") + "tp.deleted_at IS NULL" + " ";
			
			
			
			if(distributorCode!=null)
			{
				sql = sql + "(";
				sql = sql + (sql!="" ? "AND " : "WHERE ") + "tp.ecard.distributor.distributorCode = '" + distributorCode + "' ";
				if(parentDistributorYes!=null && parentDistributorYes==1)
				{
					sql = sql + "OR tp.ecard.distributor.parentDistributorCode = '"+distributorCode+"' ";
				}
				sql = sql + ")";
			}
			//sql = sql + "LIMIT " + startIndex + ", " + limit + " ";

			sql = sql + " ORDER BY transactionDate DESC";
			//sql = sql + "GROUP by tp.id";
			
			hql = hql + sql;
			
			log.info(requestId + "SQL = " + sql);
			
			
			//ORDER BY tp.transactionDate DESC LIMIT " + startIndex + "," + limit ;
			log.info(requestId + "3.hql ==" + hql);
			Collection<Transaction> transactions = (Collection<Transaction>)swpService.getAllRecordsByHQL(hql, startIndex, limit);
			
			
			/*Get tranasaction count*/
			String hql1 = "Select count(tp.id) as idCount " + hql.substring(18, hql.length()-30);// + " ORDER BY transactionDate DESC";
			log.info(requestId + "4.hql ==" + hql1);
			Long totalTxnCount = (Long)swpService.getUniqueRecordByHQL(hql1);
			Long totalTxns = totalTxnCount!=null ? totalTxnCount : 0;
			log.info(requestId + "totalTxnCount ==" + totalTxns);
			
			if(transactions.size()>0)
			{
				Iterator<Transaction> iterator = transactions.iterator();
				
				JSONArray transactionList = new JSONArray();
				
				while(iterator.hasNext())
				{
					Transaction transaction = iterator.next();
					
					JSONObject txn = new JSONObject();
					txn.put("orderId", transaction.getOrderRef()); 
					txn.put("terminalId", transaction.getDeviceCode());
					txn.put("amount", transaction.getAmount());
					txn.put("narration", transaction.getNarration());
					txn.put("serviceType", transaction.getServiceType().name());
					if(transaction.getStartRoute()!=null)
						txn.put("startRoute", transaction.getStartRoute());
					if(transaction.getEndRoute()!=null)
						txn.put("endRoute", transaction.getEndRoute());
					if(transaction.getTollLane()!=null)
						txn.put("tollLane", transaction.getTollLane());
					if(transaction.getTrafficScheme()!=null)
						txn.put("trafficSchemeCode", transaction.getTrafficScheme().getSchemeCode());
					txn.put("channel", transaction.getChannel().name());
					if(transaction.getCard()!=null)
						txn.put("cardPan", transaction.getCard().getPan().substring(0,  4) + "*****" + transaction.getCard().getPan().substring(transaction.getCard().getPan().length()-4));
					txn.put("transactionFee", transaction.getTransactionFee());
					txn.put("transactionStatus", transaction.getStatus().name());
					txn.put("paymentRef", transaction.getTransactionRef());
					
					txn.put("transactionDate", transaction.getTransactionDate());
					txn.put("transactionPostedAt", transaction.getCreated_at());
					txn.put("currency", transaction.getNFRACurrency().name());
					txn.put("receiptNumber", transaction.getReceiptNo());
					txn.put("cashier", transaction.getTransactingUserName()==null ? "" : transaction.getTransactingUserName());
					txn.put("vehicleRegistrationNumber", transaction.getCarPlateNumber()==null ? "" : transaction.getCarPlateNumber());
					txn.put("extraDetails", transaction.getExtraDetails()==null ? "" : transaction.getExtraDetails());
		            transactionList.put(txn);
					
					
					
					
				}
				
				jsonObject.add("message", "Transaction Listing from Index " + startIndex + " to Index " + (startIndex+limit));
				jsonObject.add("transactionList", transactionList.toString());
				jsonObject.add("totalTransactionsCount", totalTxns);
				jsonObject.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObject.build();
				log.info(requestId + " --- " + jsonObj.toString());
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
            jsonObject.add("message", "Transactions not found");
			jsonObject.add("status", ERROR.TRANSACTIONS_NOT_FOUND);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NOT_FOUND ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	

	public Response requestTransactionReversal(String paymentRef,
			String orderId, Double transactionAmount, Double reversalAmount,
			String transactionReason, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			if(paymentRef==null || orderId==null || transactionAmount==null || reversalAmount==null || transactionReason==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			String hql = "Select tp from Transaction tp where tp.deleted_at IS NULL AND  tolower(tp.transactionRef) = '" + paymentRef.toLowerCase() + 
					"' AND tolower(tp.orderRef) = '" + orderId.toLowerCase() + "' AND tp.amount = " + transactionAmount;
			Transaction transaction = (Transaction)this.swpService.getUniqueRecordByHQL(hql);
			
			if(transaction==null)
			{
				//transaction not found
				jsonObject.add("message", "Transaction for reversal not found");
				jsonObject.add("status", ERROR.TRANSACTION_NOT_FOUND);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NOT_FOUND ).entity( jsonObj.toString() ).build();
			}
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()) && userBankCode!=transaction.getMerchant().getMerchantCode())
			{
				//Transaction can only be reversed at card issuer
				jsonObject.add("message", "Request for Transaction Reversal Failed. Request can only be logged at card issuer end");
				jsonObject.add("status", ERROR.TRANSACTION_REVERSAL_REQUEST_PRIVILEDGES_FAIL);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			hql = "Select tp from RequestTransactionReversal tp where tolower(tp.reverseTransactionRef) = '" + paymentRef.toLowerCase() + 
					"' AND tolower(tp.orderId) = '" + orderId.toLowerCase() + "'";
			RequestTransactionReversal reqTransactionRev = (RequestTransactionReversal)this.swpService.getUniqueRecordByHQL(hql);
			
			if(reqTransactionRev!=null)
			{
				//Reversal Req already exists
				jsonObject.add("message", "Request for Transaction Reversal has been previously logged");
				jsonObject.add("status", ERROR.TRANSACTION_REVERSAL_REQUEST_EXISTS);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.FOUND ).entity( jsonObj.toString() ).build();
			}
			
			RequestTransactionReversal rtr = new RequestTransactionReversal();
			rtr.setAmount(reversalAmount);
			rtr.setCreated_at(new Date());
			rtr.setUpdated_at(new Date());
			rtr.setDescription(transactionReason);
			rtr.setDeviceCode(transaction.getDeviceCode());
			rtr.setMerchantCode(transaction.getMerchant().getMerchantCode());
			rtr.setMerchantId(transaction.getMerchant().getId());
			rtr.setMerchantName(transaction.getMerchant().getMerchantName());
			rtr.setNewTransaction(null);
			rtr.setOrderId(orderId);
			rtr.setPayerMobileNo(transaction.getCard().getCustomerMobileNumber());
			rtr.setRequestId(RandomStringUtils.random(12).toUpperCase());
			rtr.setStatus(TransactionStatus.PENDING);
			rtr.setTransaction(transaction);
			rtr = (RequestTransactionReversal)this.swpService.createNewRecord(rtr);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.TRANSACTION_REVERSAL_REQUEST, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, rtr.getId(), RequestTransactionReversal.class.getName());
			
			
		
			jsonObject.add("message", "Request for Transaction Reversal successful");
			jsonObject.add("reversalId", rtr.getRequestId());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	
	public Response reverseTransaction(String paymentRef, Double transactionAmount, Double reversalAmount,
			String reversalId, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			if(paymentRef==null || transactionAmount==null || reversalAmount==null || reversalId==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			String hql = "Select tp from RequestTransactionReversal tp where tolower(tp.reverseTransactionRef) = '" + paymentRef.toLowerCase() + 
					"' AND tolower(tp.requestId) = '" + reversalId.toLowerCase() + "' AND tp.status = " + TransactionStatus.PENDING.ordinal();
			RequestTransactionReversal rtr = (RequestTransactionReversal)this.swpService.getUniqueRecordByHQL(hql);
			
			if(rtr==null)
			{
				//transaction not found
				jsonObject.add("message", "Transaction Reversal Request not found");
				jsonObject.add("status", ERROR.TRANSACTION_NOT_FOUND);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NOT_FOUND ).entity( jsonObj.toString() ).build();
			}
			
			if(roleCode!=null && roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()))
			{
				//Transaction can only be reversed at card issuer
				jsonObject.add("message", "Reversal Failed. Insufficient Rights & Priviledges");
				jsonObject.add("status", ERROR.TRANSACTION_REVERSAL_REQUEST_PRIVILEDGES_FAIL);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			Transaction oldTransaction = rtr.getTransaction();
			Transaction transaction = new Transaction();
			
			String transactionRef = null;
			while(transactionRef==null)
			{
				String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
				hql = "Select tp from Transaction tp where tp.deleted_at IS NULL AND tp.transactionRef = '" + txnRef + "'";
				Transaction txn = (Transaction)this.swpService.getUniqueRecordByHQL(hql);
				if(txn==null)
					transactionRef = txnRef;
			}
			
			String messageRequest = oldTransaction.getDevice().getDeviceCode()+"###"+oldTransaction.getServiceType().name()+"###"+oldTransaction.getOrderRef()
					+"###"+oldTransaction.getAmount()+"###"+oldTransaction.getChannel().name()+oldTransaction.getTransactingUser().getId();
			String messageResponse = transactionRef+"###"+rtr.getRequestId()+"###"+oldTransaction.getDevice().getDeviceCode()+"###"+
					oldTransaction.getStartRoute()+"###"+oldTransaction.getEndRoute()+"###"+oldTransaction.getTollLane();
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE);
			}
			
			
			transaction.setTransactionRef(transactionRef);
			transaction.setOrderRef(rtr.getRequestId());
			transaction.setChannel(oldTransaction.getChannel());
			transaction.setTransactionDate(new Date());
			transaction.setServiceType(ServiceType.TRANSACTION_REVERSAL);
			transaction.setTransactingUser(user);
			transaction.setTransactingUserName(user==null ? null : (user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
			transaction.setUserId(user!=null ? user.getId() : null);
			transaction.setStatus(TransactionStatus.SUCCESS);
			transaction.setCard(oldTransaction.getCard());
			transaction.setDevice(oldTransaction.getDevice());
			transaction.setDistributor(oldTransaction.getCard().getDistributor());
			transaction.setMerchant(oldTransaction.getCard().getMerchant());
			transaction.setDeviceId(oldTransaction.getDevice().getId());
			transaction.setDeviceCode(oldTransaction.getDevice().getDeviceCode());
			transaction.setStartRoute(oldTransaction.getStartRoute());
			transaction.setEndRoute(oldTransaction.getEndRoute());
			transaction.setTollLane(oldTransaction.getTollLane());
			transaction.setMessageRequest(messageRequest);
			transaction.setMessageResponse(messageResponse);
			transaction.setFixedCharge(0.00);
			transaction.setTransactionFee(0.00);
			transaction.setAmount(rtr.getAmount());
			transaction.setResponseCode(Response.Status.OK.getStatusCode());
			transaction.setOnUsTransaction(Boolean.TRUE);
			transaction.setTransactingBankId(oldTransaction.getTransactingBankId());
			transaction.setReceipientTransactingBankId(oldTransaction.getReceipientTransactingBankId());
			transaction.setTransactionDetail("Transaction Reversal: NRFA TollCard #" + oldTransaction.getCard().getPan() + " the amount " + rtr.getAmount());
			transaction.setTrafficScheme(oldTransaction.getTrafficScheme());
			transaction.setTrafficSchemeId(oldTransaction.getTrafficSchemeId());
			transaction.setTrafficSchemeName(oldTransaction.getTrafficSchemeName());
			transaction.setDrCardId(oldTransaction.getCrCardId());
			transaction.setDrDistributorAccountId(oldTransaction.getCrDistributorAccountId());
			transaction.setDrDistributorId(oldTransaction.getCrDistributorId());
			transaction.setDrMerchantId(oldTransaction.getCrMerchantId());
			transaction.setDrBankId(oldTransaction.getCrBankId());
			transaction.setDrCardPan(oldTransaction.getCrCardPan());
			transaction.setDrDistributorName(oldTransaction.getCrDistributorName());
			transaction.setDrMerchantName(oldTransaction.getCrMerchantName());
			transaction.setDrBankName(oldTransaction.getCrBankName());
			transaction.setCrCardPan(oldTransaction.getDrCardPan());
			transaction.setCrDistributorName(oldTransaction.getDrDistributorName());
			transaction.setCrMerchantName(oldTransaction.getDrMerchantName());
			transaction.setCrBankName(oldTransaction.getDrBankName());
			transaction.setCrCardId(oldTransaction.getDrCardId());
			transaction.setCrDistributorAccountId(oldTransaction.getDrDistributorAccountId());
			transaction.setCrDistributorId(oldTransaction.getDrDistributorId());
			transaction.setCrMerchantId(oldTransaction.getDrMerchantId());
			transaction.setCrBankId(oldTransaction.getDrBankId());
			transaction.setUpdated_at(new Date());
			transaction.setCreated_at(new Date());
			transaction = (Transaction)this.swpService.createNewRecord(transaction);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.TRANSACTION_REVERSAL_ACTION, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, transaction.getId(), Transaction.class.getName());
			
			
			rtr.setStatus(TransactionStatus.SUCCESS);
			rtr = (RequestTransactionReversal)this.swpService.createNewRecord(rtr);
			
			
			
		
			jsonObject.add("message", "Request for Transaction Reversal successful");
			jsonObject.add("reversalId", rtr.getRequestId());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	
	
	
	
	public Response createTollFeePrice(String routeCode, Integer tollLane,
			String trafficScheme, Double feePrice, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
    	
    	JSONObject jsonObjectReq = new JSONObject();
    	Response response = null;
    	
    	try{
    		
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			
	
			if(roleCode==null || (roleCode!=null && (!roleCode.equals(RoleType.NFRA_TOLL_STAFF.name()) && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name()))))
			{
				jsonObjectResponse.add("message", "Invalid user priviledges.");
				jsonObjectResponse.add("status", ERROR.USER_PRIVILEDGES_INSUFFICIENT);
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
					
			String hql = "Select tp from TrafficTollPrice tp where tp.routeCode = '" + routeCode + "' AND tp.tollLane = " + tollLane + 
					" AND tp.trafficSchemeCode = '" + trafficScheme + "'";
			TrafficTollPrice trafficTollPrice = (TrafficTollPrice)this.swpService.getUniqueRecordByHQL(hql);
					
			if(trafficTollPrice==null)
			{
				hql = "Select tp from TrafficTollRouteLane tp where tp.routeCode = '" + routeCode + "' AND tp.tollLane = " + tollLane + 
						" AND tp.status = true";
				log.info("hql -- " + hql);
				TrafficTollRouteLane trafficTollRouteLane = (TrafficTollRouteLane)this.swpService.getUniqueRecordByHQL(hql);
				
				if(trafficTollRouteLane==null)
				{
					jsonObjectResponse.add("message", "No Routes or lanes match the details provided");
					jsonObjectResponse.add("status", ERROR.TOLL_ROUTE_LANE_NOT_EXISTS);
					JsonObject jsonObj = jsonObjectResponse.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
				
				hql = "Select tp from TrafficScheme tp where tp.schemeCode = '" + trafficScheme + "'";
				TrafficScheme ts = (TrafficScheme)this.swpService.getUniqueRecordByHQL(hql);
				
				if(ts!=null)
				{
					trafficTollPrice = new TrafficTollPrice();
					trafficTollPrice.setCreated_at(new Date());
					trafficTollPrice.setUpdated_at(new Date());
					trafficTollPrice.setStartRouteName(trafficTollRouteLane.getStartRouteName());
					trafficTollPrice.setEndRouteName(trafficTollRouteLane.getEndRouteName());
					trafficTollPrice.setFeePrice(feePrice);
					trafficTollPrice.setTollLane(tollLane);
					trafficTollPrice.setTrafficSchemeCode(ts.getSchemeCode());
					trafficTollPrice.setTrafficSchemeName(ts.getSchemeName());
					trafficTollPrice.setRouteCode(routeCode);
					trafficTollPrice.setStatus(Boolean.TRUE);
					trafficTollPrice = (TrafficTollPrice)this.swpService.createNewRecord(trafficTollPrice);
					
					
					JSONObject js = new JSONObject();
					JSONObject txnObjects = new JSONObject();
					int a =0;
					js.put("id", trafficTollPrice.getId());
					js.put("createdAt", sdf1.format(trafficTollPrice.getCreated_at()));
					js.put("updatedAt", sdf1.format(trafficTollPrice.getUpdated_at()));
					js.put("startRouteName", trafficTollPrice.getStartRouteName());
					js.put("endRouteName", trafficTollPrice.getEndRouteName());
					js.put("feePrice", trafficTollPrice.getFeePrice());
					js.put("tollLane", trafficTollPrice.getTollLane());
					js.put("trafficSchemeCode", trafficTollPrice.getTrafficSchemeCode());
					js.put("trafficSchemeName", trafficTollPrice.getTrafficSchemeName());
					js.put("routeCode", trafficTollPrice.getRouteCode());
					js.put("status", trafficTollPrice.getStatus());
					txnObjects.put("" + a++, js);
					syncTrafficTollPriceToCloud(txnObjects);
					
					
					
					AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_TRAFFIC_TOLL_PRICE, requestId, this.swpService, 
							verifyJ.has("username") ? verifyJ.getString("username") : null, trafficTollPrice.getId(), TrafficTollPrice.class.getName());
					
					jsonObjectResponse.add("message", "Traffic Toll Price Setup Successfully");
					jsonObjectResponse.add("status", ERROR.GENERAL_OK);
					JsonObject jsonObj = jsonObjectResponse.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				else
				{
					jsonObjectResponse.add("message", "Traffic Toll Scheme not currently provided");
					jsonObjectResponse.add("status", ERROR.TRAFFIC_SCHEME_NOT_PROVIDED);
					JsonObject jsonObj = jsonObjectResponse.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
    		}
			else
			{
				//trafficTollPrice already exists
				jsonObjectResponse.add("message", "Traffic Toll Price Already Exists");
				jsonObjectResponse.add("status", ERROR.TRAFFIC_TOLL_PRICE_ALREADY_EXISTS);
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObjectResponse.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	private boolean syncTrafficTollPriceToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("traffictollprice", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
    
	
	
	
	public Response updateTollFeePrice(String routeCode, Integer tollLane,
			String trafficScheme, Double feePrice, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
    	
    	JSONObject jsonObjectReq = new JSONObject();
    	Response response = null;
    	
    	try{
    		if(routeCode==null || tollLane==null || trafficScheme==null || feePrice==null)
			{
				jsonObjectResponse.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObjectResponse.add("message", "A route code, toll lane, traffic scheme and a toll fee must be provided in request");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
			}
    		
    		
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			
	
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_TOLL_STAFF.name())))
			{
				jsonObjectResponse.add("message", "Request for Transaction Reversal Failed. Request can only be logged at card issuer end");
				jsonObjectResponse.add("status", ERROR.USER_PRIVILEDGES_INSUFFICIENT);
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
					
			String hql = "Select tp from TrafficTollPrice tp where tp.routeCode = '" + routeCode + "' AND tp.tollLane = " + tollLane + 
					" AND tp.trafficSchemeCode = '" + trafficScheme + "'";
			TrafficTollPrice trafficTollPrice = (TrafficTollPrice)this.swpService.getUniqueRecordByHQL(hql);
					
			if(trafficTollPrice!=null)
			{
				
				trafficTollPrice.setCreated_at(new Date());
				trafficTollPrice.setUpdated_at(new Date());
				trafficTollPrice.setStartRouteName(trafficTollPrice.getStartRouteName());
				trafficTollPrice.setEndRouteName(trafficTollPrice.getEndRouteName());
				trafficTollPrice.setFeePrice(feePrice);
				trafficTollPrice.setTollLane(tollLane);
				trafficTollPrice.setTrafficSchemeCode(trafficTollPrice.getTrafficSchemeCode());
				trafficTollPrice.setTrafficSchemeName(trafficTollPrice.getTrafficSchemeName());
				trafficTollPrice.setRouteCode(routeCode);
				trafficTollPrice.setStatus(Boolean.TRUE);
				this.swpService.updateRecord(trafficTollPrice);
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_TRAFFIC_TOLL_PRICE, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, trafficTollPrice.getId(), TrafficTollPrice.class.getName());
				
				jsonObjectResponse.add("message", "Traffic Toll Price Updated Successfully");
				jsonObjectResponse.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				
    		}
			else
			{
				//trafficTollPrice already exists
				jsonObjectResponse.add("message", "Traffic Toll Price To Be Updated Does Not Exist");
				jsonObjectResponse.add("status", ERROR.TRAFFIC_TOLL_PRICE_NOT_EXISTS);
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObjectResponse.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}

	public Response generateEODTransactionList(String merchantCode, String token, String eodDate, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String eodDate_ = new SimpleDateFormat("y-M-d").parse(eodDate).toString();
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()) && merchantCode!=null && merchantCode!=userBankCode)
			{
				//Force merchant code to be bank staff code to avoid bank staff viewing other banks transactions on purpose
				merchantCode = userBankCode;
			}
			
			String hql = "Select tp from Merchant tp WHERE lower(tp.merchantCode) = '" + merchantCode.toLowerCase() + "'";
			Merchant merchant = (Merchant)swpService.getUniqueRecordByHQL(hql);
			
			hql = "Select distinct tp from Transaction tp WHERE tp.deleted_at IS NULL AND " +
					" (tp.crMerchantId = " + merchant.getId() + " OR tp.drMerchantId = " + merchant.getId() + ") " +
					" AND tp.status = " + TransactionStatus.SUCCESS.ordinal() + " AND " +
					" tp.transactionDate > '" + eodDate + " 00:00:00' AND tp.transactionDate < '" + eodDate + " 23:59:59' ORDER BY transactionDate DESC";
			
			log.info(requestId + "HQL = " + hql);
			log.info(requestId + "3.hql ==" + hql);
			Collection<Transaction> transactions = (Collection<Transaction>)swpService.getAllRecordsByHQL(hql);
			
			String key = "";
			String key1 = "";
			Double value = 0.00;
			
			if(transactions.size()>0)
			{
				Iterator<Transaction> iterator = transactions.iterator();
				
				JSONArray transactionList = new JSONArray();
				JSONObject txnObjects = new JSONObject();
				while(iterator.hasNext())
				{
					Transaction transaction = iterator.next();
					
					JSONObject txn = new JSONObject();
					if(transaction.getServiceType().equals(ServiceType.CARD_DEBIT_AT_TOLL))
					{
						key = transaction.getMerchant().getMerchantCode() + "-" + transaction.getDistributor().getDistributorCode();
						key1 = transaction.getTransactionRef() + "-" + transaction.getOrderRef();
						value = transaction.getAmount();
						if(txnObjects.has(key))
						{
							txn = txnObjects.getJSONObject(key);
							txn.put(key1, value);
							txnObjects.put(key, txn);
						}
						else
						{
							txn.put(key1, value);
							txnObjects.put(key, txn);
						}
					}
					else if(transaction.getServiceType().equals(ServiceType.CARD_DEBIT_AT_TOLL))
					{
						key = transaction.getMerchant().getMerchantCode() + "-" + transaction.getDistributor().getDistributorCode();
						key1 = transaction.getTransactionRef() + "-" + transaction.getOrderRef();
						value = transaction.getAmount();
						if(txnObjects.has(key))
						{
							txn = txnObjects.getJSONObject(key);
							txn.put(key1, value);
							txnObjects.put(key, txn);
						}
						else
						{
							txn.put(key1, value);
							txnObjects.put(key, txn);
						}
					}
					
				}
				
				jsonObject.add("message", "Transaction Listing for EOD - " + eodDate + "/" + merchant.getMerchantCode() + "/" + merchant.getMerchantName() );
				jsonObject.add("transactionList", transactionList.toString());
				jsonObject.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObject.build();
				log.info(requestId + " -- " + jsonObj.toString());
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
            jsonObject.add("message", "Transactions not found");
			jsonObject.add("status", ERROR.TRANSACTIONS_NOT_FOUND);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NOT_FOUND ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}


	

	
	public Response eodTransactionsNotification(String merchantCode, String eodDate, String transactionList, String token, String requestId) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String eodDate_ = new SimpleDateFormat("yyyy-MM-dd").parse(eodDate).toString();
			
			if(roleCode!=null && roleCode.equals(RoleType.BANK_STAFF.name()) && merchantCode!=null && merchantCode!=userBankCode)
			{
				//Force merchant code to be bank staff code to avoid bank staff viewing other banks transactions on purpose
				merchantCode = userBankCode;
			}
			
			
			JSONObject transactionsList_ = new JSONObject(transactionList);
			Iterator it = transactionsList_.keys();
			String list = "";
			while(it.hasNext())
			{
				String key = (String)it.next();
				list = list + "'" + transactionsList_.getString(key) + "', ";
			}
			list = list.substring(0, list.length() - 2);
			
			Merchant merchant = (Merchant)swpService.getUniqueRecordByHQL("Select tp from Merchant tp where lower(tp.merchantCode) = '" + merchantCode + "'");
			
			String hql = "Select distinct tp from Transaction tp WHERE tp.deleted_at IS NULL AND " +
					" (tp.crMerchantId = " + merchant.getId() + " OR tp.drMerchantId = " + merchant.getId() + ") " +
					" AND tp.status = " + TransactionStatus.SUCCESS.ordinal() + 
					" AND tp.transactionDate > '" + eodDate + " 00:00:00' AND tp.transactionDate < '" + eodDate + " 23:59:59' " +
							"AND tp.id IN ("+ list +") ORDER BY transactionDate DESC";
			
			log.info(requestId + "HQL = " + hql);
			log.info(requestId + "3.hql ==" + hql);
			Collection<Transaction> transactions = (Collection<Transaction>)swpService.getAllRecordsByHQL(hql);
			
			String key = "";
			String key1 = "";
			Double value = 0.00;
			boolean updated = false;
			
			if(transactions.size()>0)
			{
				Iterator<Transaction> iterator = transactions.iterator();
				
				while(iterator.hasNext())
				{
					Transaction transaction = iterator.next();
					transaction.setStatus(TransactionStatus.PAIDOUT);
					updated = true;
				}
				
				
			}
			
			if(updated==true)
			{
				jsonObject.add("message", "EOD List Received" );
				jsonObject.add("status", ERROR.GENERAL_OK);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
            jsonObject.add("message", "EOD Transaction List not updated successfully");
			jsonObject.add("status", ERROR.EOD_TRANSACTION_UPDATE_FAILED);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.NOT_FOUND ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	
	public Response getChannelList() {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			Channel[] channelList = Channel.values();
			JSONObject channelObj = new JSONObject();
			
			for(int i=0; i<channelList.length; i++)
			{
				channelObj.put(i+"", channelList[i].name());
			}
			
			jsonObject.add("message", "Channel Listed");
			jsonObject.add("channelsList", channelObj.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	public Response getTransactionStatusList() {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			TransactionStatus[] txnStatusList = TransactionStatus.values();
			JSONObject txnStatusObj = new JSONObject();
			
			for(int i=0; i<txnStatusList.length; i++)
			{
				txnStatusObj.put(i+"", txnStatusList[i].name());
			}
			
			jsonObject.add("message", "Transaction Status Listed");
			jsonObject.add("txnStatusList", txnStatusObj.toString());
			jsonObject.add("status", ERROR.GENERAL_OK);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}

	public Response processDistributorAccountFunding(String distributorCode,
			String orderId, String terminalId, Double amount, String narration,
			String serviceType, String extraDetails, String hash,
			String channel, String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
    	
    	
    	JSONObject jsonObjectReq = new JSONObject();
    	Response response = null;
    	
    	try{

    		jsonObjectReq.put("orderId", orderId);
    		jsonObjectReq.put("terminalId", terminalId);
    		jsonObjectReq.put("amount", amount);
    		jsonObjectReq.put("serviceType", serviceType);
    		jsonObjectReq.put("hash", hash);
    		jsonObjectReq.put("distributorCode", distributorCode);
    		jsonObjectReq.put("channel", channel);
    		
    		
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal());
			}
			
			
			JSONObject jsonReturn = handleDistributorAccountFunding(distributorCode, orderId, terminalId, amount, narration,
					serviceType, extraDetails, hash, channel, user, roleCode, app, this.swpService, requestId, ipAddress);
			JsonObject jsonObj = null;
			
			if(jsonReturn !=null && jsonReturn.length()>0)
			{
				int status = jsonReturn.getInt("status");
				JSONObject txn = jsonReturn.has("txn") ? jsonReturn.getJSONObject("txn") : null;
				
				
				
					//Transaction exists
					switch(status)
					{
						case 1: 
							jsonObjectResponse.add("status", ERROR.INVALID_CARD_CHARGE_PRIVILEDGES);
							jsonObjectResponse.add("message", "Invalid Card Charge Priviledges");
							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 4:
							//Hash failed
							jsonObjectResponse.add("status", ERROR.HASH_FAIL_VALIDATION);
							jsonObjectResponse.add("message", "Hash data validation failed");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
	
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 7:
							//Invalid device status
							jsonObjectResponse.add("status", ERROR.INVALID_DEVICE_USED);
							jsonObjectResponse.add("message", "Invalid traffic scheme provided");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
				
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 8:
							//Merchant Status invalid
							jsonObjectResponse.add("status", ERROR.MERCHANT_STATUS_INVALID);
							jsonObjectResponse.add("message", "Merchant status inactive");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
					
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				            break;
						case 11:
							//Invalid Service Type
							jsonObjectResponse.add("status", ERROR.INVALID_SERVICE_TYPE);
							jsonObjectResponse.add("message", "Invalid Service Type Provided");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
				            break;
						case 12:
							//user is null
							jsonObjectResponse.add("status", ERROR.TRANSACTION_BY_INVALID_USER);
							jsonObjectResponse.add("message", "Invalid User Priviledges");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.BAD_REQUEST ).entity( jsonObj.toString() ).build();
							break;
						case 23: 
							jsonObjectResponse.add("status", ERROR.ISSUING_CARD_DISTRIBUTOR_ACCOUNT_NOT_EXIST);
							jsonObjectResponse.add("message", "We couldnt find an active distributor account setup for the distributor");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						case 27: 
							jsonObjectResponse.add("status", ERROR.SERVICE_TYPE_MISMATCH);
							jsonObjectResponse.add("message", "Service Type mismatch");
							
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());

							jsonObj = jsonObjectResponse.build();
				            response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				            break;
						default:
							log.info(requestId + "default case");
							jsonObjectResponse.add("status", ERROR.GENERAL_SYSTEM_ERROR);
							jsonObjectResponse.add("message", "System Failure");
							if(txn!=null)
								jsonObjectResponse.add("transaction", txn.toString());
							jsonObj = jsonObjectResponse.build();
							response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
							break;
					}
				
			}
			else
			{
				log.info(requestId + "Empty return");
				//handle empty return
				jsonObjectResponse.add("status", ERROR.GENERAL_SYSTEM_ERROR);
				jsonObjectResponse.add("message", "System Failure");
				jsonObjectResponse.add("transaction", jsonObjectReq.toString());
				jsonObj = jsonObjectResponse.build();
				response = UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
			}

			return response;
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObjectResponse.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.INTERNAL_SERVER_ERROR ).entity( jsonObj.toString() ).build();
		}
	}

	private JSONObject handleDistributorAccountFunding(String distributorCode,
			String orderId, String terminalId, Double amount, String narration,
			String serviceType, String extraDetails, String hash,
			String channel, User user, String roleCode, Application app,
			SwpService swpService2, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		//ServiceType.CARD_DEBIT_AT_TOLL
    	/*ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_DISTRIBUTOR_ACCOUNT;
    	
    	 * Distributor deposits cash into distributors account
    	 * 1. Distributor walks into bank
    	 * 2. Bank Staff uses POS or SmartPay to log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA that distributor account was credited
    	 * 		A. Credit Distributor Account
    	 * 
    	 
    	ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_GENERAL_POOL_ACCOUNT;
    	
    	 * Distributor deposits cash into distributors account
    	 * 1. Distributor walks into bank
    	 * 2. Bank Staff uses POS or SmartPay to log payment of cash by connecting to the bank service to do this
    	 * 3. Smartpay informs NRFA that distributor account was credited
    	 * 		A. Credit General Pool Account
    	 * 		B. Credit Distributor Account
    	 * 
    	 */
    	
    	try
    	{
	    	JSONObject jsonReturn = new JSONObject();
	    	
	    	JSONObject jsonObject = new JSONObject();
	    	jsonObject.put("distributorCode", distributorCode);
	    	jsonObject.put("orderId", orderId);
	    	jsonObject.put("terminalId", terminalId);
	    	jsonObject.put("amount", amount);
	    	jsonObject.put("serviceType", serviceType);
	    	jsonObject.put("hash", hash);
	    	jsonObject.put("channel", channel);
    		
	    	if(user!=null)
			{
	    		log.info(requestId + "serviceType - " + serviceType);
				if(ServiceType.valueOf(serviceType).equals(ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_DISTRIBUTOR_ACCOUNT) || 
						ServiceType.valueOf(serviceType).equals(ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_GENERAL_POOL_ACCOUNT))
				{

					if(ServiceType.valueOf(serviceType).equals(ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_DISTRIBUTOR_ACCOUNT))
						log.info(requestId + "Servicie type - DISTRIBUTOR_DEPOSIT_CASH_INTO_DISTRIBUTOR_ACCOUNT starts here");
					else if(ServiceType.valueOf(serviceType).equals(ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_GENERAL_POOL_ACCOUNT))
						log.info(requestId + "Servicie type - DISTRIBUTOR_DEPOSIT_CASH_INTO_GENERAL_POOL_ACCOUNT starts here");
					
					
					if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.BANK_STAFF.name())))
					{
						jsonReturn.put("status", 1);
						return jsonReturn;
					}
					
					
					String hql = "Select tp from Distributor tp where tp.distributorCode = '" + distributorCode + "'";
					log.info(requestId + "hql =" + hql);
					Distributor distributor = (Distributor)swpService.getUniqueRecordByHQL(hql);

					String userBankCode = user.getBankCode();
					hql = "Select tp from Merchant tp where tp.merchantCode = '" + userBankCode + "'";
					log.info(requestId + "hql =" + hql);
					Merchant merchantCashCollector = (Merchant)swpService.getUniqueRecordByHQL(hql);
					Merchant distributorMerchant = distributor.getDistributorMerchant();
					
					Device device = null;
					
					if(!merchantCashCollector.getMerchantCode().equals(distributorMerchant.getMerchantCode()))
					{
						jsonReturn.put("status", 27);
						return jsonReturn;
					}
					
					log.info(requestId + "Distributor Status = Active");
					if(merchantCashCollector!=null && merchantCashCollector.getStatus().equals(MerchantStatus.ACTIVE) && 
							distributorMerchant!=null && distributorMerchant.getStatus().equals(MerchantStatus.ACTIVE))
					{
						log.info(requestId + "Merchant Status = Active");
						hql = "Select tp from Device tp where tp.deviceCode = '" + terminalId + "'";
						device = (Device)swpService.getUniqueRecordByHQL(hql);
						
						if(device!=null && device.getStatus().equals(DeviceStatus.ACTIVE))
						{
							log.info(requestId + "Device Status = Active");
							String api_key = device.getTerminalApiKey();
							/*if(UtilityHelper.validateTransactionHash(
									hash, 
									terminalId,
									serviceType,
									orderId,
									amount,
									api_key)==true)*/
							if(1==1)
							{
								log.info(requestId + "hash worked");
								hql = "Select tp from Account tp where tp.distributor.id = " + distributor.getId() + 
										" AND tp.status = " + AccountStatus.ACTIVE.ordinal();
								log.info(requestId + "HQL = " + hql);
								Account distributorAcct = (com.probase.nrfa.models.Account)swpService.getUniqueRecordByHQL(hql);
								
								if(distributorAcct==null)
								{
									//No Account setup for this distributor
									jsonReturn.put("status", 23);
									jsonReturn.put("txn", jsonObject);
									return jsonReturn;
								}
								
								
								Transaction transaction = new Transaction();
								
								String transactionRef = null;
								while(transactionRef==null)
								{
									String txnRef = RandomStringUtils.random(12, true, true).toUpperCase();
									hql = "Select tp from Transaction tp where tp.transactionRef = '" + txnRef + "'";
									Transaction txn = (Transaction)swpService.getUniqueRecordByHQL(hql);
									if(txn==null)
										transactionRef = txnRef;
								}
								
								String messageRequest = hash+"###"+terminalId+"###"+serviceType+"###"+orderId+"###"+amount+"###"+device.getDeviceType().name()+user.getId();
								String messageResponse = transactionRef+"###"+orderId+"###"+terminalId;
								
								transaction.setTransactionRef(transactionRef);
								transaction.setOrderRef(orderId);
								transaction.setChannel(com.probase.nrfa.enumerations.Channel.POS);
								transaction.setTransactionDate(new Date());
								transaction.setServiceType(ServiceType.valueOf(serviceType));
								transaction.setTransactingUser(user);
								transaction.setTransactingUserName((user.getFirstName()==null ? "" : user.getFirstName()) + (user.getLastName()==null ? "" : ("" + user.getLastName())));
								transaction.setUserId(user.getId());
								transaction.setStatus(TransactionStatus.SUCCESS);
								transaction.setCard(null);
								transaction.setDevice(device);
								transaction.setDistributor(distributor);
								transaction.setMerchant(merchantCashCollector);
								transaction.setDeviceId(device.getId());
								transaction.setDeviceCode(device.getDeviceCode());
								transaction.setStartRoute(null);
								transaction.setEndRoute(null);
								transaction.setTollLane(null);
								transaction.setMessageRequest(messageRequest);
								transaction.setMessageResponse(messageResponse);
								transaction.setFixedCharge(0.00);
								transaction.setTransactionFee(0.00);
								transaction.setAmount(amount);
								transaction.setResponseCode(Response.Status.OK.getStatusCode());
								transaction.setOnUsTransaction(Boolean.FALSE);
								transaction.setTransactingBankId(merchantCashCollector.getMerchantBank().getId());
								transaction.setReceipientTransactingBankId(distributorMerchant.getMerchantBank().getId());
								transaction.setTransactionDetail("Credit: Distributor Acct " + distributorAcct.getAccountIdentifier() + " the amount " + transaction.getAmount() + "|Paid From " + merchantCashCollector.getMerchantName());
								transaction.setNarration("Credit|Distributor Acct " + distributorAcct.getAccountIdentifier() + "|ZMW" + transaction.getAmount() + "|Paid From " + merchantCashCollector.getMerchantName());
								transaction.setTrafficScheme(null);
								transaction.setTrafficSchemeId(null);
								transaction.setTrafficSchemeName(null);
								transaction.setCrCardId(null);
								transaction.setCrDistributorAccountId(distributorAcct.getId());
								transaction.setCrDistributorId(distributor.getId());
								transaction.setCrMerchantId(distributor.getDistributorMerchant().getId());
								transaction.setCrBankId(distributorAcct.getBank().getId());
								transaction.setCrCardPan(null);
								transaction.setCrDistributorName(distributor.getCompanyName());
								transaction.setCrMerchantName(distributorMerchant.getMerchantName());
								transaction.setCrBankName(distributorAcct.getBank().getBankName());
								transaction.setDrCardPan(null);
								transaction.setDrDistributorName(null);
								transaction.setDrMerchantName(null);
								transaction.setDrBankName(null);
								transaction.setDrCardId(null);
								transaction.setDrDistributorAccountId(null);
								transaction.setDrDistributorId(null);
								transaction.setDrMerchantId(null);
								transaction.setDrBankId(null);
								transaction.setUpdated_at(new Date());
								transaction.setCreated_at(new Date());
								transaction = (Transaction)swpService.createNewRecord(transaction);
								
								transaction.setReceiptNo(merchantCashCollector.getMerchantCode() + "/" + zeroPadNumber(transaction.getId()));
								swpService.updateRecord(transaction);
								
								if(distributorAcct.getDistributor().getContactMobile()!=null)
								{
									String message = "Hello, NRFA Account Credit DR: ZMW"+ transaction.getAmount() + " | " + transaction.getReceiptNo();
						            //UtilityHelper.sendSMS(this.swpService, message, distributorAcct.getDistributor().getContactMobile());
									try
									{
										new Thread(new SmsSender(this.swpService, message, distributorAcct.getDistributor().getContactMobile())).start();
									}
									catch(Exception e)
									{
										e.printStackTrace();
									}
								}
								
								
								RequestType rt = ServiceType.valueOf(serviceType).equals(ServiceType.DISTRIBUTOR_DEPOSIT_CASH_INTO_GENERAL_POOL_ACCOUNT) ? 
										RequestType.DEPOSIT_CASH_GENERAL_POOL_ACCOUNT : RequestType.DEPOSIT_CASH_DISTRIBUTOR_ACCOUNT;
								AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, rt, requestId, this.swpService, 
										user!=null ? user.getUsername() : null, transaction.getId(), Transaction.class.getName());
								
								distributorAcct.setCurrentBalance(distributorAcct.getCurrentBalance()+amount);
								swpService.updateRecord(distributorAcct);
								
								ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_DISTRIBUTOR_ACCOUNT_BALANCE, requestId, this.swpService, 
										user!=null ? user.getUsername() : null, distributorAcct.getId(), Account.class.getName());
								
								jsonObject.put("transactionFee", transaction.getTransactionFee());
								jsonObject.put("transactionStatus", transaction.getStatus().name());
								jsonObject.put("paymentRef", transactionRef);
								
								jsonReturn.put("status", 22);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}else
							{
								//Hash failed
								jsonReturn.put("status", 4);
								jsonReturn.put("txn", jsonObject);
								return jsonReturn;
							}
						}
						else
						{
							//Invalid device status
							jsonReturn.put("status", 7);
							jsonReturn.put("txn", jsonObject);
							return jsonReturn;
						}
					}
					else
					{
						//Merchant Status invalid
						jsonReturn.put("status", 8);
						jsonReturn.put("txn", jsonObject);
						return jsonReturn;
					}
				}
				else
				{
					//Invalid Service Type
					jsonReturn.put("status", 11);
					jsonReturn.put("txn", jsonObject);
					return jsonReturn;
				}
			}
			else
			{
				//user is null
				jsonReturn.put("status", 12);
				jsonReturn.put("txn", jsonObject);
				return jsonReturn;
			}
    	}catch(Exception e)
    	{
    		e.printStackTrace();
    		return null;
    	}
	}

	
	
	
	public Response createNewTrafficScheme(Double schemeAmount,
			String schemeCode, String schemeDetail, String schemeName,
			String token, String requestId, String ipAddress, String currency) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			log.info(requestId + "Test 1");
			if(schemeAmount==null || schemeCode==null || schemeDetail==null || schemeName==null || currency==null)
			{
				log.info(requestId + "Test 2");
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "Test 3");
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				log.info(requestId + "Test 4");
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				String hql = "select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal();
				log.info(requestId + "hql ==" + hql);
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				
				if(user==null)
				{

					log.info(requestId + "user IS NULL");
					log.info(requestId + "user firstname = " + user.getFirstName());
					log.info(requestId + "user lastname = " + user.getLastName());
					jsonObject.add("status", ERROR.USER_NOT_FOUND);
					jsonObject.add("message", "Invalid User Account");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
			}
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "Insufficient Priviledges for this action");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			TrafficScheme trafficScheme = (TrafficScheme)this.swpService.getUniqueRecordByHQL("Select tp from TrafficScheme tp where tp.schemeCode = '"+schemeCode+"'");
			if(trafficScheme!=null)
			{
				jsonObject.add("status", ERROR.TRAFFIC_SCHEME_EXISTS);
				jsonObject.add("message", "A traffic Scheme matching the scheme code provided already exists.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			trafficScheme = new TrafficScheme();
			trafficScheme.setCreated_at(new Date());
			trafficScheme.setUpdated_at(new Date());
			trafficScheme.setSchemeAmount(schemeAmount);
			trafficScheme.setSchemeCode(schemeCode);
			trafficScheme.setSchemeDetail(schemeDetail);
			trafficScheme.setSchemeName(schemeName);
			trafficScheme.setTrafficSchemeStatus(Boolean.TRUE);
			trafficScheme.setCurrency(NFRACurrency.valueOf(currency));
			trafficScheme = (TrafficScheme)this.swpService.createNewRecord(trafficScheme);
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", trafficScheme.getId());
			js.put("createdAt", sdf1.format(trafficScheme.getCreated_at()));
			js.put("updatedAt", sdf1.format(trafficScheme.getUpdated_at()));
			js.put("schemeAmount", trafficScheme.getSchemeAmount());
			js.put("schemeCode", trafficScheme.getSchemeCode());
			js.put("schemeDetail", trafficScheme.getSchemeDetail());
			js.put("schemeName", trafficScheme.getSchemeName());
			js.put("trafficSchemeStatus", trafficScheme.getTrafficSchemeStatus());
			js.put("currency", trafficScheme.getCurrency().ordinal());
			txnObjects.put("" + a++, js);
			syncTrafficSchemeToCloud(txnObjects);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_TRAFFIC_SCHEME, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, trafficScheme.getId(), TrafficScheme.class.getName());

			JSONObject jsonScheme = new JSONObject();
			jsonScheme.put("schemeAmount", schemeAmount);
			jsonScheme.put("schemeName", schemeName);
			jsonScheme.put("schemeCode", schemeCode);
			jsonScheme.put("currency", currency);
				
			jsonObject.add("message", "New Scheme generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("schemeDetails", jsonScheme.toString());
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	private boolean syncTrafficSchemeToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("trafficscheme", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}

	
	
	
	
	public Response createNewTollLane(String routeCode, Integer tollLane,
			String token, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			log.info(requestId + "Test 1");
			if(routeCode==null || tollLane==null)
			{
				log.info(requestId + "Test 2");
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "Test 3");
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				log.info(requestId + "Test 4");
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				String hql = "select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal();
				log.info(requestId + "hql ==" + hql);
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				
				if(user==null)
				{

					log.info(requestId + "user IS NULL");
					log.info(requestId + "user firstname = " + user.getFirstName());
					log.info(requestId + "user lastname = " + user.getLastName());
					jsonObject.add("status", ERROR.USER_NOT_FOUND);
					jsonObject.add("message", "Invalid User Account");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
			}
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "Insufficient Priviledges for this action");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			TrafficTollRouteLane trafficTollRouteLane = (TrafficTollRouteLane)this.swpService.getUniqueRecordByHQL("Select tp from TrafficTollRouteLane" +
					" tp where tp.routeCode = '"+routeCode+"' AND tp.tollLane = '"+tollLane+"'");
			if(trafficTollRouteLane!=null)
			{
				jsonObject.add("status", ERROR.TRAFFIC_TOLL_ROUTE_LANE_EXISTS);
				jsonObject.add("message", "A traffic toll route lane matching the route code and toll lane provided already exists.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			TrafficTollRoute trafficTollRoute = (TrafficTollRoute)this.swpService.getUniqueRecordByHQL("Select tp from TrafficTollRoute" +
					" tp where tp.routeCode = '"+routeCode+"'");
			if(trafficTollRoute==null)
			{
				jsonObject.add("status", ERROR.TRAFFIC_TOLL_ROUTE_NOT_EXISTS);
				jsonObject.add("message", "A traffic toll route code matching the route code provided does not exists.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			trafficTollRouteLane = new TrafficTollRouteLane();
			trafficTollRouteLane.setCreated_at(new Date());
			trafficTollRouteLane.setUpdated_at(new Date());
			trafficTollRouteLane.setStartRouteName(trafficTollRoute.getStartRouteName());
			trafficTollRouteLane.setEndRouteName(trafficTollRoute.getEndRouteName());
			trafficTollRouteLane.setRouteCode(routeCode);
			trafficTollRouteLane.setTollLane(tollLane);
			trafficTollRouteLane.setStatus(Boolean.TRUE);
			trafficTollRouteLane = (TrafficTollRouteLane)this.swpService.createNewRecord(trafficTollRouteLane);
			
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", trafficTollRouteLane.getId());
			js.put("createdAt", sdf1.format(trafficTollRouteLane.getCreated_at()));
			js.put("updatedAt", sdf1.format(trafficTollRouteLane.getUpdated_at()));
			js.put("startRouteName", trafficTollRouteLane.getStartRouteName());
			js.put("endRouteName", trafficTollRouteLane.getEndRouteName());
			js.put("routeCode", trafficTollRouteLane.getRouteCode());
			js.put("tollLane", trafficTollRouteLane.getTollLane());
			js.put("status", trafficTollRouteLane.getStatus());
			txnObjects.put("" + a++, js);
			syncTrafficTollRouteLaneToCloud(txnObjects);
			
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_TRAFFIC_TOLL_ROUTE_LANE, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, trafficTollRouteLane.getId(), TrafficTollRouteLane.class.getName());

			JSONObject jsonScheme = new JSONObject();
			jsonScheme.put("startRouteName", trafficTollRoute.getStartRouteName());
			jsonScheme.put("endRouteName", trafficTollRoute.getEndRouteName());
			jsonScheme.put("routeCode", routeCode);
			jsonScheme.put("tollLane", tollLane);
				
			jsonObject.add("message", "New Toll Route Lane generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("trafficTollRouteLaneDetails", jsonScheme.toString());
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	private boolean syncTrafficTollRouteLaneToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("traffictollroutelane", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
    
	

	public Response createNewTrafficTollRouteIdentifers(String district,
			String province, String city, String startRouteName,
			String endRouteName, String routeCode, String token, String requestId, 
			String ipAddress) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			log.info(requestId + "Test 1");
			if(district==null || province==null || city==null || startRouteName==null || endRouteName==null || routeCode==null)
			{
				log.info(requestId + "Test 2");
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			log.info(requestId + "Test 3");
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				log.info(requestId + "Test 4");
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			log.info(requestId + "verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			log.info(requestId + "issuerBankCode ==" + issuerBankCode);
			if(verifyJ.has("branchCode"))
			{
				String userBranchCode = verifyJ.getString("branchCode");
				log.info(requestId + "userBranchCode ==" + userBranchCode);
			}
			String userBankCode = verifyJ.getString("bankCode");
			log.info(requestId + "userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			
			if(username!=null)
			{
				String hql = "select tp from User tp where tp.username = '" + username + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal();
				log.info(requestId + "hql ==" + hql);
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				
				if(user==null)
				{

					log.info(requestId + "user IS NULL");
					log.info(requestId + "user firstname = " + user.getFirstName());
					log.info(requestId + "user lastname = " + user.getLastName());
					jsonObject.add("status", ERROR.USER_NOT_FOUND);
					jsonObject.add("message", "Invalid User Account");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
				}
			}
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.NFRA_ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "Insufficient Priviledges for this action");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			TrafficTollRoute trafficTollRoute = (TrafficTollRoute)this.swpService.getUniqueRecordByHQL("Select tp from TrafficTollRoute" +
					" tp where tp.routeCode = '"+routeCode+"'");
			if(trafficTollRoute!=null)
			{
				jsonObject.add("status", ERROR.TRAFFIC_TOLL_ROUTE_EXISTS);
				jsonObject.add("message", "A traffic toll route matching the route code already exists.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
			}
			
			
			trafficTollRoute = new TrafficTollRoute();
			trafficTollRoute.setCreated_at(new Date());
			trafficTollRoute.setUpdated_at(new Date());
			trafficTollRoute.setCity(city);
			trafficTollRoute.setDistrict(district);
			trafficTollRoute.setEndRouteName(endRouteName);
			trafficTollRoute.setStartRouteName(startRouteName);
			trafficTollRoute.setProvince(province);
			trafficTollRoute.setRouteCode(routeCode);
			trafficTollRoute.setStatus(Boolean.TRUE);
			trafficTollRoute = (TrafficTollRoute)this.swpService.createNewRecord(trafficTollRoute);
			
			
			JSONObject js = new JSONObject();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			js.put("id", trafficTollRoute.getId());
			js.put("createdAt", sdf1.format(trafficTollRoute.getCreated_at()));
			js.put("updatedAt", sdf1.format(trafficTollRoute.getUpdated_at()));
			js.put("city", trafficTollRoute.getCity());
			js.put("district", trafficTollRoute.getDistrict());
			js.put("endRouteName", trafficTollRoute.getEndRouteName());
			js.put("startRouteName", trafficTollRoute.getStartRouteName());
			js.put("province", trafficTollRoute.getProvince());
			js.put("routeCode", trafficTollRoute.getRouteCode());
			js.put("status", trafficTollRoute.getStatus());
			txnObjects.put("" + a++, js);
			syncTrafficTollRouteToCloud(txnObjects);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_TRAFFIC_TOLL_ROUTE, requestId, this.swpService, 
					verifyJ.has("username") ? verifyJ.getString("username") : null, trafficTollRoute.getId(), TrafficTollRoute.class.getName());

			JSONObject jsonTollRoute = new JSONObject();
			jsonTollRoute.put("city", city);
			jsonTollRoute.put("district", district);
			jsonTollRoute.put("endRouteName", endRouteName);
			jsonTollRoute.put("startRouteName", startRouteName);
			jsonTollRoute.put("province", province);
			jsonTollRoute.put("routeCode", routeCode);
				
			jsonObject.add("message", "New Toll Route generated successfully");
			jsonObject.add("status", ERROR.GENERAL_OK);
			jsonObject.add("trafficTollRouteDetails", jsonTollRoute.toString());
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.UNAUTHORIZED ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	private boolean syncTrafficTollRouteToCloud(JSONObject txnObjects) {
		// TODO Auto-generated method stub
		try
		{
			
			UtilityHelper util = new UtilityHelper();
			String charset = "UTF-8";
			JSONObject jsonObj = new JSONObject();
			String str = util.sendPost(UtilityHelper.cloudBaseUrl + "testservice/services/AuthenticationServices/authenticateUser/", "username=superadmin@probasegroup.com&encPassword=dCFF0RHE&bankCode=PROBASE", jsonObj);
			jsonObj = new JSONObject(str);
			String token = jsonObj.getString("token");
			System.out.println("token = " + token);
			JSONObject header = new JSONObject();
			header.put("auth_token", token);

			JSONObject js = new JSONObject();
			js.put("traffictollroute", txnObjects);
			String parameters = "data=" + URLEncoder.encode(js.toString(), charset);
			String url = UtilityHelper.cloudBaseUrl + "testservice/services/UtilityServices/syncInData/";
			util.sendPost(url, parameters, header);
			return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
		
	}
    

	public Response receiveEODTransactionList(String payload, String requestId, String ipAddress) {
		// TODO Auto-generated method stub
		log.info(requestId + "Payload ==> " + payload);
		return null;
	}

	
	
}